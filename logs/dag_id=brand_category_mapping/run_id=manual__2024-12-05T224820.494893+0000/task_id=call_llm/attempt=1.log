[2024-12-05T22:48:25.347+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:48:25.362+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:48:20.494893+00:00 [queued]>
[2024-12-05T22:48:25.371+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:48:20.494893+00:00 [queued]>
[2024-12-05T22:48:25.372+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:48:25.388+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:48:20.494893+00:00
[2024-12-05T22:48:25.395+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8491) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:48:25.397+0000] {standard_task_runner.py:72} INFO - Started process 8492 to run task
[2024-12-05T22:48:25.397+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:48:20.494893+00:00', '--job-id', '1842', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpriq0w64k']
[2024-12-05T22:48:25.399+0000] {standard_task_runner.py:105} INFO - Job 1842: Subtask call_llm
[2024-12-05T22:48:25.437+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:48:20.494893+00:00 [running]> on host c7780884450d
[2024-12-05T22:48:25.503+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:48:20.494893+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:48:20.494893+00:00'
[2024-12-05T22:48:25.504+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:48:25.522+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['vozak', 'vplaboratory', 'vr', 'vrema', 'vsestularu', 'v-t', 'vt', 'vtech', 'vulli', 'v-unic', 'wacaco', 'wacom', 'wader', 'wagner', 'wahl', 'wahoo', 'walden', 'walfix', 'walker', 'walkmaxx', 'wallberry', 'wanday', 'wangfeng', 'warmic', 'warn'], 'next_index': 5425}
[2024-12-05T22:48:25.523+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:48:25.954+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:48:42.571+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **vozak** - appliances
2. **vplaboratory** - medicine
3. **vr** - electronics
4. **vrema** - appliances
5. **vsestularu** - apparel
6. **v-t** - electronics
7. **vt** - electronics
8. **vtech** - electronics, kids
9. **vulli** - kids
10. **v-unic** - apparel
11. **wacaco** - appliances
12. **wacom** - electronics
13. **wader** - country_yard, kids
14. **wagner** - construction
15. **wahl** - appliances
16. **wahoo** - sport, electronics
17. **walden** - furniture
18. **walfix** - construction
19. **walker** - apparel, accessories
20. **walkmaxx** - apparel
21. **wallberry** - furniture
22. **wanday** - electronics
23. **wangfeng** - appliances
24. **warmic** - appliances
25. **warn** - auto

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('vozak', 'appliances'),
    ('vplaboratory', 'medicine'),
    ('vr', 'electronics'),
    ('vrema', 'appliances'),
    ('vsestularu', 'apparel'),
    ('v-t', 'electronics'),
    ('vt', 'electronics'),
    ('vtech', 'electronics'),
    ('vtech', 'kids'),
    ('vulli', 'kids'),
    ('v-unic', 'apparel'),
    ('wacaco', 'appliances'),
    ('wacom', 'electronics'),
    ('wader', 'country_yard'),
    ('wader', 'kids'),
    ('wagner', 'construction'),
    ('wahl', 'appliances'),
    ('wahoo', 'sport'),
    ('wahoo', 'electronics'),
    ('walden', 'furniture'),
    ('walfix', 'construction'),
    ('walker', 'apparel'),
    ('walker', 'accessories'),
    ('walkmaxx', 'apparel'),
    ('wallberry', 'furniture'),
    ('wanday', 'electronics'),
    ('wangfeng', 'appliances'),
    ('warmic', 'appliances'),
    ('warn', 'auto');
```
[2024-12-05T22:48:42.572+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **vozak** - appliances
2. **vplaboratory** - medicine
3. **vr** - electronics
4. **vrema** - appliances
5. **vsestularu** - apparel
6. **v-t** - electronics
7. **vt** - electronics
8. **vtech** - electronics, kids
9. **vulli** - kids
10. **v-unic** - apparel
11. **wacaco** - appliances
12. **wacom** - electronics
13. **wader** - country_yard, kids
14. **wagner** - construction
15. **wahl** - appliances
16. **wahoo** - sport, electronics
17. **walden** - furniture
18. **walfix** - construction
19. **walker** - apparel, accessories
20. **walkmaxx** - apparel
21. **wallberry** - furniture
22. **wanday** - electronics
23. **wangfeng** - appliances
24. **warmic** - appliances
25. **warn** - auto

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('vozak', 'appliances'),
    ('vplaboratory', 'medicine'),
    ('vr', 'electronics'),
    ('vrema', 'appliances'),
    ('vsestularu', 'apparel'),
    ('v-t', 'electronics'),
    ('vt', 'electronics'),
    ('vtech', 'electronics'),
    ('vtech', 'kids'),
    ('vulli', 'kids'),
    ('v-unic', 'apparel'),
    ('wacaco', 'appliances'),
    ('wacom', 'electronics'),
    ('wader', 'country_yard'),
    ('wader', 'kids'),
    ('wagner', 'construction'),
    ('wahl', 'appliances'),
    ('wahoo', 'sport'),
    ('wahoo', 'electronics'),
    ('walden', 'furniture'),
    ('walfix', 'construction'),
    ('walker', 'apparel'),
    ('walker', 'accessories'),
    ('walkmaxx', 'apparel'),
    ('wallberry', 'furniture'),
    ('wanday', 'electronics'),
    ('wangfeng', 'appliances'),
    ('warmic', 'appliances'),
    ('warn', 'auto');
```
[2024-12-05T22:48:42.590+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:48:42.590+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:48:20.494893+00:00, execution_date=20241205T224820, start_date=20241205T224825, end_date=20241205T224842
[2024-12-05T22:48:42.633+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:48:42.650+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:48:42.653+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
