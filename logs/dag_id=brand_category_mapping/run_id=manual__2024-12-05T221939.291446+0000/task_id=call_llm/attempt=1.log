[2024-12-05T22:19:44.470+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:19:44.482+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:19:39.291446+00:00 [queued]>
[2024-12-05T22:19:44.487+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:19:39.291446+00:00 [queued]>
[2024-12-05T22:19:44.488+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:19:44.499+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:19:39.291446+00:00
[2024-12-05T22:19:44.504+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7002) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:19:44.506+0000] {standard_task_runner.py:72} INFO - Started process 7003 to run task
[2024-12-05T22:19:44.506+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:19:39.291446+00:00', '--job-id', '1524', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmphp7ujz9x']
[2024-12-05T22:19:44.508+0000] {standard_task_runner.py:105} INFO - Job 1524: Subtask call_llm
[2024-12-05T22:19:44.542+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:19:39.291446+00:00 [running]> on host c7780884450d
[2024-12-05T22:19:44.605+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:19:39.291446+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:19:39.291446+00:00'
[2024-12-05T22:19:44.606+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:19:44.622+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['prosalonprofessional', 'proskit', 'prosperplast', 'proteus', 'protherm', 'provans', 'provence', 'provoc', 'proxima', 'proxxon', 'psyonix', 'pt-group', 'puckator', 'pufas', 'puff', 'puffo', 'pulser', 'puma', 'punkyklan', 'punto', 'pupa', 'pure', 'purederm', 'puridea', 'purina'], 'next_index': 4100}
[2024-12-05T22:19:44.623+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:19:45.032+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:20:06.884+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of the provided brands to their respective categories based on the search results:

1. **prosalonprofessional** - beauty products, salon supplies (accessories)
2. **proskit** - tools, electronics (construction, electronics)
3. **prosperplast** - plastic products, gardening (country_yard)
4. **proteus** - medical devices, healthcare (medicine)
5. **protherm** - heating appliances (appliances)
6. **provans** - home decor, furniture (furniture)
7. **provence** - home decor, furniture (furniture)
8. **provoc** - cosmetics, beauty products (accessories)
9. **proxima** - software, technology (computers)
10. **proxxon** - tools, electronics (construction, electronics)
11. **psyonix** - gaming, electronics (electronics)
12. **pt-group** - IT solutions, electronics (computers, electronics)
13. **puckator** - gifts, home decor (furniture, accessories)
14. **pufas** - building materials (construction)
15. **puff** - beauty products, cosmetics (accessories)
16. **puffo** - baby products (kids)
17. **pulser** - electronics, gadgets (electronics)
18. **puma** - sportswear, accessories (apparel, sport)
19. **punkyklan** - children's clothing (kids, apparel)
20. **punto** - stationery products (stationery)
21. **pupa** - cosmetics, beauty products (accessories)
22. **pure** - skincare, beauty products (accessories)
23. **purederm** - skincare, beauty products (accessories)
24. **puridea** - tech accessories (electronics)
25. **purina** - pet food (country_yard)

Now, here is the SQL INSERT statement with the mapped categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('prosalonprofessional', 'accessories'),
    ('proskit', 'construction'),
    ('proskit', 'electronics'),
    ('prosperplast', 'country_yard'),
    ('proteus', 'medicine'),
    ('protherm', 'appliances'),
    ('provans', 'furniture'),
    ('provence', 'furniture'),
    ('provoc', 'accessories'),
    ('proxima', 'computers'),
    ('proxxon', 'construction'),
    ('proxxon', 'electronics'),
    ('psyonix', 'electronics'),
    ('pt-group', 'computers'),
    ('pt-group', 'electronics'),
    ('puckator', 'furniture'),
    ('puckator', 'accessories'),
    ('pufas', 'construction'),
    ('puff', 'accessories'),
    ('puffo', 'kids'),
    ('pulser', 'electronics'),
    ('puma', 'apparel'),
    ('puma', 'sport'),
    ('punkyklan', 'kids'),
    ('punkyklan', 'apparel'),
    ('punto', 'stationery'),
    ('pupa', 'accessories'),
    ('pure', 'accessories'),
    ('purederm', 'accessories'),
    ('puridea', 'electronics'),
    ('purina', 'country_yard');
```
[2024-12-05T22:20:06.884+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of the provided brands to their respective categories based on the search results:

1. **prosalonprofessional** - beauty products, salon supplies (accessories)
2. **proskit** - tools, electronics (construction, electronics)
3. **prosperplast** - plastic products, gardening (country_yard)
4. **proteus** - medical devices, healthcare (medicine)
5. **protherm** - heating appliances (appliances)
6. **provans** - home decor, furniture (furniture)
7. **provence** - home decor, furniture (furniture)
8. **provoc** - cosmetics, beauty products (accessories)
9. **proxima** - software, technology (computers)
10. **proxxon** - tools, electronics (construction, electronics)
11. **psyonix** - gaming, electronics (electronics)
12. **pt-group** - IT solutions, electronics (computers, electronics)
13. **puckator** - gifts, home decor (furniture, accessories)
14. **pufas** - building materials (construction)
15. **puff** - beauty products, cosmetics (accessories)
16. **puffo** - baby products (kids)
17. **pulser** - electronics, gadgets (electronics)
18. **puma** - sportswear, accessories (apparel, sport)
19. **punkyklan** - children's clothing (kids, apparel)
20. **punto** - stationery products (stationery)
21. **pupa** - cosmetics, beauty products (accessories)
22. **pure** - skincare, beauty products (accessories)
23. **purederm** - skincare, beauty products (accessories)
24. **puridea** - tech accessories (electronics)
25. **purina** - pet food (country_yard)

Now, here is the SQL INSERT statement with the mapped categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('prosalonprofessional', 'accessories'),
    ('proskit', 'construction'),
    ('proskit', 'electronics'),
    ('prosperplast', 'country_yard'),
    ('proteus', 'medicine'),
    ('protherm', 'appliances'),
    ('provans', 'furniture'),
    ('provence', 'furniture'),
    ('provoc', 'accessories'),
    ('proxima', 'computers'),
    ('proxxon', 'construction'),
    ('proxxon', 'electronics'),
    ('psyonix', 'electronics'),
    ('pt-group', 'computers'),
    ('pt-group', 'electronics'),
    ('puckator', 'furniture'),
    ('puckator', 'accessories'),
    ('pufas', 'construction'),
    ('puff', 'accessories'),
    ('puffo', 'kids'),
    ('pulser', 'electronics'),
    ('puma', 'apparel'),
    ('puma', 'sport'),
    ('punkyklan', 'kids'),
    ('punkyklan', 'apparel'),
    ('punto', 'stationery'),
    ('pupa', 'accessories'),
    ('pure', 'accessories'),
    ('purederm', 'accessories'),
    ('puridea', 'electronics'),
    ('purina', 'country_yard');
```
[2024-12-05T22:20:06.904+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:20:06.905+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:19:39.291446+00:00, execution_date=20241205T221939, start_date=20241205T221944, end_date=20241205T222006
[2024-12-05T22:20:06.934+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:20:06.951+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:20:06.954+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
