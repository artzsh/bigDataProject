[2024-12-05T22:31:54.321+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:31:54.335+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:31:49.185031+00:00 [queued]>
[2024-12-05T22:31:54.345+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:31:49.185031+00:00 [queued]>
[2024-12-05T22:31:54.346+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:31:54.368+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:31:49.185031+00:00
[2024-12-05T22:31:54.378+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7646) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:31:54.379+0000] {standard_task_runner.py:72} INFO - Started process 7647 to run task
[2024-12-05T22:31:54.379+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:31:49.185031+00:00', '--job-id', '1662', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpiezmecc4']
[2024-12-05T22:31:54.381+0000] {standard_task_runner.py:105} INFO - Job 1662: Subtask call_llm
[2024-12-05T22:31:54.425+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:31:49.185031+00:00 [running]> on host c7780884450d
[2024-12-05T22:31:54.498+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:31:49.185031+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:31:49.185031+00:00'
[2024-12-05T22:31:54.499+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:31:54.518+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['smalvic', 'sman', 'smart', 'smartbalancewheel', 'smartbox', 'smartbuy', 'smartheart', 'smartrike', 'smarttextile', 'smarttrike', 'smartway', 'smashbox', 'smashers', 'smeg', 'smiger', 'smile', 'smk', 'smoby', 'smody', 'smoneo', 'sm-parts', 'sms', 'smsl', 'smtt', 'sneha'], 'next_index': 4675}
[2024-12-05T22:31:54.519+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:31:54.956+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:32:13.556+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of the brands to their respective categories based on the search queries:

1. **smalvic**: appliances
2. **sman**: electronics
3. **smart**: electronics, appliances
4. **smartbalancewheel**: sport, electronics
5. **smartbox**: electronics
6. **smartbuy**: electronics, appliances
7. **smartheart**: medicine, electronics
8. **smartrike**: kids, sport
9. **smarttextile**: apparel
10. **smarttrike**: kids, sport
11. **smartway**: electronics
12. **smashbox**: cosmetics, accessories
13. **smashers**: kids, sport
14. **smeg**: appliances
15. **smiger**: electronics
16. **smile**: medicine
17. **smk**: electronics
18. **smoby**: kids, toys
19. **smody**: electronics
20. **smoneo**: electronics
21. **sm-parts**: auto, construction
22. **sms**: electronics
23. **smsl**: electronics
24. **smtt**: electronics
25. **sneha**: apparel

Based on the above mappings, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('smalvic', 'appliances'),
    ('sman', 'electronics'),
    ('smart', 'electronics'),
    ('smart', 'appliances'),
    ('smartbalancewheel', 'sport'),
    ('smartbalancewheel', 'electronics'),
    ('smartbox', 'electronics'),
    ('smartbuy', 'electronics'),
    ('smartbuy', 'appliances'),
    ('smartheart', 'medicine'),
    ('smartheart', 'electronics'),
    ('smartrike', 'kids'),
    ('smartrike', 'sport'),
    ('smarttextile', 'apparel'),
    ('smarttrike', 'kids'),
    ('smarttrike', 'sport'),
    ('smartway', 'electronics'),
    ('smashbox', 'accessories'),
    ('smashbox', 'cosmetics'),
    ('smashers', 'kids'),
    ('smashers', 'sport'),
    ('smeg', 'appliances'),
    ('smiger', 'electronics'),
    ('smile', 'medicine'),
    ('smk', 'electronics'),
    ('smoby', 'kids'),
    ('smoby', 'toys'),
    ('smody', 'electronics'),
    ('smoneo', 'electronics'),
    ('sm-parts', 'auto'),
    ('sm-parts', 'construction'),
    ('sms', 'electronics'),
    ('smsl', 'electronics'),
    ('smtt', 'electronics'),
    ('sneha', 'apparel');
```
[2024-12-05T22:32:13.556+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of the brands to their respective categories based on the search queries:

1. **smalvic**: appliances
2. **sman**: electronics
3. **smart**: electronics, appliances
4. **smartbalancewheel**: sport, electronics
5. **smartbox**: electronics
6. **smartbuy**: electronics, appliances
7. **smartheart**: medicine, electronics
8. **smartrike**: kids, sport
9. **smarttextile**: apparel
10. **smarttrike**: kids, sport
11. **smartway**: electronics
12. **smashbox**: cosmetics, accessories
13. **smashers**: kids, sport
14. **smeg**: appliances
15. **smiger**: electronics
16. **smile**: medicine
17. **smk**: electronics
18. **smoby**: kids, toys
19. **smody**: electronics
20. **smoneo**: electronics
21. **sm-parts**: auto, construction
22. **sms**: electronics
23. **smsl**: electronics
24. **smtt**: electronics
25. **sneha**: apparel

Based on the above mappings, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('smalvic', 'appliances'),
    ('sman', 'electronics'),
    ('smart', 'electronics'),
    ('smart', 'appliances'),
    ('smartbalancewheel', 'sport'),
    ('smartbalancewheel', 'electronics'),
    ('smartbox', 'electronics'),
    ('smartbuy', 'electronics'),
    ('smartbuy', 'appliances'),
    ('smartheart', 'medicine'),
    ('smartheart', 'electronics'),
    ('smartrike', 'kids'),
    ('smartrike', 'sport'),
    ('smarttextile', 'apparel'),
    ('smarttrike', 'kids'),
    ('smarttrike', 'sport'),
    ('smartway', 'electronics'),
    ('smashbox', 'accessories'),
    ('smashbox', 'cosmetics'),
    ('smashers', 'kids'),
    ('smashers', 'sport'),
    ('smeg', 'appliances'),
    ('smiger', 'electronics'),
    ('smile', 'medicine'),
    ('smk', 'electronics'),
    ('smoby', 'kids'),
    ('smoby', 'toys'),
    ('smody', 'electronics'),
    ('smoneo', 'electronics'),
    ('sm-parts', 'auto'),
    ('sm-parts', 'construction'),
    ('sms', 'electronics'),
    ('smsl', 'electronics'),
    ('smtt', 'electronics'),
    ('sneha', 'apparel');
```
[2024-12-05T22:32:13.580+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:32:13.580+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:31:49.185031+00:00, execution_date=20241205T223149, start_date=20241205T223154, end_date=20241205T223213
[2024-12-05T22:32:13.625+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:32:13.644+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:32:13.647+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
