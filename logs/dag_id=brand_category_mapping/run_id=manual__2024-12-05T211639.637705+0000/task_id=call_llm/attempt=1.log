[2024-12-05T21:16:44.962+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:16:44.975+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:16:39.637705+00:00 [queued]>
[2024-12-05T21:16:44.982+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:16:39.637705+00:00 [queued]>
[2024-12-05T21:16:44.982+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:16:44.995+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:16:39.637705+00:00
[2024-12-05T21:16:45.002+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3663) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:16:45.003+0000] {standard_task_runner.py:72} INFO - Started process 3664 to run task
[2024-12-05T21:16:45.003+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:16:39.637705+00:00', '--job-id', '804', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp31ajyr5c']
[2024-12-05T21:16:45.006+0000] {standard_task_runner.py:105} INFO - Job 804: Subtask call_llm
[2024-12-05T21:16:45.043+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:16:39.637705+00:00 [running]> on host c7780884450d
[2024-12-05T21:16:45.104+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:16:39.637705+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:16:39.637705+00:00'
[2024-12-05T21:16:45.105+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:16:45.122+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['collecta', 'collection', 'collins', 'collistar', 'coloma', 'colombo', 'colorfix', 'colorful', 'colorkids', 'colorway', 'colourpop', 'columbia', 'comet', 'comfee', 'comforser', 'comfort', 'comfortbaby', 'comfortzone', 'comf-pro', 'comma', 'compliment', 'complimenti', 'comporta', 'concept', 'conceptclub'], 'next_index': 1100}
[2024-12-05T21:16:45.122+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:16:45.545+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:17:05.383+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results:

1. **collecta** - stationery
2. **collection** - apparel
3. **collins** - stationery
4. **collistar** - cosmetics (not in provided categories, but can fit under accessories)
5. **coloma** - appliances
6. **colombo** - furniture
7. **colorfix** - stationery
8. **colorful** - stationery
9. **colorkids** - kids
10. **colorway** - stationery
11. **colourpop** - cosmetics (not in provided categories, but can fit under accessories)
12. **columbia** - apparel, sport
13. **comet** - electronics
14. **comfee** - appliances
15. **comforser** - auto
16. **comfort** - furniture
17. **comfortbaby** - kids
18. **comfortzone** - appliances
19. **comf-pro** - apparel
20. **comma** - apparel
21. **compliment** - cosmetics (not in provided categories, but can fit under accessories)
22. **complimenti** - cosmetics (not in provided categories, but can fit under accessories)
23. **comporta** - furniture
24. **concept** - furniture
25. **conceptclub** - apparel

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('collecta', 'stationery'),
    ('collection', 'apparel'),
    ('collins', 'stationery'),
    ('collistar', 'accessories'),
    ('coloma', 'appliances'),
    ('colombo', 'furniture'),
    ('colorfix', 'stationery'),
    ('colorful', 'stationery'),
    ('colorkids', 'kids'),
    ('colorway', 'stationery'),
    ('colourpop', 'accessories'),
    ('columbia', 'apparel'),
    ('columbia', 'sport'),
    ('comet', 'electronics'),
    ('comfee', 'appliances'),
    ('comforser', 'auto'),
    ('comfort', 'furniture'),
    ('comfortbaby', 'kids'),
    ('comfortzone', 'appliances'),
    ('comf-pro', 'apparel'),
    ('comma', 'apparel'),
    ('compliment', 'accessories'),
    ('complimenti', 'accessories'),
    ('comporta', 'furniture'),
    ('concept', 'furniture'),
    ('conceptclub', 'apparel');
```
[2024-12-05T21:17:05.384+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results:

1. **collecta** - stationery
2. **collection** - apparel
3. **collins** - stationery
4. **collistar** - cosmetics (not in provided categories, but can fit under accessories)
5. **coloma** - appliances
6. **colombo** - furniture
7. **colorfix** - stationery
8. **colorful** - stationery
9. **colorkids** - kids
10. **colorway** - stationery
11. **colourpop** - cosmetics (not in provided categories, but can fit under accessories)
12. **columbia** - apparel, sport
13. **comet** - electronics
14. **comfee** - appliances
15. **comforser** - auto
16. **comfort** - furniture
17. **comfortbaby** - kids
18. **comfortzone** - appliances
19. **comf-pro** - apparel
20. **comma** - apparel
21. **compliment** - cosmetics (not in provided categories, but can fit under accessories)
22. **complimenti** - cosmetics (not in provided categories, but can fit under accessories)
23. **comporta** - furniture
24. **concept** - furniture
25. **conceptclub** - apparel

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('collecta', 'stationery'),
    ('collection', 'apparel'),
    ('collins', 'stationery'),
    ('collistar', 'accessories'),
    ('coloma', 'appliances'),
    ('colombo', 'furniture'),
    ('colorfix', 'stationery'),
    ('colorful', 'stationery'),
    ('colorkids', 'kids'),
    ('colorway', 'stationery'),
    ('colourpop', 'accessories'),
    ('columbia', 'apparel'),
    ('columbia', 'sport'),
    ('comet', 'electronics'),
    ('comfee', 'appliances'),
    ('comforser', 'auto'),
    ('comfort', 'furniture'),
    ('comfortbaby', 'kids'),
    ('comfortzone', 'appliances'),
    ('comf-pro', 'apparel'),
    ('comma', 'apparel'),
    ('compliment', 'accessories'),
    ('complimenti', 'accessories'),
    ('comporta', 'furniture'),
    ('concept', 'furniture'),
    ('conceptclub', 'apparel');
```
[2024-12-05T21:17:05.402+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:17:05.403+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:16:39.637705+00:00, execution_date=20241205T211639, start_date=20241205T211644, end_date=20241205T211705
[2024-12-05T21:17:05.455+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:17:05.472+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:17:05.476+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
