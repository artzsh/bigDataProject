[2024-12-05T21:11:57.006+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:11:57.018+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:11:52.127199+00:00 [queued]>
[2024-12-05T21:11:57.024+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:11:52.127199+00:00 [queued]>
[2024-12-05T21:11:57.025+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:11:57.036+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:11:52.127199+00:00
[2024-12-05T21:11:57.042+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3390) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:11:57.044+0000] {standard_task_runner.py:72} INFO - Started process 3391 to run task
[2024-12-05T21:11:57.044+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:11:52.127199+00:00', '--job-id', '744', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpy5yjws9n']
[2024-12-05T21:11:57.045+0000] {standard_task_runner.py:105} INFO - Job 744: Subtask call_llm
[2024-12-05T21:11:57.081+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:11:52.127199+00:00 [running]> on host c7780884450d
[2024-12-05T21:11:57.141+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:11:52.127199+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:11:52.127199+00:00'
[2024-12-05T21:11:57.142+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:11:57.159+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['brother', 'bruder', 'brumer', 'bruynzeel', 'brw', 'bsf', 'bsn', 'bts', 'btwin', 'bubble', 'bubchen', 'buderus', 'budibasa', 'buebchen', 'bueno', 'buffalo', 'bugaboo', 'bugati', 'bugatti', 'buggy', 'build-a-bear', 'built-inoven', 'buldors', 'bulgari', 'bulget'], 'next_index': 850}
[2024-12-05T21:11:57.160+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:11:57.586+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:12:16.705+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of the brands to their respective categories based on the search results:

1. **brother** - electronics, appliances
2. **bruder** - toys, kids
3. **brumer** - stationery
4. **bruynzeel** - stationery, kids
5. **brw** - furniture
6. **bsf** - appliances
7. **bsn** - stationery
8. **bts** - apparel, accessories
9. **btwin** - sport, accessories
10. **bubble** - kids
11. **bubchen** - medicine, kids
12. **buderus** - appliances, construction
13. **budibasa** - kids
14. **buebchen** - medicine, kids
15. **bueno** - apparel
16. **buffalo** - apparel, accessories
17. **bugaboo** - kids, accessories
18. **bugati** - auto
19. **bugatti** - auto, apparel, accessories
20. **buggy** - kids, accessories
21. **build-a-bear** - kids, accessories
22. **built-inoven** - appliances
23. **buldors** - construction
24. **bulgari** - accessories, apparel
25. **bulget** - accessories

Now, here is the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('brother', 'electronics'),
    ('brother', 'appliances'),
    ('bruder', 'kids'),
    ('brumer', 'stationery'),
    ('bruynzeel', 'stationery'),
    ('bruynzeel', 'kids'),
    ('brw', 'furniture'),
    ('bsf', 'appliances'),
    ('bsn', 'stationery'),
    ('bts', 'apparel'),
    ('bts', 'accessories'),
    ('btwin', 'sport'),
    ('btwin', 'accessories'),
    ('bubble', 'kids'),
    ('bubchen', 'medicine'),
    ('bubchen', 'kids'),
    ('buderus', 'appliances'),
    ('buderus', 'construction'),
    ('budibasa', 'kids'),
    ('buebchen', 'medicine'),
    ('buebchen', 'kids'),
    ('bueno', 'apparel'),
    ('buffalo', 'apparel'),
    ('buffalo', 'accessories'),
    ('bugaboo', 'kids'),
    ('bugaboo', 'accessories'),
    ('bugati', 'auto'),
    ('bugatti', 'auto'),
    ('bugatti', 'apparel'),
    ('bugatti', 'accessories'),
    ('buggy', 'kids'),
    ('buggy', 'accessories'),
    ('build-a-bear', 'kids'),
    ('build-a-bear', 'accessories'),
    ('built-inoven', 'appliances'),
    ('buldors', 'construction'),
    ('bulgari', 'accessories'),
    ('bulgari', 'apparel'),
    ('bulget', 'accessories');
```
[2024-12-05T21:12:16.706+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of the brands to their respective categories based on the search results:

1. **brother** - electronics, appliances
2. **bruder** - toys, kids
3. **brumer** - stationery
4. **bruynzeel** - stationery, kids
5. **brw** - furniture
6. **bsf** - appliances
7. **bsn** - stationery
8. **bts** - apparel, accessories
9. **btwin** - sport, accessories
10. **bubble** - kids
11. **bubchen** - medicine, kids
12. **buderus** - appliances, construction
13. **budibasa** - kids
14. **buebchen** - medicine, kids
15. **bueno** - apparel
16. **buffalo** - apparel, accessories
17. **bugaboo** - kids, accessories
18. **bugati** - auto
19. **bugatti** - auto, apparel, accessories
20. **buggy** - kids, accessories
21. **build-a-bear** - kids, accessories
22. **built-inoven** - appliances
23. **buldors** - construction
24. **bulgari** - accessories, apparel
25. **bulget** - accessories

Now, here is the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('brother', 'electronics'),
    ('brother', 'appliances'),
    ('bruder', 'kids'),
    ('brumer', 'stationery'),
    ('bruynzeel', 'stationery'),
    ('bruynzeel', 'kids'),
    ('brw', 'furniture'),
    ('bsf', 'appliances'),
    ('bsn', 'stationery'),
    ('bts', 'apparel'),
    ('bts', 'accessories'),
    ('btwin', 'sport'),
    ('btwin', 'accessories'),
    ('bubble', 'kids'),
    ('bubchen', 'medicine'),
    ('bubchen', 'kids'),
    ('buderus', 'appliances'),
    ('buderus', 'construction'),
    ('budibasa', 'kids'),
    ('buebchen', 'medicine'),
    ('buebchen', 'kids'),
    ('bueno', 'apparel'),
    ('buffalo', 'apparel'),
    ('buffalo', 'accessories'),
    ('bugaboo', 'kids'),
    ('bugaboo', 'accessories'),
    ('bugati', 'auto'),
    ('bugatti', 'auto'),
    ('bugatti', 'apparel'),
    ('bugatti', 'accessories'),
    ('buggy', 'kids'),
    ('buggy', 'accessories'),
    ('build-a-bear', 'kids'),
    ('build-a-bear', 'accessories'),
    ('built-inoven', 'appliances'),
    ('buldors', 'construction'),
    ('bulgari', 'accessories'),
    ('bulgari', 'apparel'),
    ('bulget', 'accessories');
```
[2024-12-05T21:12:16.727+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:12:16.728+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:11:52.127199+00:00, execution_date=20241205T211152, start_date=20241205T211157, end_date=20241205T211216
[2024-12-05T21:12:16.759+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:12:16.781+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:12:16.784+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
