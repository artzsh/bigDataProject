[2024-12-05T21:02:50.774+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:02:50.786+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:02:45.056674+00:00 [queued]>
[2024-12-05T21:02:50.792+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:02:45.056674+00:00 [queued]>
[2024-12-05T21:02:50.793+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:02:50.804+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:02:45.056674+00:00
[2024-12-05T21:02:50.810+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2910) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:02:50.812+0000] {standard_task_runner.py:72} INFO - Started process 2911 to run task
[2024-12-05T21:02:50.812+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:02:45.056674+00:00', '--job-id', '642', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpf1r_12qz']
[2024-12-05T21:02:50.814+0000] {standard_task_runner.py:105} INFO - Job 642: Subtask call_llm
[2024-12-05T21:02:50.848+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:02:45.056674+00:00 [running]> on host c7780884450d
[2024-12-05T21:02:50.909+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:02:45.056674+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:02:45.056674+00:00'
[2024-12-05T21:02:50.910+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:02:50.928+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['atlantmf', 'atlas', 'atmor', 'atmosphera', 'atoll', 'atomic', 'aton', 'a-toys', 'atrai', 'ats', 'attar', 'attikus', 'attribute', 'audac', 'audi', 'audio-technica', 'audiotop', 'audison', 'aukia', 'aula', 'auldey', 'aura', 'auratic', 'aurora', 'ausini'], 'next_index': 425}
[2024-12-05T21:02:50.929+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:02:51.388+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:03:08.516+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **atlantmf** - appliances
2. **atlas** - construction
3. **atmor** - appliances
4. **atmosphera** - furniture, home decor
5. **atoll** - appliances, electronics
6. **atomic** - electronics
7. **aton** - electronics
8. **a-toys** - kids
9. **atrai** - electronics
10. **ats** - electronics
11. **attar** - accessories
12. **attikus** - apparel
13. **attribute** - electronics
14. **audac** - electronics
15. **audi** - auto, electronics
16. **audio-technica** - electronics
17. **audiotop** - electronics
18. **audison** - electronics
19. **aukia** - electronics
20. **aula** - electronics
21. **auldey** - kids
22. **aura** - electronics
23. **auratic** - electronics
24. **aurora** - electronics
25. **ausini** - kids

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('atlantmf', 'appliances'),
    ('atlas', 'construction'),
    ('atmor', 'appliances'),
    ('atmosphera', 'furniture'),
    ('atmosphera', 'home decor'),
    ('atoll', 'appliances'),
    ('atoll', 'electronics'),
    ('atomic', 'electronics'),
    ('aton', 'electronics'),
    ('a-toys', 'kids'),
    ('atrai', 'electronics'),
    ('ats', 'electronics'),
    ('attar', 'accessories'),
    ('attikus', 'apparel'),
    ('attribute', 'electronics'),
    ('audac', 'electronics'),
    ('audi', 'auto'),
    ('audi', 'electronics'),
    ('audio-technica', 'electronics'),
    ('audiotop', 'electronics'),
    ('audison', 'electronics'),
    ('aukia', 'electronics'),
    ('aula', 'electronics'),
    ('auldey', 'kids'),
    ('aura', 'electronics'),
    ('auratic', 'electronics'),
    ('aurora', 'electronics'),
    ('ausini', 'kids');
```
[2024-12-05T21:03:08.517+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **atlantmf** - appliances
2. **atlas** - construction
3. **atmor** - appliances
4. **atmosphera** - furniture, home decor
5. **atoll** - appliances, electronics
6. **atomic** - electronics
7. **aton** - electronics
8. **a-toys** - kids
9. **atrai** - electronics
10. **ats** - electronics
11. **attar** - accessories
12. **attikus** - apparel
13. **attribute** - electronics
14. **audac** - electronics
15. **audi** - auto, electronics
16. **audio-technica** - electronics
17. **audiotop** - electronics
18. **audison** - electronics
19. **aukia** - electronics
20. **aula** - electronics
21. **auldey** - kids
22. **aura** - electronics
23. **auratic** - electronics
24. **aurora** - electronics
25. **ausini** - kids

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('atlantmf', 'appliances'),
    ('atlas', 'construction'),
    ('atmor', 'appliances'),
    ('atmosphera', 'furniture'),
    ('atmosphera', 'home decor'),
    ('atoll', 'appliances'),
    ('atoll', 'electronics'),
    ('atomic', 'electronics'),
    ('aton', 'electronics'),
    ('a-toys', 'kids'),
    ('atrai', 'electronics'),
    ('ats', 'electronics'),
    ('attar', 'accessories'),
    ('attikus', 'apparel'),
    ('attribute', 'electronics'),
    ('audac', 'electronics'),
    ('audi', 'auto'),
    ('audi', 'electronics'),
    ('audio-technica', 'electronics'),
    ('audiotop', 'electronics'),
    ('audison', 'electronics'),
    ('aukia', 'electronics'),
    ('aula', 'electronics'),
    ('auldey', 'kids'),
    ('aura', 'electronics'),
    ('auratic', 'electronics'),
    ('aurora', 'electronics'),
    ('ausini', 'kids');
```
[2024-12-05T21:03:08.538+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:03:08.538+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:02:45.056674+00:00, execution_date=20241205T210245, start_date=20241205T210250, end_date=20241205T210308
[2024-12-05T21:03:08.562+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:03:08.585+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:03:08.588+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
