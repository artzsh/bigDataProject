[2024-12-05T22:19:14.234+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:19:14.249+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:19:09.134065+00:00 [queued]>
[2024-12-05T22:19:14.258+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:19:09.134065+00:00 [queued]>
[2024-12-05T22:19:14.258+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:19:14.271+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:19:09.134065+00:00
[2024-12-05T22:19:14.277+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=6974) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:19:14.279+0000] {standard_task_runner.py:72} INFO - Started process 6975 to run task
[2024-12-05T22:19:14.279+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:19:09.134065+00:00', '--job-id', '1518', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpsx5owcob']
[2024-12-05T22:19:14.281+0000] {standard_task_runner.py:105} INFO - Job 1518: Subtask call_llm
[2024-12-05T22:19:14.324+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:19:09.134065+00:00 [running]> on host c7780884450d
[2024-12-05T22:19:14.396+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:19:09.134065+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:19:09.134065+00:00'
[2024-12-05T22:19:14.397+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:19:14.415+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['princessa', 'princessemarinadebourbon', 'prinsia', 'printhousegerona', 'privia', 'prizrak', 'proaction', 'proel', 'proffcarbon', 'profiko', 'profline', 'prof-press', 'profteplo', 'progress', 'pro-ject', 'pro-karaoke', 'prolike', 'prologic', 'prology', 'proma', 'promate', 'promini', 'promountain', 'promozer', 'prorab'], 'next_index': 4075}
[2024-12-05T22:19:14.416+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:19:14.828+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:19:33.639+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the categorization for the provided brands based on a simulated search process:

1. **princessa** - apparel
2. **princessemarinadebourbon** - food (not in provided categories, but closest could be country_yard)
3. **prinsia** - electronics
4. **printhousegerona** - stationery
5. **privia** - electronics
6. **prizrak** - electronics
7. **proaction** - sport
8. **proel** - electronics
9. **proffcarbon** - construction
10. **profiko** - electronics
11. **profline** - electronics
12. **prof-press** - stationery
13. **profteplo** - appliances
14. **progress** - construction
15. **pro-ject** - electronics
16. **pro-karaoke** - electronics
17. **prolike** - electronics
18. **prologic** - electronics
19. **prology** - electronics
20. **proma** - construction
21. **promate** - electronics
22. **promini** - electronics
23. **promountain** - sport
24. **promozer** - electronics
25. **prorab** - construction

Now, here’s the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('princessa', 'apparel'),
    ('princessemarinadebourbon', 'country_yard'),
    ('prinsia', 'electronics'),
    ('printhousegerona', 'stationery'),
    ('privia', 'electronics'),
    ('prizrak', 'electronics'),
    ('proaction', 'sport'),
    ('proel', 'electronics'),
    ('proffcarbon', 'construction'),
    ('profiko', 'electronics'),
    ('profline', 'electronics'),
    ('prof-press', 'stationery'),
    ('profteplo', 'appliances'),
    ('progress', 'construction'),
    ('pro-ject', 'electronics'),
    ('pro-karaoke', 'electronics'),
    ('prolike', 'electronics'),
    ('prologic', 'electronics'),
    ('prology', 'electronics'),
    ('proma', 'construction'),
    ('promate', 'electronics'),
    ('promini', 'electronics'),
    ('promountain', 'sport'),
    ('promozer', 'electronics'),
    ('prorab', 'construction');
```
[2024-12-05T22:19:33.640+0000] {python.py:240} INFO - Done. Returned value was: Here’s the categorization for the provided brands based on a simulated search process:

1. **princessa** - apparel
2. **princessemarinadebourbon** - food (not in provided categories, but closest could be country_yard)
3. **prinsia** - electronics
4. **printhousegerona** - stationery
5. **privia** - electronics
6. **prizrak** - electronics
7. **proaction** - sport
8. **proel** - electronics
9. **proffcarbon** - construction
10. **profiko** - electronics
11. **profline** - electronics
12. **prof-press** - stationery
13. **profteplo** - appliances
14. **progress** - construction
15. **pro-ject** - electronics
16. **pro-karaoke** - electronics
17. **prolike** - electronics
18. **prologic** - electronics
19. **prology** - electronics
20. **proma** - construction
21. **promate** - electronics
22. **promini** - electronics
23. **promountain** - sport
24. **promozer** - electronics
25. **prorab** - construction

Now, here’s the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('princessa', 'apparel'),
    ('princessemarinadebourbon', 'country_yard'),
    ('prinsia', 'electronics'),
    ('printhousegerona', 'stationery'),
    ('privia', 'electronics'),
    ('prizrak', 'electronics'),
    ('proaction', 'sport'),
    ('proel', 'electronics'),
    ('proffcarbon', 'construction'),
    ('profiko', 'electronics'),
    ('profline', 'electronics'),
    ('prof-press', 'stationery'),
    ('profteplo', 'appliances'),
    ('progress', 'construction'),
    ('pro-ject', 'electronics'),
    ('pro-karaoke', 'electronics'),
    ('prolike', 'electronics'),
    ('prologic', 'electronics'),
    ('prology', 'electronics'),
    ('proma', 'construction'),
    ('promate', 'electronics'),
    ('promini', 'electronics'),
    ('promountain', 'sport'),
    ('promozer', 'electronics'),
    ('prorab', 'construction');
```
[2024-12-05T22:19:33.660+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:19:33.660+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:19:09.134065+00:00, execution_date=20241205T221909, start_date=20241205T221914, end_date=20241205T221933
[2024-12-05T22:19:33.681+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:19:33.697+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:19:33.702+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
