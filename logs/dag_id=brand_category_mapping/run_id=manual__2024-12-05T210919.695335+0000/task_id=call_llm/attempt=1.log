[2024-12-05T21:09:24.183+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:09:24.196+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:09:19.695335+00:00 [queued]>
[2024-12-05T21:09:24.204+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:09:19.695335+00:00 [queued]>
[2024-12-05T21:09:24.205+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:09:24.219+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:09:19.695335+00:00
[2024-12-05T21:09:24.225+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3249) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:09:24.227+0000] {standard_task_runner.py:72} INFO - Started process 3250 to run task
[2024-12-05T21:09:24.227+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:09:19.695335+00:00', '--job-id', '714', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpbnwpikho']
[2024-12-05T21:09:24.229+0000] {standard_task_runner.py:105} INFO - Job 714: Subtask call_llm
[2024-12-05T21:09:24.266+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:09:19.695335+00:00 [running]> on host c7780884450d
[2024-12-05T21:09:24.332+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:09:19.695335+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:09:19.695335+00:00'
[2024-12-05T21:09:24.333+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:09:24.350+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['bkf', 'b-kids', 'blackberry', 'blackbox', 'blackdecker', 'blackmores', 'blackstonelabs', 'blackview', 'blackvue', 'blam', 'blanco', 'blanx', 'blaster', 'blauberg', 'blaumann', 'blaupunkt', 'blend-a-med', 'blenderbottle', 'blg', 'blistex', 'blitz', 'blocks', 'bloombaby', 'bloomsbury', 'bluedio'], 'next_index': 725}
[2024-12-05T21:09:24.351+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:09:24.801+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:09:45.325+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the categorization of the provided brands based on the search results:

1. **bkf** - electronics
2. **b-kids** - kids, accessories
3. **blackberry** - electronics, computers
4. **blackbox** - electronics, appliances
5. **blackdecker** - appliances, tools
6. **blackmores** - medicine
7. **blackstonelabs** - electronics
8. **blackview** - electronics
9. **blackvue** - electronics
10. **blam** - electronics, accessories
11. **blanco** - appliances, furniture
12. **blanx** - medicine
13. **blaster** - electronics, accessories
14. **blauberg** - appliances
15. **blaumann** - appliances
16. **blaupunkt** - electronics
17. **blend-a-med** - medicine
18. **blenderbottle** - accessories, sport
19. **blg** - electronics
20. **blistex** - medicine
21. **blitz** - electronics, appliances
22. **blocks** - kids, toys
23. **bloombaby** - kids, accessories
24. **bloomsbury** - stationery
25. **bluedio** - electronics

Now, here’s the SQL INSERT statement based on the categorization:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('bkf', 'electronics'),
    ('b-kids', 'kids'),
    ('b-kids', 'accessories'),
    ('blackberry', 'electronics'),
    ('blackberry', 'computers'),
    ('blackbox', 'electronics'),
    ('blackbox', 'appliances'),
    ('blackdecker', 'appliances'),
    ('blackdecker', 'tools'),
    ('blackmores', 'medicine'),
    ('blackstonelabs', 'electronics'),
    ('blackview', 'electronics'),
    ('blackvue', 'electronics'),
    ('blam', 'electronics'),
    ('blam', 'accessories'),
    ('blanco', 'appliances'),
    ('blanco', 'furniture'),
    ('blanx', 'medicine'),
    ('blaster', 'electronics'),
    ('blaster', 'accessories'),
    ('blauberg', 'appliances'),
    ('blaumann', 'appliances'),
    ('blaupunkt', 'electronics'),
    ('blend-a-med', 'medicine'),
    ('blenderbottle', 'accessories'),
    ('blenderbottle', 'sport'),
    ('blg', 'electronics'),
    ('blistex', 'medicine'),
    ('blitz', 'electronics'),
    ('blitz', 'appliances'),
    ('blocks', 'kids'),
    ('blocks', 'toys'),
    ('bloombaby', 'kids'),
    ('bloombaby', 'accessories'),
    ('bloomsbury', 'stationery'),
    ('bluedio', 'electronics');
```
[2024-12-05T21:09:45.326+0000] {python.py:240} INFO - Done. Returned value was: Here’s the categorization of the provided brands based on the search results:

1. **bkf** - electronics
2. **b-kids** - kids, accessories
3. **blackberry** - electronics, computers
4. **blackbox** - electronics, appliances
5. **blackdecker** - appliances, tools
6. **blackmores** - medicine
7. **blackstonelabs** - electronics
8. **blackview** - electronics
9. **blackvue** - electronics
10. **blam** - electronics, accessories
11. **blanco** - appliances, furniture
12. **blanx** - medicine
13. **blaster** - electronics, accessories
14. **blauberg** - appliances
15. **blaumann** - appliances
16. **blaupunkt** - electronics
17. **blend-a-med** - medicine
18. **blenderbottle** - accessories, sport
19. **blg** - electronics
20. **blistex** - medicine
21. **blitz** - electronics, appliances
22. **blocks** - kids, toys
23. **bloombaby** - kids, accessories
24. **bloomsbury** - stationery
25. **bluedio** - electronics

Now, here’s the SQL INSERT statement based on the categorization:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('bkf', 'electronics'),
    ('b-kids', 'kids'),
    ('b-kids', 'accessories'),
    ('blackberry', 'electronics'),
    ('blackberry', 'computers'),
    ('blackbox', 'electronics'),
    ('blackbox', 'appliances'),
    ('blackdecker', 'appliances'),
    ('blackdecker', 'tools'),
    ('blackmores', 'medicine'),
    ('blackstonelabs', 'electronics'),
    ('blackview', 'electronics'),
    ('blackvue', 'electronics'),
    ('blam', 'electronics'),
    ('blam', 'accessories'),
    ('blanco', 'appliances'),
    ('blanco', 'furniture'),
    ('blanx', 'medicine'),
    ('blaster', 'electronics'),
    ('blaster', 'accessories'),
    ('blauberg', 'appliances'),
    ('blaumann', 'appliances'),
    ('blaupunkt', 'electronics'),
    ('blend-a-med', 'medicine'),
    ('blenderbottle', 'accessories'),
    ('blenderbottle', 'sport'),
    ('blg', 'electronics'),
    ('blistex', 'medicine'),
    ('blitz', 'electronics'),
    ('blitz', 'appliances'),
    ('blocks', 'kids'),
    ('blocks', 'toys'),
    ('bloombaby', 'kids'),
    ('bloombaby', 'accessories'),
    ('bloomsbury', 'stationery'),
    ('bluedio', 'electronics');
```
[2024-12-05T21:09:45.348+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:09:45.349+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:09:19.695335+00:00, execution_date=20241205T210919, start_date=20241205T210924, end_date=20241205T210945
[2024-12-05T21:09:45.380+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:09:45.400+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:09:45.403+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
