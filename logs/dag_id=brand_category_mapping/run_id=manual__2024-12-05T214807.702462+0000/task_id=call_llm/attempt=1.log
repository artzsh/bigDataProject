[2024-12-05T21:48:13.710+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:48:13.723+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:48:07.702462+00:00 [queued]>
[2024-12-05T21:48:13.730+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:48:07.702462+00:00 [queued]>
[2024-12-05T21:48:13.730+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:48:13.743+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:48:07.702462+00:00
[2024-12-05T21:48:13.749+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5329) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:48:13.750+0000] {standard_task_runner.py:72} INFO - Started process 5330 to run task
[2024-12-05T21:48:13.751+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:48:07.702462+00:00', '--job-id', '1164', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpgclycdaq']
[2024-12-05T21:48:13.753+0000] {standard_task_runner.py:105} INFO - Job 1164: Subtask call_llm
[2024-12-05T21:48:13.789+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:48:07.702462+00:00 [running]> on host c7780884450d
[2024-12-05T21:48:13.860+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:48:07.702462+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:48:07.702462+00:00'
[2024-12-05T21:48:13.861+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:48:13.881+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['kelli', 'kelly', 'ken', 'keneksi', 'kenko', 'kenwell', 'kenwood', 'kenzo', 'keramikarucnojraboty', 'keramin', 'kerastase', 'kerasys', 'keremet', 'kessler', 'keter', 'kettler', 'keuco', 'keumkang', 'keune', 'kf', 'kgb', 'khancomics', 'khw', 'ki', 'kia'], 'next_index': 2600}
[2024-12-05T21:48:13.882+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:48:14.317+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:48:29.407+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the brands provided, I will assign categories according to the search results and my knowledge. Here is the mapping of brands to categories:

1. **kelli** - apparel
2. **kelly** - apparel, accessories
3. **ken** - apparel
4. **keneksi** - electronics, computers
5. **kenko** - medicine, accessories
6. **kenwell** - appliances
7. **kenwood** - appliances, electronics
8. **kenzo** - apparel, accessories
9. **keramikarucnojraboty** - construction
10. **keramin** - construction, appliances
11. **kerastase** - medicine, accessories
12. **kerasys** - medicine, accessories
13. **keremet** - construction
14. **kessler** - furniture
15. **keter** - country_yard, construction
16. **kettler** - sport, country_yard
17. **keuco** - appliances
18. **keumkang** - construction
19. **keune** - medicine, accessories
20. **kf** - electronics
21. **kgb** - electronics
22. **khancomics** - stationery
23. **khw** - toys, kids
24. **ki** - apparel
25. **kia** - auto

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kelli', 'apparel'),
    ('kelly', 'apparel'),
    ('kelly', 'accessories'),
    ('ken', 'apparel'),
    ('keneksi', 'electronics'),
    ('keneksi', 'computers'),
    ('kenko', 'medicine'),
    ('kenko', 'accessories'),
    ('kenwell', 'appliances'),
    ('kenwood', 'appliances'),
    ('kenwood', 'electronics'),
    ('kenzo', 'apparel'),
    ('kenzo', 'accessories'),
    ('keramikarucnojraboty', 'construction'),
    ('keramin', 'construction'),
    ('keramin', 'appliances'),
    ('kerastase', 'medicine'),
    ('kerastase', 'accessories'),
    ('kerasys', 'medicine'),
    ('kerasys', 'accessories'),
    ('keremet', 'construction'),
    ('kessler', 'furniture'),
    ('keter', 'country_yard'),
    ('keter', 'construction'),
    ('kettler', 'sport'),
    ('kettler', 'country_yard'),
    ('keuco', 'appliances'),
    ('keumkang', 'construction'),
    ('keune', 'medicine'),
    ('keune', 'accessories'),
    ('kf', 'electronics'),
    ('kgb', 'electronics'),
    ('khancomics', 'stationery'),
    ('khw', 'kids'),
    ('ki', 'apparel'),
    ('kia', 'auto');
``` 

This SQL statement reflects the categories assigned to each brand based on the information gathered.
[2024-12-05T21:48:29.408+0000] {python.py:240} INFO - Done. Returned value was: Based on the brands provided, I will assign categories according to the search results and my knowledge. Here is the mapping of brands to categories:

1. **kelli** - apparel
2. **kelly** - apparel, accessories
3. **ken** - apparel
4. **keneksi** - electronics, computers
5. **kenko** - medicine, accessories
6. **kenwell** - appliances
7. **kenwood** - appliances, electronics
8. **kenzo** - apparel, accessories
9. **keramikarucnojraboty** - construction
10. **keramin** - construction, appliances
11. **kerastase** - medicine, accessories
12. **kerasys** - medicine, accessories
13. **keremet** - construction
14. **kessler** - furniture
15. **keter** - country_yard, construction
16. **kettler** - sport, country_yard
17. **keuco** - appliances
18. **keumkang** - construction
19. **keune** - medicine, accessories
20. **kf** - electronics
21. **kgb** - electronics
22. **khancomics** - stationery
23. **khw** - toys, kids
24. **ki** - apparel
25. **kia** - auto

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kelli', 'apparel'),
    ('kelly', 'apparel'),
    ('kelly', 'accessories'),
    ('ken', 'apparel'),
    ('keneksi', 'electronics'),
    ('keneksi', 'computers'),
    ('kenko', 'medicine'),
    ('kenko', 'accessories'),
    ('kenwell', 'appliances'),
    ('kenwood', 'appliances'),
    ('kenwood', 'electronics'),
    ('kenzo', 'apparel'),
    ('kenzo', 'accessories'),
    ('keramikarucnojraboty', 'construction'),
    ('keramin', 'construction'),
    ('keramin', 'appliances'),
    ('kerastase', 'medicine'),
    ('kerastase', 'accessories'),
    ('kerasys', 'medicine'),
    ('kerasys', 'accessories'),
    ('keremet', 'construction'),
    ('kessler', 'furniture'),
    ('keter', 'country_yard'),
    ('keter', 'construction'),
    ('kettler', 'sport'),
    ('kettler', 'country_yard'),
    ('keuco', 'appliances'),
    ('keumkang', 'construction'),
    ('keune', 'medicine'),
    ('keune', 'accessories'),
    ('kf', 'electronics'),
    ('kgb', 'electronics'),
    ('khancomics', 'stationery'),
    ('khw', 'kids'),
    ('ki', 'apparel'),
    ('kia', 'auto');
``` 

This SQL statement reflects the categories assigned to each brand based on the information gathered.
[2024-12-05T21:48:29.614+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:48:29.615+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:48:07.702462+00:00, execution_date=20241205T214807, start_date=20241205T214813, end_date=20241205T214829
[2024-12-05T21:48:29.655+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:48:29.674+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:48:29.677+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
