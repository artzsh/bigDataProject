[2024-12-05T21:24:45.269+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:24:45.284+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:24:39.232162+00:00 [queued]>
[2024-12-05T21:24:45.293+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:24:39.232162+00:00 [queued]>
[2024-12-05T21:24:45.293+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:24:45.309+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:24:39.232162+00:00
[2024-12-05T21:24:45.316+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4104) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:24:45.317+0000] {standard_task_runner.py:72} INFO - Started process 4105 to run task
[2024-12-05T21:24:45.317+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:24:39.232162+00:00', '--job-id', '900', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmphe_8mtzk']
[2024-12-05T21:24:45.319+0000] {standard_task_runner.py:105} INFO - Job 900: Subtask call_llm
[2024-12-05T21:24:45.375+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:24:39.232162+00:00 [running]> on host c7780884450d
[2024-12-05T21:24:45.512+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:24:39.232162+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:24:39.232162+00:00'
[2024-12-05T21:24:45.513+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:24:45.531+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['educa', 'educo', 'edufun', 'edu-play', 'efba', 'effect', 'efp', 'efremov', 'eger', 'egg', 'egger', 'eglo', 'egmont', 'ego', 'egoiste', 'egp', 'egreat', 'ehome', 'eichorn', 'einhell', 'ekel', 'ekobike', 'ekolit', 'ekonomia', 'ekotandyr'], 'next_index': 1500}
[2024-12-05T21:24:45.531+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:24:45.965+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:25:02.751+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on the search results:

1. **educa** - kids, stationery
2. **educo** - kids, stationery
3. **edufun** - kids, stationery
4. **edu-play** - kids, stationery
5. **efba** - kids, stationery
6. **effect** - electronics
7. **efp** - electronics
8. **efremov** - construction
9. **eger** - appliances
10. **egg** - appliances
11. **egger** - construction
12. **eglo** - electronics, appliances
13. **egmont** - kids, stationery
14. **ego** - electronics
15. **egoiste** - apparel
16. **egp** - electronics
17. **egreat** - electronics
18. **ehome** - electronics, appliances
19. **eichorn** - kids, stationery
20. **einhell** - construction, appliances
21. **ekel** - auto
22. **ekobike** - auto, sport
23. **ekolit** - construction
24. **ekonomia** - stationery
25. **ekotandyr** - country_yard

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('educa', 'kids'),
    ('educa', 'stationery'),
    ('educo', 'kids'),
    ('educo', 'stationery'),
    ('edufun', 'kids'),
    ('edufun', 'stationery'),
    ('edu-play', 'kids'),
    ('edu-play', 'stationery'),
    ('efba', 'kids'),
    ('efba', 'stationery'),
    ('effect', 'electronics'),
    ('efp', 'electronics'),
    ('efremov', 'construction'),
    ('eger', 'appliances'),
    ('egg', 'appliances'),
    ('egger', 'construction'),
    ('eglo', 'electronics'),
    ('eglo', 'appliances'),
    ('egmont', 'kids'),
    ('egmont', 'stationery'),
    ('ego', 'electronics'),
    ('egoiste', 'apparel'),
    ('egp', 'electronics'),
    ('egreat', 'electronics'),
    ('ehome', 'electronics'),
    ('ehome', 'appliances'),
    ('eichorn', 'kids'),
    ('eichorn', 'stationery'),
    ('einhell', 'construction'),
    ('einhell', 'appliances'),
    ('ekel', 'auto'),
    ('ekobike', 'auto'),
    ('ekobike', 'sport'),
    ('ekolit', 'construction'),
    ('ekonomia', 'stationery'),
    ('ekotandyr', 'country_yard');
```
[2024-12-05T21:25:02.752+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on the search results:

1. **educa** - kids, stationery
2. **educo** - kids, stationery
3. **edufun** - kids, stationery
4. **edu-play** - kids, stationery
5. **efba** - kids, stationery
6. **effect** - electronics
7. **efp** - electronics
8. **efremov** - construction
9. **eger** - appliances
10. **egg** - appliances
11. **egger** - construction
12. **eglo** - electronics, appliances
13. **egmont** - kids, stationery
14. **ego** - electronics
15. **egoiste** - apparel
16. **egp** - electronics
17. **egreat** - electronics
18. **ehome** - electronics, appliances
19. **eichorn** - kids, stationery
20. **einhell** - construction, appliances
21. **ekel** - auto
22. **ekobike** - auto, sport
23. **ekolit** - construction
24. **ekonomia** - stationery
25. **ekotandyr** - country_yard

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('educa', 'kids'),
    ('educa', 'stationery'),
    ('educo', 'kids'),
    ('educo', 'stationery'),
    ('edufun', 'kids'),
    ('edufun', 'stationery'),
    ('edu-play', 'kids'),
    ('edu-play', 'stationery'),
    ('efba', 'kids'),
    ('efba', 'stationery'),
    ('effect', 'electronics'),
    ('efp', 'electronics'),
    ('efremov', 'construction'),
    ('eger', 'appliances'),
    ('egg', 'appliances'),
    ('egger', 'construction'),
    ('eglo', 'electronics'),
    ('eglo', 'appliances'),
    ('egmont', 'kids'),
    ('egmont', 'stationery'),
    ('ego', 'electronics'),
    ('egoiste', 'apparel'),
    ('egp', 'electronics'),
    ('egreat', 'electronics'),
    ('ehome', 'electronics'),
    ('ehome', 'appliances'),
    ('eichorn', 'kids'),
    ('eichorn', 'stationery'),
    ('einhell', 'construction'),
    ('einhell', 'appliances'),
    ('ekel', 'auto'),
    ('ekobike', 'auto'),
    ('ekobike', 'sport'),
    ('ekolit', 'construction'),
    ('ekonomia', 'stationery'),
    ('ekotandyr', 'country_yard');
```
[2024-12-05T21:25:02.774+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:25:02.775+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:24:39.232162+00:00, execution_date=20241205T212439, start_date=20241205T212445, end_date=20241205T212502
[2024-12-05T21:25:02.832+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:25:02.851+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:25:02.854+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
