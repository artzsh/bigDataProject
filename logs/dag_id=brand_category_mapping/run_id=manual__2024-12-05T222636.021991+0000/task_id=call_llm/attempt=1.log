[2024-12-05T22:26:41.611+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:26:41.624+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:26:36.021991+00:00 [queued]>
[2024-12-05T22:26:41.631+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:26:36.021991+00:00 [queued]>
[2024-12-05T22:26:41.631+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:26:41.644+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:26:36.021991+00:00
[2024-12-05T22:26:41.650+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7387) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:26:41.651+0000] {standard_task_runner.py:72} INFO - Started process 7388 to run task
[2024-12-05T22:26:41.652+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:26:36.021991+00:00', '--job-id', '1608', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpc2mnjxy2']
[2024-12-05T22:26:41.654+0000] {standard_task_runner.py:105} INFO - Job 1608: Subtask call_llm
[2024-12-05T22:26:41.688+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:26:36.021991+00:00 [running]> on host c7780884450d
[2024-12-05T22:26:41.751+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:26:36.021991+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:26:36.021991+00:00'
[2024-12-05T22:26:41.752+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:26:41.768+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['santacruz', 'santak', 'sante', 'santehprom', 'santek', 'santeri', 'santoku', 'santoro', 'sapphire', 'sapsula', 'sarabella', 'sardes', 'sargan', 'sariel', 'sarmat', 'sassy', 'sasta', 'sat', 'satagood', 'satura', 'saturn', 'saucony', 'sauflon', 'sava', 'savagegear'], 'next_index': 4450}
[2024-12-05T22:26:41.769+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:26:42.193+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:26:58.658+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of the brands to their respective categories based on the search results:

1. **santacruz**: sport, apparel
2. **santak**: appliances
3. **sante**: medicine
4. **santehprom**: medicine
5. **santek**: appliances
6. **santeri**: furniture
7. **santoku**: appliances, kitchen (cutlery)
8. **santoro**: stationery, kids
9. **sapphire**: electronics
10. **sapsula**: furniture
11. **sarabella**: apparel, accessories
12. **sardes**: construction
13. **sargan**: apparel, accessories
14. **sariel**: accessories
15. **sarmat**: auto
16. **sassy**: kids, apparel
17. **sasta**: apparel, sport
18. **sat**: electronics
19. **satagood**: electronics
20. **satura**: apparel
21. **saturn**: appliances, electronics
22. **saucony**: sport, apparel
23. **sauflon**: appliances
24. **sava**: apparel
25. **savagegear**: sport, apparel

Based on this mapping, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('santacruz', 'sport'),
    ('santacruz', 'apparel'),
    ('santak', 'appliances'),
    ('sante', 'medicine'),
    ('santehprom', 'medicine'),
    ('santek', 'appliances'),
    ('santeri', 'furniture'),
    ('santoku', 'appliances'),
    ('santoku', 'kitchen'),
    ('santoro', 'stationery'),
    ('santoro', 'kids'),
    ('sapphire', 'electronics'),
    ('sapsula', 'furniture'),
    ('sarabella', 'apparel'),
    ('sarabella', 'accessories'),
    ('sardes', 'construction'),
    ('sargan', 'apparel'),
    ('sargan', 'accessories'),
    ('sariel', 'accessories'),
    ('sarmat', 'auto'),
    ('sassy', 'kids'),
    ('sassy', 'apparel'),
    ('sasta', 'apparel'),
    ('sasta', 'sport'),
    ('sat', 'electronics'),
    ('satagood', 'electronics'),
    ('satura', 'apparel'),
    ('saturn', 'appliances'),
    ('saturn', 'electronics'),
    ('saucony', 'sport'),
    ('saucony', 'apparel'),
    ('sauflon', 'appliances'),
    ('sava', 'apparel'),
    ('savagegear', 'sport'),
    ('savagegear', 'apparel');
```
[2024-12-05T22:26:58.659+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of the brands to their respective categories based on the search results:

1. **santacruz**: sport, apparel
2. **santak**: appliances
3. **sante**: medicine
4. **santehprom**: medicine
5. **santek**: appliances
6. **santeri**: furniture
7. **santoku**: appliances, kitchen (cutlery)
8. **santoro**: stationery, kids
9. **sapphire**: electronics
10. **sapsula**: furniture
11. **sarabella**: apparel, accessories
12. **sardes**: construction
13. **sargan**: apparel, accessories
14. **sariel**: accessories
15. **sarmat**: auto
16. **sassy**: kids, apparel
17. **sasta**: apparel, sport
18. **sat**: electronics
19. **satagood**: electronics
20. **satura**: apparel
21. **saturn**: appliances, electronics
22. **saucony**: sport, apparel
23. **sauflon**: appliances
24. **sava**: apparel
25. **savagegear**: sport, apparel

Based on this mapping, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('santacruz', 'sport'),
    ('santacruz', 'apparel'),
    ('santak', 'appliances'),
    ('sante', 'medicine'),
    ('santehprom', 'medicine'),
    ('santek', 'appliances'),
    ('santeri', 'furniture'),
    ('santoku', 'appliances'),
    ('santoku', 'kitchen'),
    ('santoro', 'stationery'),
    ('santoro', 'kids'),
    ('sapphire', 'electronics'),
    ('sapsula', 'furniture'),
    ('sarabella', 'apparel'),
    ('sarabella', 'accessories'),
    ('sardes', 'construction'),
    ('sargan', 'apparel'),
    ('sargan', 'accessories'),
    ('sariel', 'accessories'),
    ('sarmat', 'auto'),
    ('sassy', 'kids'),
    ('sassy', 'apparel'),
    ('sasta', 'apparel'),
    ('sasta', 'sport'),
    ('sat', 'electronics'),
    ('satagood', 'electronics'),
    ('satura', 'apparel'),
    ('saturn', 'appliances'),
    ('saturn', 'electronics'),
    ('saucony', 'sport'),
    ('saucony', 'apparel'),
    ('sauflon', 'appliances'),
    ('sava', 'apparel'),
    ('savagegear', 'sport'),
    ('savagegear', 'apparel');
```
[2024-12-05T22:26:58.679+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:26:58.680+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:26:36.021991+00:00, execution_date=20241205T222636, start_date=20241205T222641, end_date=20241205T222658
[2024-12-05T22:26:58.716+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:26:58.737+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:26:58.740+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
