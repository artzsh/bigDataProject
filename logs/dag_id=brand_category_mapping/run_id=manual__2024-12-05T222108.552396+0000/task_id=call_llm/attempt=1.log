[2024-12-05T22:21:13.414+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:21:13.426+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:21:08.552396+00:00 [queued]>
[2024-12-05T22:21:13.432+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:21:08.552396+00:00 [queued]>
[2024-12-05T22:21:13.433+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:21:13.445+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:21:08.552396+00:00
[2024-12-05T22:21:13.451+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7086) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:21:13.452+0000] {standard_task_runner.py:72} INFO - Started process 7087 to run task
[2024-12-05T22:21:13.453+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:21:08.552396+00:00', '--job-id', '1542', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpz4znrzmb']
[2024-12-05T22:21:13.454+0000] {standard_task_runner.py:105} INFO - Job 1542: Subtask call_llm
[2024-12-05T22:21:13.490+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:21:08.552396+00:00 [running]> on host c7780884450d
[2024-12-05T22:21:13.552+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:21:08.552396+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:21:08.552396+00:00'
[2024-12-05T22:21:13.554+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:21:13.570+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['rapoo', 'rare', 'rasch', 'rastar', 'ravak', 'raval', 'raveltex', 'ravenol', 'ravensburger', 'ray-ban', 'raymondweil', 'raytheonphantom', 'razer', 'razor', 'rcf', 'rcr', 'rdx', 'realflame', 'realme', 'rebellion', 'rebus', 'recaro', 'recci', 'receptybabuskiagafi', 'redblu'], 'next_index': 4175}
[2024-12-05T22:21:13.571+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:21:14.019+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:21:35.166+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on the search results:

1. **rapoo** - electronics, accessories
2. **rare** - apparel
3. **rasch** - furniture, construction
4. **rastar** - kids, toys
5. **ravak** - appliances, furniture
6. **raval** - furniture, construction
7. **raveltex** - furniture, construction
8. **ravenol** - auto, electronics
9. **ravensburger** - kids, stationery
10. **ray-ban** - accessories, apparel
11. **raymondweil** - accessories, apparel
12. **raytheonphantom** - electronics, auto
13. **razer** - electronics, computers
14. **razor** - electronics, accessories
15. **rcf** - electronics
16. **rcr** - appliances, electronics
17. **rdx** - sport, accessories
18. **realflame** - appliances, furniture
19. **realme** - electronics, computers
20. **rebellion** - apparel, accessories
21. **rebus** - stationery
22. **recaro** - auto, furniture
23. **recci** - appliances
24. **receptybabuskiagafi** - not enough information, assigned to miscellaneous categories (furniture, appliances)
25. **redblu** - apparel, accessories

Now, here’s the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rapoo', 'electronics'),
    ('rapoo', 'accessories'),
    ('rare', 'apparel'),
    ('rasch', 'furniture'),
    ('rasch', 'construction'),
    ('rastar', 'kids'),
    ('rastar', 'toys'),
    ('ravak', 'appliances'),
    ('ravak', 'furniture'),
    ('raval', 'furniture'),
    ('raval', 'construction'),
    ('raveltex', 'furniture'),
    ('raveltex', 'construction'),
    ('ravenol', 'auto'),
    ('ravenol', 'electronics'),
    ('ravensburger', 'kids'),
    ('ravensburger', 'stationery'),
    ('ray-ban', 'accessories'),
    ('ray-ban', 'apparel'),
    ('raymondweil', 'accessories'),
    ('raymondweil', 'apparel'),
    ('raytheonphantom', 'electronics'),
    ('raytheonphantom', 'auto'),
    ('razer', 'electronics'),
    ('razer', 'computers'),
    ('razor', 'electronics'),
    ('razor', 'accessories'),
    ('rcf', 'electronics'),
    ('rcr', 'appliances'),
    ('rcr', 'electronics'),
    ('rdx', 'sport'),
    ('rdx', 'accessories'),
    ('realflame', 'appliances'),
    ('realflame', 'furniture'),
    ('realme', 'electronics'),
    ('realme', 'computers'),
    ('rebellion', 'apparel'),
    ('rebellion', 'accessories'),
    ('rebus', 'stationery'),
    ('recaro', 'auto'),
    ('recaro', 'furniture'),
    ('recci', 'appliances'),
    ('receptybabuskiagafi', 'furniture'),
    ('receptybabuskiagafi', 'appliances'),
    ('redblu', 'apparel'),
    ('redblu', 'accessories');
```
[2024-12-05T22:21:35.167+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on the search results:

1. **rapoo** - electronics, accessories
2. **rare** - apparel
3. **rasch** - furniture, construction
4. **rastar** - kids, toys
5. **ravak** - appliances, furniture
6. **raval** - furniture, construction
7. **raveltex** - furniture, construction
8. **ravenol** - auto, electronics
9. **ravensburger** - kids, stationery
10. **ray-ban** - accessories, apparel
11. **raymondweil** - accessories, apparel
12. **raytheonphantom** - electronics, auto
13. **razer** - electronics, computers
14. **razor** - electronics, accessories
15. **rcf** - electronics
16. **rcr** - appliances, electronics
17. **rdx** - sport, accessories
18. **realflame** - appliances, furniture
19. **realme** - electronics, computers
20. **rebellion** - apparel, accessories
21. **rebus** - stationery
22. **recaro** - auto, furniture
23. **recci** - appliances
24. **receptybabuskiagafi** - not enough information, assigned to miscellaneous categories (furniture, appliances)
25. **redblu** - apparel, accessories

Now, here’s the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rapoo', 'electronics'),
    ('rapoo', 'accessories'),
    ('rare', 'apparel'),
    ('rasch', 'furniture'),
    ('rasch', 'construction'),
    ('rastar', 'kids'),
    ('rastar', 'toys'),
    ('ravak', 'appliances'),
    ('ravak', 'furniture'),
    ('raval', 'furniture'),
    ('raval', 'construction'),
    ('raveltex', 'furniture'),
    ('raveltex', 'construction'),
    ('ravenol', 'auto'),
    ('ravenol', 'electronics'),
    ('ravensburger', 'kids'),
    ('ravensburger', 'stationery'),
    ('ray-ban', 'accessories'),
    ('ray-ban', 'apparel'),
    ('raymondweil', 'accessories'),
    ('raymondweil', 'apparel'),
    ('raytheonphantom', 'electronics'),
    ('raytheonphantom', 'auto'),
    ('razer', 'electronics'),
    ('razer', 'computers'),
    ('razor', 'electronics'),
    ('razor', 'accessories'),
    ('rcf', 'electronics'),
    ('rcr', 'appliances'),
    ('rcr', 'electronics'),
    ('rdx', 'sport'),
    ('rdx', 'accessories'),
    ('realflame', 'appliances'),
    ('realflame', 'furniture'),
    ('realme', 'electronics'),
    ('realme', 'computers'),
    ('rebellion', 'apparel'),
    ('rebellion', 'accessories'),
    ('rebus', 'stationery'),
    ('recaro', 'auto'),
    ('recaro', 'furniture'),
    ('recci', 'appliances'),
    ('receptybabuskiagafi', 'furniture'),
    ('receptybabuskiagafi', 'appliances'),
    ('redblu', 'apparel'),
    ('redblu', 'accessories');
```
[2024-12-05T22:21:35.188+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:21:35.188+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:21:08.552396+00:00, execution_date=20241205T222108, start_date=20241205T222113, end_date=20241205T222135
[2024-12-05T22:21:35.239+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:21:35.255+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:21:35.258+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
