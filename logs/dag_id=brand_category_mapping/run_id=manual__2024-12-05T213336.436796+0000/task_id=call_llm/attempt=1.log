[2024-12-05T21:33:40.798+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:33:40.810+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:33:36.436796+00:00 [queued]>
[2024-12-05T21:33:40.816+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:33:36.436796+00:00 [queued]>
[2024-12-05T21:33:40.817+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:33:40.828+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:33:36.436796+00:00
[2024-12-05T21:33:40.834+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4573) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:33:40.835+0000] {standard_task_runner.py:72} INFO - Started process 4574 to run task
[2024-12-05T21:33:40.835+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:33:36.436796+00:00', '--job-id', '1002', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp_67w5mp7']
[2024-12-05T21:33:40.837+0000] {standard_task_runner.py:105} INFO - Job 1002: Subtask call_llm
[2024-12-05T21:33:40.870+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:33:36.436796+00:00 [running]> on host c7780884450d
[2024-12-05T21:33:40.930+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:33:36.436796+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:33:36.436796+00:00'
[2024-12-05T21:33:40.931+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:33:40.948+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['geil', 'geitaran', 'gejzer', 'gelflex', 'gelsomino', 'gembird', 'gemei', 'genau', 'genebre', 'generalelectric', 'genesis', 'geneticlab', 'geneticlabnutrition', 'genius', 'genki', 'genlog', 'genny', 'gentrycup', 'gerat', 'gerber', 'gerbor', 'gerdamix', 'gerkulesgames', 'geroivmaskah', 'gesso'], 'next_index': 1925}
[2024-12-05T21:33:40.948+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:33:41.444+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:33:57.696+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the brands provided and the categories available, here’s the mapping of each brand to their respective categories:

1. **geil** - electronics
2. **geitaran** - electronics
3. **gejzer** - appliances
4. **gelflex** - sport
5. **gelsomino** - furniture
6. **gembird** - electronics
7. **gemei** - electronics
8. **genau** - appliances
9. **genebre** - construction
10. **generalelectric** - appliances, electronics
11. **genesis** - electronics
12. **geneticlab** - medicine
13. **geneticlabnutrition** - medicine
14. **genius** - electronics
15. **genki** - medicine
16. **genlog** - electronics
17. **genny** - apparel
18. **gentrycup** - accessories
19. **gerat** - appliances
20. **gerber** - kids, medicine
21. **gerbor** - furniture
22. **gerdamix** - appliances
23. **gerkulesgames** - sport
24. **geroivmaskah** - apparel
25. **gesso** - stationery

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('geil', 'electronics'),
    ('geitaran', 'electronics'),
    ('gejzer', 'appliances'),
    ('gelflex', 'sport'),
    ('gelsomino', 'furniture'),
    ('gembird', 'electronics'),
    ('gemei', 'electronics'),
    ('genau', 'appliances'),
    ('genebre', 'construction'),
    ('generalelectric', 'appliances'),
    ('generalelectric', 'electronics'),
    ('genesis', 'electronics'),
    ('geneticlab', 'medicine'),
    ('geneticlabnutrition', 'medicine'),
    ('genius', 'electronics'),
    ('genki', 'medicine'),
    ('genlog', 'electronics'),
    ('genny', 'apparel'),
    ('gentrycup', 'accessories'),
    ('gerat', 'appliances'),
    ('gerber', 'kids'),
    ('gerber', 'medicine'),
    ('gerbor', 'furniture'),
    ('gerdamix', 'appliances'),
    ('gerkulesgames', 'sport'),
    ('geroivmaskah', 'apparel'),
    ('gesso', 'stationery');
```
[2024-12-05T21:33:57.697+0000] {python.py:240} INFO - Done. Returned value was: Based on the brands provided and the categories available, here’s the mapping of each brand to their respective categories:

1. **geil** - electronics
2. **geitaran** - electronics
3. **gejzer** - appliances
4. **gelflex** - sport
5. **gelsomino** - furniture
6. **gembird** - electronics
7. **gemei** - electronics
8. **genau** - appliances
9. **genebre** - construction
10. **generalelectric** - appliances, electronics
11. **genesis** - electronics
12. **geneticlab** - medicine
13. **geneticlabnutrition** - medicine
14. **genius** - electronics
15. **genki** - medicine
16. **genlog** - electronics
17. **genny** - apparel
18. **gentrycup** - accessories
19. **gerat** - appliances
20. **gerber** - kids, medicine
21. **gerbor** - furniture
22. **gerdamix** - appliances
23. **gerkulesgames** - sport
24. **geroivmaskah** - apparel
25. **gesso** - stationery

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('geil', 'electronics'),
    ('geitaran', 'electronics'),
    ('gejzer', 'appliances'),
    ('gelflex', 'sport'),
    ('gelsomino', 'furniture'),
    ('gembird', 'electronics'),
    ('gemei', 'electronics'),
    ('genau', 'appliances'),
    ('genebre', 'construction'),
    ('generalelectric', 'appliances'),
    ('generalelectric', 'electronics'),
    ('genesis', 'electronics'),
    ('geneticlab', 'medicine'),
    ('geneticlabnutrition', 'medicine'),
    ('genius', 'electronics'),
    ('genki', 'medicine'),
    ('genlog', 'electronics'),
    ('genny', 'apparel'),
    ('gentrycup', 'accessories'),
    ('gerat', 'appliances'),
    ('gerber', 'kids'),
    ('gerber', 'medicine'),
    ('gerbor', 'furniture'),
    ('gerdamix', 'appliances'),
    ('gerkulesgames', 'sport'),
    ('geroivmaskah', 'apparel'),
    ('gesso', 'stationery');
```
[2024-12-05T21:33:57.719+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:33:57.719+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:33:36.436796+00:00, execution_date=20241205T213336, start_date=20241205T213340, end_date=20241205T213357
[2024-12-05T21:33:57.739+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:33:57.757+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:33:57.761+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
