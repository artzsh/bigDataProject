[2024-12-05T20:54:48.674+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:54:48.686+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:54:46.070938+00:00 [queued]>
[2024-12-05T20:54:48.692+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:54:46.070938+00:00 [queued]>
[2024-12-05T20:54:48.693+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:54:48.704+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:54:46.070938+00:00
[2024-12-05T20:54:48.711+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2469) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:54:48.712+0000] {standard_task_runner.py:72} INFO - Started process 2470 to run task
[2024-12-05T20:54:48.712+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:54:46.070938+00:00', '--job-id', '546', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp_f_81cc7']
[2024-12-05T20:54:48.714+0000] {standard_task_runner.py:105} INFO - Job 546: Subtask call_llm
[2024-12-05T20:54:48.758+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:54:46.070938+00:00 [running]> on host c7780884450d
[2024-12-05T20:54:48.817+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:54:46.070938+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:54:46.070938+00:00'
[2024-12-05T20:54:48.818+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:54:48.834+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['aardwolf', 'abaybooks', 'abc', 'abhika', 'abk', 'abris', 'absolutechampion', 'absolutenewyork', 'abtoys', 'abugarcia', 'academie', 'acana', 'a-case', 'acase', 'accesstyle', 'accumaster', 'acd', 'acebeam', 'acer', 'aces', 'achilles', 'acm', 'acme', 'acnecontrolprofessional', 'acoola'], 'next_index': 25}
[2024-12-05T20:54:48.835+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:54:49.263+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:55:05.697+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **aardwolf** - accessories
2. **abaybooks** - stationery
3. **abc** - stationery
4. **abhika** - apparel
5. **abk** - apparel
6. **abris** - construction
7. **absolutechampion** - sport
8. **absolutenewyork** - cosmetics (not in the provided categories, but closest is apparel)
9. **abtoys** - kids
10. **abugarcia** - sport
11. **academie** - medicine
12. **acana** - pet food (not in the provided categories, but closest is medicine)
13. **a-case** - accessories
14. **acase** - accessories
15. **accesstyle** - accessories
16. **accumaster** - appliances
17. **acd** - electronics
18. **acebeam** - electronics
19. **acer** - computers
20. **aces** - electronics
21. **achilles** - footwear (not in the provided categories, but closest is apparel)
22. **acm** - electronics
23. **acme** - appliances
24. **acnecontrolprofessional** - medicine
25. **acoola** - apparel

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('aardwolf', 'accessories'),
    ('abaybooks', 'stationery'),
    ('abc', 'stationery'),
    ('abhika', 'apparel'),
    ('abk', 'apparel'),
    ('abris', 'construction'),
    ('absolutechampion', 'sport'),
    ('absolutenewyork', 'apparel'),
    ('abtoys', 'kids'),
    ('abugarcia', 'sport'),
    ('academie', 'medicine'),
    ('acana', 'medicine'),
    ('a-case', 'accessories'),
    ('acase', 'accessories'),
    ('accesstyle', 'accessories'),
    ('accumaster', 'appliances'),
    ('acd', 'electronics'),
    ('acebeam', 'electronics'),
    ('acer', 'computers'),
    ('aces', 'electronics'),
    ('achilles', 'apparel'),
    ('acm', 'electronics'),
    ('acme', 'appliances'),
    ('acnecontrolprofessional', 'medicine'),
    ('acoola', 'apparel');
```
[2024-12-05T20:55:05.698+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **aardwolf** - accessories
2. **abaybooks** - stationery
3. **abc** - stationery
4. **abhika** - apparel
5. **abk** - apparel
6. **abris** - construction
7. **absolutechampion** - sport
8. **absolutenewyork** - cosmetics (not in the provided categories, but closest is apparel)
9. **abtoys** - kids
10. **abugarcia** - sport
11. **academie** - medicine
12. **acana** - pet food (not in the provided categories, but closest is medicine)
13. **a-case** - accessories
14. **acase** - accessories
15. **accesstyle** - accessories
16. **accumaster** - appliances
17. **acd** - electronics
18. **acebeam** - electronics
19. **acer** - computers
20. **aces** - electronics
21. **achilles** - footwear (not in the provided categories, but closest is apparel)
22. **acm** - electronics
23. **acme** - appliances
24. **acnecontrolprofessional** - medicine
25. **acoola** - apparel

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('aardwolf', 'accessories'),
    ('abaybooks', 'stationery'),
    ('abc', 'stationery'),
    ('abhika', 'apparel'),
    ('abk', 'apparel'),
    ('abris', 'construction'),
    ('absolutechampion', 'sport'),
    ('absolutenewyork', 'apparel'),
    ('abtoys', 'kids'),
    ('abugarcia', 'sport'),
    ('academie', 'medicine'),
    ('acana', 'medicine'),
    ('a-case', 'accessories'),
    ('acase', 'accessories'),
    ('accesstyle', 'accessories'),
    ('accumaster', 'appliances'),
    ('acd', 'electronics'),
    ('acebeam', 'electronics'),
    ('acer', 'computers'),
    ('aces', 'electronics'),
    ('achilles', 'apparel'),
    ('acm', 'electronics'),
    ('acme', 'appliances'),
    ('acnecontrolprofessional', 'medicine'),
    ('acoola', 'apparel');
```
[2024-12-05T20:55:05.720+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:55:05.721+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:54:46.070938+00:00, execution_date=20241205T205446, start_date=20241205T205448, end_date=20241205T205505
[2024-12-05T20:55:05.741+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:55:05.760+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:55:05.763+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
