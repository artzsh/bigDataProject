[2024-12-05T21:24:15.949+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:24:15.963+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:24:11.005190+00:00 [queued]>
[2024-12-05T21:24:15.971+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:24:11.005190+00:00 [queued]>
[2024-12-05T21:24:15.972+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:24:15.986+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:24:11.005190+00:00
[2024-12-05T21:24:15.991+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4076) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:24:15.993+0000] {standard_task_runner.py:72} INFO - Started process 4077 to run task
[2024-12-05T21:24:15.993+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:24:11.005190+00:00', '--job-id', '894', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp4jv77k2t']
[2024-12-05T21:24:15.995+0000] {standard_task_runner.py:105} INFO - Job 894: Subtask call_llm
[2024-12-05T21:24:16.034+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:24:11.005190+00:00 [running]> on host c7780884450d
[2024-12-05T21:24:16.110+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:24:11.005190+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:24:11.005190+00:00'
[2024-12-05T21:24:16.111+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:24:16.130+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['ecobalance', 'ecocool', 'ecocraft', 'ecoiffier', 'ecolab', 'ecolaboratorie', 'ecolaboratory', 'ecolatier', 'ecolight', 'ecologystone', 'econair', 'ecosoft', 'ecoterm', 'ecotex', 'ecs', 'edcon', 'edelform', 'edelman', 'edelvejs', 'edem', 'eden', 'edge', 'edifier', 'edon', 'edox'], 'next_index': 1475}
[2024-12-05T21:24:16.130+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:24:16.583+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:24:32.703+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the brands mapped to their respective categories based on the search results:

1. **ecobalance** - appliances
2. **ecocool** - appliances, electronics
3. **ecocraft** - construction, country_yard
4. **ecoiffier** - kids, toys
5. **ecolab** - medicine, cleaning products
6. **ecolaboratorie** - medicine, cleaning products
7. **ecolaboratory** - medicine, cleaning products
8. **ecolatier** - accessories
9. **ecolight** - electronics, appliances
10. **ecologystone** - construction, country_yard
11. **econair** - appliances, electronics
12. **ecosoft** - computers, electronics
13. **ecoterm** - appliances
14. **ecotex** - apparel, textiles
15. **ecs** - electronics
16. **edcon** - apparel
17. **edelform** - appliances
18. **edelman** - accessories
19. **edelvejs** - apparel
20. **edem** - medicine
21. **eden** - furniture, country_yard
22. **edge** - electronics
23. **edifier** - electronics
24. **edon** - appliances
25. **edox** - accessories

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ecobalance', 'appliances'),
    ('ecocool', 'appliances'),
    ('ecocool', 'electronics'),
    ('ecocraft', 'construction'),
    ('ecocraft', 'country_yard'),
    ('ecoiffier', 'kids'),
    ('ecoiffier', 'toys'),
    ('ecolab', 'medicine'),
    ('ecolab', 'cleaning products'),
    ('ecolaboratorie', 'medicine'),
    ('ecolaboratorie', 'cleaning products'),
    ('ecolaboratory', 'medicine'),
    ('ecolaboratory', 'cleaning products'),
    ('ecolatier', 'accessories'),
    ('ecolight', 'electronics'),
    ('ecolight', 'appliances'),
    ('ecologystone', 'construction'),
    ('ecologystone', 'country_yard'),
    ('econair', 'appliances'),
    ('econair', 'electronics'),
    ('ecosoft', 'computers'),
    ('ecosoft', 'electronics'),
    ('ecoterm', 'appliances'),
    ('ecotex', 'apparel'),
    ('ecotex', 'textiles'),
    ('ecs', 'electronics'),
    ('edcon', 'apparel'),
    ('edelform', 'appliances'),
    ('edelman', 'accessories'),
    ('edelvejs', 'apparel'),
    ('edem', 'medicine'),
    ('eden', 'furniture'),
    ('eden', 'country_yard'),
    ('edge', 'electronics'),
    ('edifier', 'electronics'),
    ('edon', 'appliances'),
    ('edox', 'accessories');
```
[2024-12-05T21:24:32.704+0000] {python.py:240} INFO - Done. Returned value was: Here are the brands mapped to their respective categories based on the search results:

1. **ecobalance** - appliances
2. **ecocool** - appliances, electronics
3. **ecocraft** - construction, country_yard
4. **ecoiffier** - kids, toys
5. **ecolab** - medicine, cleaning products
6. **ecolaboratorie** - medicine, cleaning products
7. **ecolaboratory** - medicine, cleaning products
8. **ecolatier** - accessories
9. **ecolight** - electronics, appliances
10. **ecologystone** - construction, country_yard
11. **econair** - appliances, electronics
12. **ecosoft** - computers, electronics
13. **ecoterm** - appliances
14. **ecotex** - apparel, textiles
15. **ecs** - electronics
16. **edcon** - apparel
17. **edelform** - appliances
18. **edelman** - accessories
19. **edelvejs** - apparel
20. **edem** - medicine
21. **eden** - furniture, country_yard
22. **edge** - electronics
23. **edifier** - electronics
24. **edon** - appliances
25. **edox** - accessories

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ecobalance', 'appliances'),
    ('ecocool', 'appliances'),
    ('ecocool', 'electronics'),
    ('ecocraft', 'construction'),
    ('ecocraft', 'country_yard'),
    ('ecoiffier', 'kids'),
    ('ecoiffier', 'toys'),
    ('ecolab', 'medicine'),
    ('ecolab', 'cleaning products'),
    ('ecolaboratorie', 'medicine'),
    ('ecolaboratorie', 'cleaning products'),
    ('ecolaboratory', 'medicine'),
    ('ecolaboratory', 'cleaning products'),
    ('ecolatier', 'accessories'),
    ('ecolight', 'electronics'),
    ('ecolight', 'appliances'),
    ('ecologystone', 'construction'),
    ('ecologystone', 'country_yard'),
    ('econair', 'appliances'),
    ('econair', 'electronics'),
    ('ecosoft', 'computers'),
    ('ecosoft', 'electronics'),
    ('ecoterm', 'appliances'),
    ('ecotex', 'apparel'),
    ('ecotex', 'textiles'),
    ('ecs', 'electronics'),
    ('edcon', 'apparel'),
    ('edelform', 'appliances'),
    ('edelman', 'accessories'),
    ('edelvejs', 'apparel'),
    ('edem', 'medicine'),
    ('eden', 'furniture'),
    ('eden', 'country_yard'),
    ('edge', 'electronics'),
    ('edifier', 'electronics'),
    ('edon', 'appliances'),
    ('edox', 'accessories');
```
[2024-12-05T21:24:32.726+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:24:32.726+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:24:11.005190+00:00, execution_date=20241205T212411, start_date=20241205T212415, end_date=20241205T212432
[2024-12-05T21:24:32.781+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:24:32.798+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:24:32.801+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
