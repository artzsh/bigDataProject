[2024-12-05T22:17:47.196+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:17:47.209+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:17:42.319018+00:00 [queued]>
[2024-12-05T22:17:47.216+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:17:42.319018+00:00 [queued]>
[2024-12-05T22:17:47.216+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:17:47.229+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:17:42.319018+00:00
[2024-12-05T22:17:47.235+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=6897) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:17:47.237+0000] {standard_task_runner.py:72} INFO - Started process 6898 to run task
[2024-12-05T22:17:47.237+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:17:42.319018+00:00', '--job-id', '1500', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpd2b2a7_t']
[2024-12-05T22:17:47.239+0000] {standard_task_runner.py:105} INFO - Job 1500: Subtask call_llm
[2024-12-05T22:17:47.278+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:17:42.319018+00:00 [running]> on host c7780884450d
[2024-12-05T22:17:47.346+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:17:42.319018+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:17:42.319018+00:00'
[2024-12-05T22:17:47.347+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:17:47.366+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['playgo', 'playgro', 'playhut', 'playlab', 'playland', 'playmates', 'playme', 'playmobil', 'playskool', 'plextor', 'plitex', 'plusplus', 'pnb', 'pny', 'pocketbook', 'poholy', 'polar', 'polaris', 'polarnyjkrug', 'polaroid', 'polarring', 'polese', 'polesie', 'poli', 'police'], 'next_index': 4000}
[2024-12-05T22:17:47.366+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:17:47.792+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:18:03.732+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results:

1. **playgo** - kids
2. **playgro** - kids
3. **playhut** - kids
4. **playlab** - kids
5. **playland** - kids
6. **playmates** - kids
7. **playme** - kids
8. **playmobil** - kids
9. **playskool** - kids
10. **plextor** - computers, electronics
11. **plitex** - stationery
12. **plusplus** - stationery
13. **pnb** - stationery
14. **pny** - computers, electronics
15. **pocketbook** - computers, electronics
16. **poholy** - accessories
17. **polar** - appliances, electronics
18. **polaris** - appliances, electronics
19. **polarnyjkrug** - country_yard, appliances
20. **polaroid** - electronics
21. **polarring** - accessories
22. **polese** - kids
23. **polesie** - kids
24. **poli** - kids
25. **police** - kids, accessories

Now, here’s the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('playgo', 'kids'),
    ('playgro', 'kids'),
    ('playhut', 'kids'),
    ('playlab', 'kids'),
    ('playland', 'kids'),
    ('playmates', 'kids'),
    ('playme', 'kids'),
    ('playmobil', 'kids'),
    ('playskool', 'kids'),
    ('plextor', 'computers'),
    ('plextor', 'electronics'),
    ('plitex', 'stationery'),
    ('plusplus', 'stationery'),
    ('pnb', 'stationery'),
    ('pny', 'computers'),
    ('pny', 'electronics'),
    ('pocketbook', 'computers'),
    ('pocketbook', 'electronics'),
    ('poholy', 'accessories'),
    ('polar', 'appliances'),
    ('polar', 'electronics'),
    ('polaris', 'appliances'),
    ('polaris', 'electronics'),
    ('polarnyjkrug', 'country_yard'),
    ('polarnyjkrug', 'appliances'),
    ('polaroid', 'electronics'),
    ('polarring', 'accessories'),
    ('polese', 'kids'),
    ('polesie', 'kids'),
    ('poli', 'kids'),
    ('police', 'kids'),
    ('police', 'accessories');
```
[2024-12-05T22:18:03.733+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results:

1. **playgo** - kids
2. **playgro** - kids
3. **playhut** - kids
4. **playlab** - kids
5. **playland** - kids
6. **playmates** - kids
7. **playme** - kids
8. **playmobil** - kids
9. **playskool** - kids
10. **plextor** - computers, electronics
11. **plitex** - stationery
12. **plusplus** - stationery
13. **pnb** - stationery
14. **pny** - computers, electronics
15. **pocketbook** - computers, electronics
16. **poholy** - accessories
17. **polar** - appliances, electronics
18. **polaris** - appliances, electronics
19. **polarnyjkrug** - country_yard, appliances
20. **polaroid** - electronics
21. **polarring** - accessories
22. **polese** - kids
23. **polesie** - kids
24. **poli** - kids
25. **police** - kids, accessories

Now, here’s the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('playgo', 'kids'),
    ('playgro', 'kids'),
    ('playhut', 'kids'),
    ('playlab', 'kids'),
    ('playland', 'kids'),
    ('playmates', 'kids'),
    ('playme', 'kids'),
    ('playmobil', 'kids'),
    ('playskool', 'kids'),
    ('plextor', 'computers'),
    ('plextor', 'electronics'),
    ('plitex', 'stationery'),
    ('plusplus', 'stationery'),
    ('pnb', 'stationery'),
    ('pny', 'computers'),
    ('pny', 'electronics'),
    ('pocketbook', 'computers'),
    ('pocketbook', 'electronics'),
    ('poholy', 'accessories'),
    ('polar', 'appliances'),
    ('polar', 'electronics'),
    ('polaris', 'appliances'),
    ('polaris', 'electronics'),
    ('polarnyjkrug', 'country_yard'),
    ('polarnyjkrug', 'appliances'),
    ('polaroid', 'electronics'),
    ('polarring', 'accessories'),
    ('polese', 'kids'),
    ('polesie', 'kids'),
    ('poli', 'kids'),
    ('police', 'kids'),
    ('police', 'accessories');
```
[2024-12-05T22:18:03.754+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:18:03.754+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:17:42.319018+00:00, execution_date=20241205T221742, start_date=20241205T221747, end_date=20241205T221803
[2024-12-05T22:18:03.788+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:18:03.804+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:18:03.807+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
