[2024-12-05T20:59:11.397+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:59:11.412+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:59:06.500241+00:00 [queued]>
[2024-12-05T20:59:11.420+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:59:06.500241+00:00 [queued]>
[2024-12-05T20:59:11.421+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:59:11.435+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:59:06.500241+00:00
[2024-12-05T20:59:11.443+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2714) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:59:11.446+0000] {standard_task_runner.py:72} INFO - Started process 2715 to run task
[2024-12-05T20:59:11.445+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:59:06.500241+00:00', '--job-id', '600', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpdfvo_s9s']
[2024-12-05T20:59:11.447+0000] {standard_task_runner.py:105} INFO - Job 600: Subtask call_llm
[2024-12-05T20:59:11.496+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:59:06.500241+00:00 [running]> on host c7780884450d
[2024-12-05T20:59:11.579+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:59:06.500241+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:59:06.500241+00:00'
[2024-12-05T20:59:11.580+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:59:11.598+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['ampm', 'amra', 'ams', 'amsterdam', 'amtel', 'amur', 'anahickmann', 'anatomico', 'and', 'andeks', 'andrea', 'andreafontebasso', 'andrewfuchs', 'andromeda', 'anelli', 'anemone', 'anesi', 'anex', 'angel', 'angelteam', 'anhuitech', 'annaanna', 'annaite', 'annalafarg', 'annalafargemily'], 'next_index': 250}
[2024-12-05T20:59:11.598+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:59:12.020+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:59:30.867+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **ampm** - accessories
2. **amra** - apparel
3. **ams** - electronics
4. **amsterdam** - apparel
5. **amtel** - auto
6. **amur** - apparel
7. **anahickmann** - apparel, accessories
8. **anatomico** - furniture, medicine
9. **and** - apparel
10. **andeks** - apparel
11. **andrea** - apparel
12. **andreafontebasso** - apparel
13. **andrewfuchs** - apparel
14. **andromeda** - electronics
15. **anelli** - accessories
16. **anemone** - apparel
17. **anesi** - medicine, cosmetics
18. **anex** - electronics
19. **angel** - apparel
20. **angelteam** - apparel
21. **anhuitech** - electronics, computers
22. **annaanna** - apparel
23. **annaite** - apparel
24. **annalafarg** - apparel
25. **annalafargemily** - apparel

Now, here’s the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ampm', 'accessories'),
    ('amra', 'apparel'),
    ('ams', 'electronics'),
    ('amsterdam', 'apparel'),
    ('amtel', 'auto'),
    ('amur', 'apparel'),
    ('anahickmann', 'apparel'),
    ('anahickmann', 'accessories'),
    ('anatomico', 'furniture'),
    ('anatomico', 'medicine'),
    ('and', 'apparel'),
    ('andeks', 'apparel'),
    ('andrea', 'apparel'),
    ('andreafontebasso', 'apparel'),
    ('andrewfuchs', 'apparel'),
    ('andromeda', 'electronics'),
    ('anelli', 'accessories'),
    ('anemone', 'apparel'),
    ('anesi', 'medicine'),
    ('anesi', 'cosmetics'),
    ('anex', 'electronics'),
    ('angel', 'apparel'),
    ('angelteam', 'apparel'),
    ('anhuitech', 'electronics'),
    ('anhuitech', 'computers'),
    ('annaanna', 'apparel'),
    ('annaite', 'apparel'),
    ('annalafarg', 'apparel'),
    ('annalafargemily', 'apparel');
```
[2024-12-05T20:59:30.867+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **ampm** - accessories
2. **amra** - apparel
3. **ams** - electronics
4. **amsterdam** - apparel
5. **amtel** - auto
6. **amur** - apparel
7. **anahickmann** - apparel, accessories
8. **anatomico** - furniture, medicine
9. **and** - apparel
10. **andeks** - apparel
11. **andrea** - apparel
12. **andreafontebasso** - apparel
13. **andrewfuchs** - apparel
14. **andromeda** - electronics
15. **anelli** - accessories
16. **anemone** - apparel
17. **anesi** - medicine, cosmetics
18. **anex** - electronics
19. **angel** - apparel
20. **angelteam** - apparel
21. **anhuitech** - electronics, computers
22. **annaanna** - apparel
23. **annaite** - apparel
24. **annalafarg** - apparel
25. **annalafargemily** - apparel

Now, here’s the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ampm', 'accessories'),
    ('amra', 'apparel'),
    ('ams', 'electronics'),
    ('amsterdam', 'apparel'),
    ('amtel', 'auto'),
    ('amur', 'apparel'),
    ('anahickmann', 'apparel'),
    ('anahickmann', 'accessories'),
    ('anatomico', 'furniture'),
    ('anatomico', 'medicine'),
    ('and', 'apparel'),
    ('andeks', 'apparel'),
    ('andrea', 'apparel'),
    ('andreafontebasso', 'apparel'),
    ('andrewfuchs', 'apparel'),
    ('andromeda', 'electronics'),
    ('anelli', 'accessories'),
    ('anemone', 'apparel'),
    ('anesi', 'medicine'),
    ('anesi', 'cosmetics'),
    ('anex', 'electronics'),
    ('angel', 'apparel'),
    ('angelteam', 'apparel'),
    ('anhuitech', 'electronics'),
    ('anhuitech', 'computers'),
    ('annaanna', 'apparel'),
    ('annaite', 'apparel'),
    ('annalafarg', 'apparel'),
    ('annalafargemily', 'apparel');
```
[2024-12-05T20:59:30.889+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:59:30.889+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:59:06.500241+00:00, execution_date=20241205T205906, start_date=20241205T205911, end_date=20241205T205930
[2024-12-05T20:59:30.935+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:59:30.957+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:59:30.960+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
