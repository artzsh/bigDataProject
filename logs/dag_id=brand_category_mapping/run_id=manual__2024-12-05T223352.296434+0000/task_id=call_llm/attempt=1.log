[2024-12-05T22:33:58.204+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:33:58.216+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:33:52.296434+00:00 [queued]>
[2024-12-05T22:33:58.222+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:33:52.296434+00:00 [queued]>
[2024-12-05T22:33:58.223+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:33:58.236+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:33:52.296434+00:00
[2024-12-05T22:33:58.242+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7757) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:33:58.244+0000] {standard_task_runner.py:72} INFO - Started process 7758 to run task
[2024-12-05T22:33:58.244+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:33:52.296434+00:00', '--job-id', '1686', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp5sc54cev']
[2024-12-05T22:33:58.246+0000] {standard_task_runner.py:105} INFO - Job 1686: Subtask call_llm
[2024-12-05T22:33:58.288+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:33:52.296434+00:00 [running]> on host c7780884450d
[2024-12-05T22:33:58.357+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:33:52.296434+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:33:52.296434+00:00'
[2024-12-05T22:33:58.358+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:33:58.375+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['srtk', 'ssm', 'stabila', 'stabilo', 'staedtler', 'stagg', 'stahlberg', 'stalemal', 'stalker', 'standardwinch', 'stanley', 'stanton', 'star', 'starfestival', 'stark', 'starline', 'starman', 'starmann', 'starmix', 'starmom', 'starter', 'startline', 'startlineplay', 'startrading', 'startradingab'], 'next_index': 4775}
[2024-12-05T22:33:58.376+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:33:58.796+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:34:29.435+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search queries:

1. **srtk** - stationery
2. **ssm** - stationery
3. **stabila** - construction
4. **stabilo** - stationery
5. **staedtler** - stationery
6. **stagg** - electronics, accessories
7. **stahlberg** - appliances
8. **stalemal** - appliances
9. **stalker** - electronics, auto
10. **standardwinch** - construction
11. **stanley** - tools, construction
12. **stanton** - electronics
13. **star** - electronics
14. **starfestival** - apparel
15. **stark** - apparel
16. **starline** - electronics
17. **starman** - apparel
18. **starmann** - apparel
19. **starmix** - appliances
20. **starmom** - kids
21. **starter** - apparel
22. **startline** - electronics
23. **startlineplay** - kids
24. **startrading** - electronics
25. **startradingab** - electronics

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('srtk', 'stationery'),
    ('ssm', 'stationery'),
    ('stabila', 'construction'),
    ('stabilo', 'stationery'),
    ('staedtler', 'stationery'),
    ('stagg', 'electronics'),
    ('stagg', 'accessories'),
    ('stahlberg', 'appliances'),
    ('stalemal', 'appliances'),
    ('stalker', 'electronics'),
    ('stalker', 'auto'),
    ('standardwinch', 'construction'),
    ('stanley', 'construction'),
    ('stanton', 'electronics'),
    ('star', 'electronics'),
    ('starfestival', 'apparel'),
    ('stark', 'apparel'),
    ('starline', 'electronics'),
    ('starman', 'apparel'),
    ('starmann', 'apparel'),
    ('starmix', 'appliances'),
    ('starmom', 'kids'),
    ('starter', 'apparel'),
    ('startline', 'electronics'),
    ('startlineplay', 'kids'),
    ('startrading', 'electronics'),
    ('startradingab', 'electronics');
```
[2024-12-05T22:34:29.436+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search queries:

1. **srtk** - stationery
2. **ssm** - stationery
3. **stabila** - construction
4. **stabilo** - stationery
5. **staedtler** - stationery
6. **stagg** - electronics, accessories
7. **stahlberg** - appliances
8. **stalemal** - appliances
9. **stalker** - electronics, auto
10. **standardwinch** - construction
11. **stanley** - tools, construction
12. **stanton** - electronics
13. **star** - electronics
14. **starfestival** - apparel
15. **stark** - apparel
16. **starline** - electronics
17. **starman** - apparel
18. **starmann** - apparel
19. **starmix** - appliances
20. **starmom** - kids
21. **starter** - apparel
22. **startline** - electronics
23. **startlineplay** - kids
24. **startrading** - electronics
25. **startradingab** - electronics

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('srtk', 'stationery'),
    ('ssm', 'stationery'),
    ('stabila', 'construction'),
    ('stabilo', 'stationery'),
    ('staedtler', 'stationery'),
    ('stagg', 'electronics'),
    ('stagg', 'accessories'),
    ('stahlberg', 'appliances'),
    ('stalemal', 'appliances'),
    ('stalker', 'electronics'),
    ('stalker', 'auto'),
    ('standardwinch', 'construction'),
    ('stanley', 'construction'),
    ('stanton', 'electronics'),
    ('star', 'electronics'),
    ('starfestival', 'apparel'),
    ('stark', 'apparel'),
    ('starline', 'electronics'),
    ('starman', 'apparel'),
    ('starmann', 'apparel'),
    ('starmix', 'appliances'),
    ('starmom', 'kids'),
    ('starter', 'apparel'),
    ('startline', 'electronics'),
    ('startlineplay', 'kids'),
    ('startrading', 'electronics'),
    ('startradingab', 'electronics');
```
[2024-12-05T22:34:29.454+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:34:29.455+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:33:52.296434+00:00, execution_date=20241205T223352, start_date=20241205T223358, end_date=20241205T223429
[2024-12-05T22:34:29.474+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:34:29.491+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:34:29.494+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
