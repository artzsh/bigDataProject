[2024-12-05T21:51:24.493+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:51:24.505+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:51:19.301942+00:00 [queued]>
[2024-12-05T21:51:24.512+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:51:19.301942+00:00 [queued]>
[2024-12-05T21:51:24.513+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:51:24.525+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:51:19.301942+00:00
[2024-12-05T21:51:24.531+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5497) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:51:24.533+0000] {standard_task_runner.py:72} INFO - Started process 5498 to run task
[2024-12-05T21:51:24.533+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:51:19.301942+00:00', '--job-id', '1200', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpem1gfk7f']
[2024-12-05T21:51:24.535+0000] {standard_task_runner.py:105} INFO - Job 1200: Subtask call_llm
[2024-12-05T21:51:24.567+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:51:19.301942+00:00 [running]> on host c7780884450d
[2024-12-05T21:51:24.630+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:51:19.301942+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:51:19.301942+00:00'
[2024-12-05T21:51:24.631+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:51:24.648+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['kristall-auto', 'krk', 'kroft', 'kromax', 'kron', 'krona', 'kronasteel', 'kronopol', 'kronospan', 'kronostar', 'kronotex', 'kronwerk', 'kroskaa', 'kroskindom', 'krosno', 'krups', 'kskids', 'kubanfarfor', 'kuchendorf', 'kuchenprofi', 'kudu', 'kugoo', 'kuhar', 'kukbuks', 'kukmara'], 'next_index': 2750}
[2024-12-05T21:51:24.648+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:51:25.071+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:51:41.203+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results:

1. **kristall-auto** - auto
2. **krk** - electronics
3. **kroft** - furniture
4. **kromax** - electronics
5. **kron** - electronics
6. **krona** - electronics
7. **kronasteel** - construction
8. **kronopol** - furniture
9. **kronospan** - construction
10. **kronostar** - construction
11. **kronotex** - construction
12. **kronwerk** - construction
13. **kroskaa** - kids
14. **kroskindom** - kids
15. **krosno** - appliances
16. **krups** - appliances
17. **kskids** - kids
18. **kubanfarfor** - furniture
19. **kuchendorf** - furniture
20. **kuchenprofi** - appliances
21. **kudu** - apparel
22. **kugoo** - electronics
23. **kuhar** - appliances
24. **kukbuks** - stationery
25. **kukmara** - appliances

Now, here’s the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kristall-auto', 'auto'),
    ('krk', 'electronics'),
    ('kroft', 'furniture'),
    ('kromax', 'electronics'),
    ('kron', 'electronics'),
    ('krona', 'electronics'),
    ('kronasteel', 'construction'),
    ('kronopol', 'furniture'),
    ('kronospan', 'construction'),
    ('kronostar', 'construction'),
    ('kronotex', 'construction'),
    ('kronwerk', 'construction'),
    ('kroskaa', 'kids'),
    ('kroskindom', 'kids'),
    ('krosno', 'appliances'),
    ('krups', 'appliances'),
    ('kskids', 'kids'),
    ('kubanfarfor', 'furniture'),
    ('kuchendorf', 'furniture'),
    ('kuchenprofi', 'appliances'),
    ('kudu', 'apparel'),
    ('kugoo', 'electronics'),
    ('kuhar', 'appliances'),
    ('kukbuks', 'stationery'),
    ('kukmara', 'appliances');
```
[2024-12-05T21:51:41.204+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results:

1. **kristall-auto** - auto
2. **krk** - electronics
3. **kroft** - furniture
4. **kromax** - electronics
5. **kron** - electronics
6. **krona** - electronics
7. **kronasteel** - construction
8. **kronopol** - furniture
9. **kronospan** - construction
10. **kronostar** - construction
11. **kronotex** - construction
12. **kronwerk** - construction
13. **kroskaa** - kids
14. **kroskindom** - kids
15. **krosno** - appliances
16. **krups** - appliances
17. **kskids** - kids
18. **kubanfarfor** - furniture
19. **kuchendorf** - furniture
20. **kuchenprofi** - appliances
21. **kudu** - apparel
22. **kugoo** - electronics
23. **kuhar** - appliances
24. **kukbuks** - stationery
25. **kukmara** - appliances

Now, here’s the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kristall-auto', 'auto'),
    ('krk', 'electronics'),
    ('kroft', 'furniture'),
    ('kromax', 'electronics'),
    ('kron', 'electronics'),
    ('krona', 'electronics'),
    ('kronasteel', 'construction'),
    ('kronopol', 'furniture'),
    ('kronospan', 'construction'),
    ('kronostar', 'construction'),
    ('kronotex', 'construction'),
    ('kronwerk', 'construction'),
    ('kroskaa', 'kids'),
    ('kroskindom', 'kids'),
    ('krosno', 'appliances'),
    ('krups', 'appliances'),
    ('kskids', 'kids'),
    ('kubanfarfor', 'furniture'),
    ('kuchendorf', 'furniture'),
    ('kuchenprofi', 'appliances'),
    ('kudu', 'apparel'),
    ('kugoo', 'electronics'),
    ('kuhar', 'appliances'),
    ('kukbuks', 'stationery'),
    ('kukmara', 'appliances');
```
[2024-12-05T21:51:41.223+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:51:41.223+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:51:19.301942+00:00, execution_date=20241205T215119, start_date=20241205T215124, end_date=20241205T215141
[2024-12-05T21:51:41.275+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:51:41.291+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:51:41.295+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
