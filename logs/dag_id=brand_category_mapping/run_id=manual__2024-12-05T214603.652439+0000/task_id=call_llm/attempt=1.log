[2024-12-05T21:46:08.513+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:46:08.525+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:46:03.652439+00:00 [queued]>
[2024-12-05T21:46:08.531+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:46:03.652439+00:00 [queued]>
[2024-12-05T21:46:08.532+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:46:08.544+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:46:03.652439+00:00
[2024-12-05T21:46:08.550+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5224) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:46:08.551+0000] {standard_task_runner.py:72} INFO - Started process 5225 to run task
[2024-12-05T21:46:08.552+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:46:03.652439+00:00', '--job-id', '1140', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp3095qfps']
[2024-12-05T21:46:08.554+0000] {standard_task_runner.py:105} INFO - Job 1140: Subtask call_llm
[2024-12-05T21:46:08.590+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:46:03.652439+00:00 [running]> on host c7780884450d
[2024-12-05T21:46:08.654+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:46:03.652439+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:46:03.652439+00:00'
[2024-12-05T21:46:08.655+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:46:08.673+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['joonies', 'joop', 'jordan', 'josephjoseph', 'jotta', 'jovi', 'joyor', 'joyroad', 'joyroom', 'j.plus', 'jrc', 'juki', 'julbo', 'julong', 'jumper', 'junama', 'junglefieldtroop', 'junior', 'junte', 'jura', 'jurid', 'justcavalli', 'juventa', 'jvc', 'kaabo'], 'next_index': 2500}
[2024-12-05T21:46:08.673+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:46:09.104+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:46:26.220+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to the predefined categories based on the search results:

1. **joonies** - kids
2. **joop** - apparel, accessories
3. **jordan** - apparel, sport
4. **josephjoseph** - appliances, kitchen
5. **jotta** - electronics
6. **jovi** - stationery
7. **joyor** - auto, electronics
8. **joyroad** - auto
9. **joyroom** - electronics
10. **j.plus** - electronics
11. **jrc** - electronics
12. **juki** - appliances
13. **julbo** - accessories, sport
14. **julong** - construction
15. **jumper** - electronics
16. **junama** - kids, accessories
17. **junglefieldtroop** - kids, apparel
18. **junior** - kids
19. **junte** - apparel
20. **jura** - appliances
21. **jurid** - auto
22. **justcavalli** - apparel, accessories
23. **juventa** - medicine
24. **jvc** - electronics
25. **kaabo** - auto

Now, here’s the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('joonies', 'kids'),
    ('joop', 'apparel'),
    ('joop', 'accessories'),
    ('jordan', 'apparel'),
    ('jordan', 'sport'),
    ('josephjoseph', 'appliances'),
    ('josephjoseph', 'kitchen'),
    ('jotta', 'electronics'),
    ('jovi', 'stationery'),
    ('joyor', 'auto'),
    ('joyor', 'electronics'),
    ('joyroad', 'auto'),
    ('joyroom', 'electronics'),
    ('j.plus', 'electronics'),
    ('jrc', 'electronics'),
    ('juki', 'appliances'),
    ('julbo', 'accessories'),
    ('julbo', 'sport'),
    ('julong', 'construction'),
    ('jumper', 'electronics'),
    ('junama', 'kids'),
    ('junama', 'accessories'),
    ('junglefieldtroop', 'kids'),
    ('junglefieldtroop', 'apparel'),
    ('junior', 'kids'),
    ('junte', 'apparel'),
    ('jura', 'appliances'),
    ('jurid', 'auto'),
    ('justcavalli', 'apparel'),
    ('justcavalli', 'accessories'),
    ('juventa', 'medicine'),
    ('jvc', 'electronics'),
    ('kaabo', 'auto');
```
[2024-12-05T21:46:26.221+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to the predefined categories based on the search results:

1. **joonies** - kids
2. **joop** - apparel, accessories
3. **jordan** - apparel, sport
4. **josephjoseph** - appliances, kitchen
5. **jotta** - electronics
6. **jovi** - stationery
7. **joyor** - auto, electronics
8. **joyroad** - auto
9. **joyroom** - electronics
10. **j.plus** - electronics
11. **jrc** - electronics
12. **juki** - appliances
13. **julbo** - accessories, sport
14. **julong** - construction
15. **jumper** - electronics
16. **junama** - kids, accessories
17. **junglefieldtroop** - kids, apparel
18. **junior** - kids
19. **junte** - apparel
20. **jura** - appliances
21. **jurid** - auto
22. **justcavalli** - apparel, accessories
23. **juventa** - medicine
24. **jvc** - electronics
25. **kaabo** - auto

Now, here’s the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('joonies', 'kids'),
    ('joop', 'apparel'),
    ('joop', 'accessories'),
    ('jordan', 'apparel'),
    ('jordan', 'sport'),
    ('josephjoseph', 'appliances'),
    ('josephjoseph', 'kitchen'),
    ('jotta', 'electronics'),
    ('jovi', 'stationery'),
    ('joyor', 'auto'),
    ('joyor', 'electronics'),
    ('joyroad', 'auto'),
    ('joyroom', 'electronics'),
    ('j.plus', 'electronics'),
    ('jrc', 'electronics'),
    ('juki', 'appliances'),
    ('julbo', 'accessories'),
    ('julbo', 'sport'),
    ('julong', 'construction'),
    ('jumper', 'electronics'),
    ('junama', 'kids'),
    ('junama', 'accessories'),
    ('junglefieldtroop', 'kids'),
    ('junglefieldtroop', 'apparel'),
    ('junior', 'kids'),
    ('junte', 'apparel'),
    ('jura', 'appliances'),
    ('jurid', 'auto'),
    ('justcavalli', 'apparel'),
    ('justcavalli', 'accessories'),
    ('juventa', 'medicine'),
    ('jvc', 'electronics'),
    ('kaabo', 'auto');
```
[2024-12-05T21:46:26.241+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:46:26.242+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:46:03.652439+00:00, execution_date=20241205T214603, start_date=20241205T214608, end_date=20241205T214626
[2024-12-05T21:46:26.265+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:46:26.282+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:46:26.285+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
