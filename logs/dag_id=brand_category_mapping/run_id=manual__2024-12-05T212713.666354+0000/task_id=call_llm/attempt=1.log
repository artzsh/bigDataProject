[2024-12-05T21:27:18.895+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:27:18.912+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:27:13.666354+00:00 [queued]>
[2024-12-05T21:27:18.921+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:27:13.666354+00:00 [queued]>
[2024-12-05T21:27:18.921+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:27:18.937+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:27:13.666354+00:00
[2024-12-05T21:27:18.945+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4237) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:27:18.946+0000] {standard_task_runner.py:72} INFO - Started process 4238 to run task
[2024-12-05T21:27:18.946+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:27:13.666354+00:00', '--job-id', '930', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpu1u27q6b']
[2024-12-05T21:27:18.949+0000] {standard_task_runner.py:105} INFO - Job 930: Subtask call_llm
[2024-12-05T21:27:18.991+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:27:13.666354+00:00 [running]> on host c7780884450d
[2024-12-05T21:27:19.057+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:27:13.666354+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:27:13.666354+00:00'
[2024-12-05T21:27:19.058+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:27:19.077+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['esi', 'esko', 'esmeralda', 'espiro', 'essager', 'esse', 'essence', 'esspero', 'estap', 'esteelauder', 'estel', 'estelprofessional', 'esthetichouse', 'estomoda', 'estrade', 'esun', 'etalon', 'etaltech', 'eternalrose', 'ethan', 'etor', 'etro', 'etrusca', 'e-twow', 'etymotic'], 'next_index': 1625}
[2024-12-05T21:27:19.078+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:27:19.508+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:27:49.384+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results:

1. **esi** - cosmetics
2. **esko** - electronics, construction
3. **esmeralda** - apparel, accessories
4. **espiro** - kids, accessories
5. **essager** - electronics
6. **esse** - cosmetics
7. **essence** - cosmetics
8. **esspero** - cosmetics
9. **estap** - construction
10. **esteelauder** - cosmetics
11. **estel** - cosmetics
12. **estelprofessional** - cosmetics
13. **esthetichouse** - cosmetics
14. **estomoda** - apparel
15. **estrade** - apparel
16. **esun** - electronics
17. **etalon** - electronics
18. **etaltech** - electronics
19. **eternalrose** - accessories
20. **ethan** - apparel
21. **etor** - electronics
22. **etro** - apparel, accessories
23. **etrusca** - apparel
24. **e-twow** - electronics, auto
25. **etymotic** - electronics

Based on the categories assigned, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('esi', 'medicine'),
    ('esko', 'electronics'),
    ('esko', 'construction'),
    ('esmeralda', 'apparel'),
    ('esmeralda', 'accessories'),
    ('espiro', 'kids'),
    ('espiro', 'accessories'),
    ('essager', 'electronics'),
    ('esse', 'medicine'),
    ('essence', 'medicine'),
    ('esspero', 'medicine'),
    ('estap', 'construction'),
    ('esteelauder', 'medicine'),
    ('estel', 'medicine'),
    ('estelprofessional', 'medicine'),
    ('esthetichouse', 'medicine'),
    ('estomoda', 'apparel'),
    ('estrade', 'apparel'),
    ('esun', 'electronics'),
    ('etalon', 'electronics'),
    ('etaltech', 'electronics'),
    ('eternalrose', 'accessories'),
    ('ethan', 'apparel'),
    ('etor', 'electronics'),
    ('etro', 'apparel'),
    ('etro', 'accessories'),
    ('etrusca', 'apparel'),
    ('e-twow', 'electronics'),
    ('e-twow', 'auto'),
    ('etymotic', 'electronics');
``` 

This statement captures all the brands and their respective categories based on the findings.
[2024-12-05T21:27:49.385+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results:

1. **esi** - cosmetics
2. **esko** - electronics, construction
3. **esmeralda** - apparel, accessories
4. **espiro** - kids, accessories
5. **essager** - electronics
6. **esse** - cosmetics
7. **essence** - cosmetics
8. **esspero** - cosmetics
9. **estap** - construction
10. **esteelauder** - cosmetics
11. **estel** - cosmetics
12. **estelprofessional** - cosmetics
13. **esthetichouse** - cosmetics
14. **estomoda** - apparel
15. **estrade** - apparel
16. **esun** - electronics
17. **etalon** - electronics
18. **etaltech** - electronics
19. **eternalrose** - accessories
20. **ethan** - apparel
21. **etor** - electronics
22. **etro** - apparel, accessories
23. **etrusca** - apparel
24. **e-twow** - electronics, auto
25. **etymotic** - electronics

Based on the categories assigned, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('esi', 'medicine'),
    ('esko', 'electronics'),
    ('esko', 'construction'),
    ('esmeralda', 'apparel'),
    ('esmeralda', 'accessories'),
    ('espiro', 'kids'),
    ('espiro', 'accessories'),
    ('essager', 'electronics'),
    ('esse', 'medicine'),
    ('essence', 'medicine'),
    ('esspero', 'medicine'),
    ('estap', 'construction'),
    ('esteelauder', 'medicine'),
    ('estel', 'medicine'),
    ('estelprofessional', 'medicine'),
    ('esthetichouse', 'medicine'),
    ('estomoda', 'apparel'),
    ('estrade', 'apparel'),
    ('esun', 'electronics'),
    ('etalon', 'electronics'),
    ('etaltech', 'electronics'),
    ('eternalrose', 'accessories'),
    ('ethan', 'apparel'),
    ('etor', 'electronics'),
    ('etro', 'apparel'),
    ('etro', 'accessories'),
    ('etrusca', 'apparel'),
    ('e-twow', 'electronics'),
    ('e-twow', 'auto'),
    ('etymotic', 'electronics');
``` 

This statement captures all the brands and their respective categories based on the findings.
[2024-12-05T21:27:49.403+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:27:49.404+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:27:13.666354+00:00, execution_date=20241205T212713, start_date=20241205T212718, end_date=20241205T212749
[2024-12-05T21:27:49.458+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:27:49.471+0000] {taskinstance.py:3895} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:27:49.503+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
