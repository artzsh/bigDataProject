[2024-12-05T21:16:16.814+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:16:16.826+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:16:11.728250+00:00 [queued]>
[2024-12-05T21:16:16.832+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:16:11.728250+00:00 [queued]>
[2024-12-05T21:16:16.833+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:16:16.845+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:16:11.728250+00:00
[2024-12-05T21:16:16.851+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3635) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:16:16.852+0000] {standard_task_runner.py:72} INFO - Started process 3636 to run task
[2024-12-05T21:16:16.852+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:16:11.728250+00:00', '--job-id', '798', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpdinm4dpx']
[2024-12-05T21:16:16.854+0000] {standard_task_runner.py:105} INFO - Job 798: Subtask call_llm
[2024-12-05T21:16:16.891+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:16:11.728250+00:00 [running]> on host c7780884450d
[2024-12-05T21:16:16.961+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:16:11.728250+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:16:11.728250+00:00'
[2024-12-05T21:16:16.962+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:16:16.980+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['climadiff', 'clinch', 'clinique', 'clippasafe', 'clipstudio', 'clomapharma', 'clou', 'clover', 'cmi', 'cmt', 'cnd', 'coach', 'coballe', 'cobat', 'cober', 'cobi', 'cobra', 'coca-cola', 'coccinelle', 'cocochoco', 'codemasters', 'colab', 'coleman', 'colgate', 'collagen'], 'next_index': 1075}
[2024-12-05T21:16:16.981+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:16:17.413+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:16:33.554+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here's the mapping of the brands to their respective categories based on the search results and the predefined category codes:

1. **climadiff**: appliances
2. **clinch**: accessories, apparel
3. **clinique**: medicine, cosmetics
4. **clippasafe**: kids, accessories
5. **clipstudio**: stationery, computers
6. **clomapharma**: medicine
7. **clou**: furniture, home decor
8. **clover**: stationery, kids
9. **cmi**: appliances, electronics
10. **cmt**: apparel
11. **cnd**: cosmetics, accessories
12. **coach**: accessories, apparel
13. **coballe**: accessories
14. **cobat**: appliances
15. **cober**: electronics
16. **cobi**: toys, kids
17. **cobra**: auto, electronics
18. **coca-cola**: beverages (not in provided categories)
19. **coccinelle**: accessories, apparel
20. **cocochoco**: cosmetics
21. **codemasters**: computers, electronics, games
22. **colab**: stationery, electronics
23. **coleman**: outdoor, sport, appliances
24. **colgate**: medicine, personal care
25. **collagen**: medicine, cosmetics

Now, let's generate the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('climadiff', 'appliances'),
    ('clinch', 'accessories'),
    ('clinch', 'apparel'),
    ('clinique', 'medicine'),
    ('clinique', 'cosmetics'),
    ('clippasafe', 'kids'),
    ('clippasafe', 'accessories'),
    ('clipstudio', 'stationery'),
    ('clipstudio', 'computers'),
    ('clomapharma', 'medicine'),
    ('clou', 'furniture'),
    ('clou', 'home decor'),
    ('clover', 'stationery'),
    ('clover', 'kids'),
    ('cmi', 'appliances'),
    ('cmi', 'electronics'),
    ('cmt', 'apparel'),
    ('cnd', 'cosmetics'),
    ('cnd', 'accessories'),
    ('coach', 'accessories'),
    ('coach', 'apparel'),
    ('coballe', 'accessories'),
    ('cobat', 'appliances'),
    ('cober', 'electronics'),
    ('cobi', 'toys'),
    ('cobi', 'kids'),
    ('cobra', 'auto'),
    ('cobra', 'electronics'),
    ('coca-cola', 'beverages'),
    ('coccinelle', 'accessories'),
    ('coccinelle', 'apparel'),
    ('cocochoco', 'cosmetics'),
    ('codemasters', 'computers'),
    ('codemasters', 'electronics'),
    ('codemasters', 'games'),
    ('colab', 'stationery'),
    ('colab', 'electronics'),
    ('coleman', 'outdoor'),
    ('coleman', 'sport'),
    ('coleman', 'appliances'),
    ('colgate', 'medicine'),
    ('colgate', 'personal care'),
    ('collagen', 'medicine'),
    ('collagen', 'cosmetics');
``` 

This SQL statement accurately reflects the categories assigned to each brand.
[2024-12-05T21:16:33.555+0000] {python.py:240} INFO - Done. Returned value was: Here's the mapping of the brands to their respective categories based on the search results and the predefined category codes:

1. **climadiff**: appliances
2. **clinch**: accessories, apparel
3. **clinique**: medicine, cosmetics
4. **clippasafe**: kids, accessories
5. **clipstudio**: stationery, computers
6. **clomapharma**: medicine
7. **clou**: furniture, home decor
8. **clover**: stationery, kids
9. **cmi**: appliances, electronics
10. **cmt**: apparel
11. **cnd**: cosmetics, accessories
12. **coach**: accessories, apparel
13. **coballe**: accessories
14. **cobat**: appliances
15. **cober**: electronics
16. **cobi**: toys, kids
17. **cobra**: auto, electronics
18. **coca-cola**: beverages (not in provided categories)
19. **coccinelle**: accessories, apparel
20. **cocochoco**: cosmetics
21. **codemasters**: computers, electronics, games
22. **colab**: stationery, electronics
23. **coleman**: outdoor, sport, appliances
24. **colgate**: medicine, personal care
25. **collagen**: medicine, cosmetics

Now, let's generate the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('climadiff', 'appliances'),
    ('clinch', 'accessories'),
    ('clinch', 'apparel'),
    ('clinique', 'medicine'),
    ('clinique', 'cosmetics'),
    ('clippasafe', 'kids'),
    ('clippasafe', 'accessories'),
    ('clipstudio', 'stationery'),
    ('clipstudio', 'computers'),
    ('clomapharma', 'medicine'),
    ('clou', 'furniture'),
    ('clou', 'home decor'),
    ('clover', 'stationery'),
    ('clover', 'kids'),
    ('cmi', 'appliances'),
    ('cmi', 'electronics'),
    ('cmt', 'apparel'),
    ('cnd', 'cosmetics'),
    ('cnd', 'accessories'),
    ('coach', 'accessories'),
    ('coach', 'apparel'),
    ('coballe', 'accessories'),
    ('cobat', 'appliances'),
    ('cober', 'electronics'),
    ('cobi', 'toys'),
    ('cobi', 'kids'),
    ('cobra', 'auto'),
    ('cobra', 'electronics'),
    ('coca-cola', 'beverages'),
    ('coccinelle', 'accessories'),
    ('coccinelle', 'apparel'),
    ('cocochoco', 'cosmetics'),
    ('codemasters', 'computers'),
    ('codemasters', 'electronics'),
    ('codemasters', 'games'),
    ('colab', 'stationery'),
    ('colab', 'electronics'),
    ('coleman', 'outdoor'),
    ('coleman', 'sport'),
    ('coleman', 'appliances'),
    ('colgate', 'medicine'),
    ('colgate', 'personal care'),
    ('collagen', 'medicine'),
    ('collagen', 'cosmetics');
``` 

This SQL statement accurately reflects the categories assigned to each brand.
[2024-12-05T21:16:33.580+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:16:33.580+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:16:11.728250+00:00, execution_date=20241205T211611, start_date=20241205T211616, end_date=20241205T211633
[2024-12-05T21:16:33.599+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:16:33.615+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:16:33.618+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
