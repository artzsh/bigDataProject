[2024-12-05T22:06:58.768+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:06:58.783+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:06:53.560625+00:00 [queued]>
[2024-12-05T22:06:58.791+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:06:53.560625+00:00 [queued]>
[2024-12-05T22:06:58.792+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:06:58.807+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:06:53.560625+00:00
[2024-12-05T22:06:58.813+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=6330) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:06:58.814+0000] {standard_task_runner.py:72} INFO - Started process 6331 to run task
[2024-12-05T22:06:58.815+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:06:53.560625+00:00', '--job-id', '1380', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpkm1kwsy3']
[2024-12-05T22:06:58.816+0000] {standard_task_runner.py:105} INFO - Job 1380: Subtask call_llm
[2024-12-05T22:06:58.854+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:06:53.560625+00:00 [running]> on host c7780884450d
[2024-12-05T22:06:58.921+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:06:53.560625+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:06:53.560625+00:00'
[2024-12-05T22:06:58.922+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:06:58.942+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['must', 'mustang', 'mustela', 'mustella', 'musun', 'mutant', 'mutlu', 'mutsy', 'muza', 'mw-light', 'mydean', 'mykita', 'mykronoz', 'mylittieworld', 'mylittlepony', 'myprotein', 'mystar', 'mystery', 'mz', 'nabaiji', 'nada', 'nadoba', 'nady', 'nagano', 'nakamichi'], 'next_index': 3500}
[2024-12-05T22:06:58.943+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:06:59.355+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:07:15.554+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results and logical deductions:

1. **must** - apparel, accessories
2. **mustang** - auto, apparel
3. **mustela** - medicine, kids
4. **mustella** - medicine, kids
5. **musun** - furniture
6. **mutant** - sport, accessories
7. **mutlu** - appliances, country_yard
8. **mutsy** - kids, accessories
9. **muza** - furniture
10. **mw-light** - electronics
11. **mydean** - furniture
12. **mykita** - accessories
13. **mykronoz** - electronics
14. **mylittieworld** - kids
15. **mylittlepony** - kids, accessories
16. **myprotein** - sport, medicine
17. **mystar** - electronics
18. **mystery** - stationery
19. **mz** - apparel, accessories
20. **nabaiji** - sport, kids
21. **nada** - furniture
22. **nadoba** - appliances
23. **nady** - electronics
24. **nagano** - appliances
25. **nakamichi** - electronics, appliances

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('must', 'apparel'),
    ('must', 'accessories'),
    ('mustang', 'auto'),
    ('mustang', 'apparel'),
    ('mustela', 'medicine'),
    ('mustela', 'kids'),
    ('mustella', 'medicine'),
    ('mustella', 'kids'),
    ('musun', 'furniture'),
    ('mutant', 'sport'),
    ('mutant', 'accessories'),
    ('mutlu', 'appliances'),
    ('mutlu', 'country_yard'),
    ('mutsy', 'kids'),
    ('mutsy', 'accessories'),
    ('muza', 'furniture'),
    ('mw-light', 'electronics'),
    ('mydean', 'furniture'),
    ('mykita', 'accessories'),
    ('mykronoz', 'electronics'),
    ('mylittieworld', 'kids'),
    ('mylittlepony', 'kids'),
    ('mylittlepony', 'accessories'),
    ('myprotein', 'sport'),
    ('myprotein', 'medicine'),
    ('mystar', 'electronics'),
    ('mystery', 'stationery'),
    ('mz', 'apparel'),
    ('mz', 'accessories'),
    ('nabaiji', 'sport'),
    ('nabaiji', 'kids'),
    ('nada', 'furniture'),
    ('nadoba', 'appliances'),
    ('nady', 'electronics'),
    ('nagano', 'appliances'),
    ('nakamichi', 'electronics'),
    ('nakamichi', 'appliances');
```
[2024-12-05T22:07:15.554+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results and logical deductions:

1. **must** - apparel, accessories
2. **mustang** - auto, apparel
3. **mustela** - medicine, kids
4. **mustella** - medicine, kids
5. **musun** - furniture
6. **mutant** - sport, accessories
7. **mutlu** - appliances, country_yard
8. **mutsy** - kids, accessories
9. **muza** - furniture
10. **mw-light** - electronics
11. **mydean** - furniture
12. **mykita** - accessories
13. **mykronoz** - electronics
14. **mylittieworld** - kids
15. **mylittlepony** - kids, accessories
16. **myprotein** - sport, medicine
17. **mystar** - electronics
18. **mystery** - stationery
19. **mz** - apparel, accessories
20. **nabaiji** - sport, kids
21. **nada** - furniture
22. **nadoba** - appliances
23. **nady** - electronics
24. **nagano** - appliances
25. **nakamichi** - electronics, appliances

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('must', 'apparel'),
    ('must', 'accessories'),
    ('mustang', 'auto'),
    ('mustang', 'apparel'),
    ('mustela', 'medicine'),
    ('mustela', 'kids'),
    ('mustella', 'medicine'),
    ('mustella', 'kids'),
    ('musun', 'furniture'),
    ('mutant', 'sport'),
    ('mutant', 'accessories'),
    ('mutlu', 'appliances'),
    ('mutlu', 'country_yard'),
    ('mutsy', 'kids'),
    ('mutsy', 'accessories'),
    ('muza', 'furniture'),
    ('mw-light', 'electronics'),
    ('mydean', 'furniture'),
    ('mykita', 'accessories'),
    ('mykronoz', 'electronics'),
    ('mylittieworld', 'kids'),
    ('mylittlepony', 'kids'),
    ('mylittlepony', 'accessories'),
    ('myprotein', 'sport'),
    ('myprotein', 'medicine'),
    ('mystar', 'electronics'),
    ('mystery', 'stationery'),
    ('mz', 'apparel'),
    ('mz', 'accessories'),
    ('nabaiji', 'sport'),
    ('nabaiji', 'kids'),
    ('nada', 'furniture'),
    ('nadoba', 'appliances'),
    ('nady', 'electronics'),
    ('nagano', 'appliances'),
    ('nakamichi', 'electronics'),
    ('nakamichi', 'appliances');
```
[2024-12-05T22:07:15.573+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:07:15.573+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:06:53.560625+00:00, execution_date=20241205T220653, start_date=20241205T220658, end_date=20241205T220715
[2024-12-05T22:07:15.602+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:07:15.619+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:07:15.622+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
