[2024-12-05T22:24:41.578+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:24:41.590+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:24:35.657493+00:00 [queued]>
[2024-12-05T22:24:41.598+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:24:35.657493+00:00 [queued]>
[2024-12-05T22:24:41.599+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:24:41.616+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:24:35.657493+00:00
[2024-12-05T22:24:41.622+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7275) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:24:41.624+0000] {standard_task_runner.py:72} INFO - Started process 7276 to run task
[2024-12-05T22:24:41.624+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:24:35.657493+00:00', '--job-id', '1584', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpu9cq_oab']
[2024-12-05T22:24:41.626+0000] {standard_task_runner.py:105} INFO - Job 1584: Subtask call_llm
[2024-12-05T22:24:41.671+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:24:35.657493+00:00 [running]> on host c7780884450d
[2024-12-05T22:24:41.743+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:24:35.657493+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:24:35.657493+00:00'
[2024-12-05T22:24:41.744+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:24:41.762+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['ronthompson', 'roobo', 'rooman', 'root', 'rosa', 'rosato', 'rosenberg', 'roshen', 'rosio', 'rosmen', 'rossia', 'rossiaavtorobot', 'rossignol', 'rossinka', 'rostok-mebel', 'rotor', 'rotorazer', 'rovigo', 'rovus', 'rowell', 'rowenta', 'roxar', 'roxin', 'roxy', 'roxykids'], 'next_index': 4350}
[2024-12-05T22:24:41.762+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:24:42.205+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:24:59.320+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of brands to their respective categories based on the search queries:

1. **ronthompson**: sport
2. **roobo**: electronics
3. **rooman**: furniture
4. **root**: apparel
5. **rosa**: apparel
6. **rosato**: apparel
7. **rosenberg**: appliances
8. **roshen**: country_yard
9. **rosio**: furniture
10. **rosmen**: apparel
11. **rossia**: electronics
12. **rossiaavtorobot**: electronics
13. **rossignol**: sport
14. **rossinka**: kids
15. **rostok-mebel**: furniture
16. **rotor**: auto
17. **rotorazer**: appliances
18. **rovigo**: appliances
19. **rovus**: appliances
20. **rowell**: apparel
21. **rowenta**: appliances
22. **roxar**: electronics
23. **roxin**: accessories
24. **roxy**: apparel
25. **roxykids**: kids

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ronthompson', 'sport'),
    ('roobo', 'electronics'),
    ('rooman', 'furniture'),
    ('root', 'apparel'),
    ('rosa', 'apparel'),
    ('rosato', 'apparel'),
    ('rosenberg', 'appliances'),
    ('roshen', 'country_yard'),
    ('rosio', 'furniture'),
    ('rosmen', 'apparel'),
    ('rossia', 'electronics'),
    ('rossiaavtorobot', 'electronics'),
    ('rossignol', 'sport'),
    ('rossinka', 'kids'),
    ('rostok-mebel', 'furniture'),
    ('rotor', 'auto'),
    ('rotorazer', 'appliances'),
    ('rovigo', 'appliances'),
    ('rovus', 'appliances'),
    ('rowell', 'apparel'),
    ('rowenta', 'appliances'),
    ('roxar', 'electronics'),
    ('roxin', 'accessories'),
    ('roxy', 'apparel'),
    ('roxykids', 'kids');
```
[2024-12-05T22:24:59.321+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of brands to their respective categories based on the search queries:

1. **ronthompson**: sport
2. **roobo**: electronics
3. **rooman**: furniture
4. **root**: apparel
5. **rosa**: apparel
6. **rosato**: apparel
7. **rosenberg**: appliances
8. **roshen**: country_yard
9. **rosio**: furniture
10. **rosmen**: apparel
11. **rossia**: electronics
12. **rossiaavtorobot**: electronics
13. **rossignol**: sport
14. **rossinka**: kids
15. **rostok-mebel**: furniture
16. **rotor**: auto
17. **rotorazer**: appliances
18. **rovigo**: appliances
19. **rovus**: appliances
20. **rowell**: apparel
21. **rowenta**: appliances
22. **roxar**: electronics
23. **roxin**: accessories
24. **roxy**: apparel
25. **roxykids**: kids

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ronthompson', 'sport'),
    ('roobo', 'electronics'),
    ('rooman', 'furniture'),
    ('root', 'apparel'),
    ('rosa', 'apparel'),
    ('rosato', 'apparel'),
    ('rosenberg', 'appliances'),
    ('roshen', 'country_yard'),
    ('rosio', 'furniture'),
    ('rosmen', 'apparel'),
    ('rossia', 'electronics'),
    ('rossiaavtorobot', 'electronics'),
    ('rossignol', 'sport'),
    ('rossinka', 'kids'),
    ('rostok-mebel', 'furniture'),
    ('rotor', 'auto'),
    ('rotorazer', 'appliances'),
    ('rovigo', 'appliances'),
    ('rovus', 'appliances'),
    ('rowell', 'apparel'),
    ('rowenta', 'appliances'),
    ('roxar', 'electronics'),
    ('roxin', 'accessories'),
    ('roxy', 'apparel'),
    ('roxykids', 'kids');
```
[2024-12-05T22:24:59.341+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:24:59.341+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:24:35.657493+00:00, execution_date=20241205T222435, start_date=20241205T222441, end_date=20241205T222459
[2024-12-05T22:24:59.377+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:24:59.394+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:24:59.397+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
