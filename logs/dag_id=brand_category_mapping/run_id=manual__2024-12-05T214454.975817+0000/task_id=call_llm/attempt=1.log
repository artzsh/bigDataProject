[2024-12-05T21:45:00.647+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:45:00.661+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:44:54.975817+00:00 [queued]>
[2024-12-05T21:45:00.668+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:44:54.975817+00:00 [queued]>
[2024-12-05T21:45:00.669+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:45:00.681+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:44:54.975817+00:00
[2024-12-05T21:45:00.688+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5161) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:45:00.689+0000] {standard_task_runner.py:72} INFO - Started process 5162 to run task
[2024-12-05T21:45:00.690+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:44:54.975817+00:00', '--job-id', '1128', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpnvt8kbts']
[2024-12-05T21:45:00.692+0000] {standard_task_runner.py:105} INFO - Job 1128: Subtask call_llm
[2024-12-05T21:45:00.728+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:44:54.975817+00:00 [running]> on host c7780884450d
[2024-12-05T21:45:00.791+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:44:54.975817+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:44:54.975817+00:00'
[2024-12-05T21:45:00.792+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:45:00.809+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['jardin', 'jarko', 'jasic', 'jasmine', 'jata', 'jawbone', 'jazwares', 'jb', 'jbl', 'jeep', 'jekod', 'jellyfishjam', 'jessnail', 'jet', 'jetair', 'jetem', 'jetpik', 'jeunepremier', 'jhiningmoment', 'jiada', 'jianuo', 'jiaxingharleybabycar', 'jigott', 'jihlavabohemia', 'jika'], 'next_index': 2450}
[2024-12-05T21:45:00.810+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:45:01.225+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:45:20.891+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the brands provided and my understanding of their products, here is the mapping of each brand to the appropriate categories:

1. **jardin** - country_yard
2. **jarko** - appliances
3. **jasic** - electronics, appliances
4. **jasmine** - apparel, accessories
5. **jata** - appliances
6. **jawbone** - electronics
7. **jazwares** - kids, toys
8. **jb** - electronics
9. **jbl** - electronics
10. **jeep** - auto, accessories
11. **jekod** - electronics, accessories
12. **jellyfishjam** - kids, toys
13. **jessnail** - accessories
14. **jet** - electronics
15. **jetair** - appliances
16. **jetem** - appliances
17. **jetpik** - appliances
18. **jeunepremier** - kids, apparel
19. **jhiningmoment** - accessories
20. **jiada** - auto
21. **jianuo** - electronics
22. **jiaxingharleybabycar** - kids, auto
23. **jigott** - apparel
24. **jihlavabohemia** - furniture
25. **jika** - appliances

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('jardin', 'country_yard'),
    ('jarko', 'appliances'),
    ('jasic', 'electronics'),
    ('jasic', 'appliances'),
    ('jasmine', 'apparel'),
    ('jasmine', 'accessories'),
    ('jata', 'appliances'),
    ('jawbone', 'electronics'),
    ('jazwares', 'kids'),
    ('jazwares', 'toys'),
    ('jb', 'electronics'),
    ('jbl', 'electronics'),
    ('jeep', 'auto'),
    ('jeep', 'accessories'),
    ('jekod', 'electronics'),
    ('jekod', 'accessories'),
    ('jellyfishjam', 'kids'),
    ('jellyfishjam', 'toys'),
    ('jessnail', 'accessories'),
    ('jet', 'electronics'),
    ('jetair', 'appliances'),
    ('jetem', 'appliances'),
    ('jetpik', 'appliances'),
    ('jeunepremier', 'kids'),
    ('jeunepremier', 'apparel'),
    ('jhiningmoment', 'accessories'),
    ('jiada', 'auto'),
    ('jianuo', 'electronics'),
    ('jiaxingharleybabycar', 'kids'),
    ('jiaxingharleybabycar', 'auto'),
    ('jigott', 'apparel'),
    ('jihlavabohemia', 'furniture'),
    ('jika', 'appliances');
```
[2024-12-05T21:45:20.892+0000] {python.py:240} INFO - Done. Returned value was: Based on the brands provided and my understanding of their products, here is the mapping of each brand to the appropriate categories:

1. **jardin** - country_yard
2. **jarko** - appliances
3. **jasic** - electronics, appliances
4. **jasmine** - apparel, accessories
5. **jata** - appliances
6. **jawbone** - electronics
7. **jazwares** - kids, toys
8. **jb** - electronics
9. **jbl** - electronics
10. **jeep** - auto, accessories
11. **jekod** - electronics, accessories
12. **jellyfishjam** - kids, toys
13. **jessnail** - accessories
14. **jet** - electronics
15. **jetair** - appliances
16. **jetem** - appliances
17. **jetpik** - appliances
18. **jeunepremier** - kids, apparel
19. **jhiningmoment** - accessories
20. **jiada** - auto
21. **jianuo** - electronics
22. **jiaxingharleybabycar** - kids, auto
23. **jigott** - apparel
24. **jihlavabohemia** - furniture
25. **jika** - appliances

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('jardin', 'country_yard'),
    ('jarko', 'appliances'),
    ('jasic', 'electronics'),
    ('jasic', 'appliances'),
    ('jasmine', 'apparel'),
    ('jasmine', 'accessories'),
    ('jata', 'appliances'),
    ('jawbone', 'electronics'),
    ('jazwares', 'kids'),
    ('jazwares', 'toys'),
    ('jb', 'electronics'),
    ('jbl', 'electronics'),
    ('jeep', 'auto'),
    ('jeep', 'accessories'),
    ('jekod', 'electronics'),
    ('jekod', 'accessories'),
    ('jellyfishjam', 'kids'),
    ('jellyfishjam', 'toys'),
    ('jessnail', 'accessories'),
    ('jet', 'electronics'),
    ('jetair', 'appliances'),
    ('jetem', 'appliances'),
    ('jetpik', 'appliances'),
    ('jeunepremier', 'kids'),
    ('jeunepremier', 'apparel'),
    ('jhiningmoment', 'accessories'),
    ('jiada', 'auto'),
    ('jianuo', 'electronics'),
    ('jiaxingharleybabycar', 'kids'),
    ('jiaxingharleybabycar', 'auto'),
    ('jigott', 'apparel'),
    ('jihlavabohemia', 'furniture'),
    ('jika', 'appliances');
```
[2024-12-05T21:45:20.910+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:45:20.910+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:44:54.975817+00:00, execution_date=20241205T214454, start_date=20241205T214500, end_date=20241205T214520
[2024-12-05T21:45:20.952+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:45:20.970+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:45:20.973+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
