[2024-12-05T20:55:45.162+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:55:45.174+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:55:40.344502+00:00 [queued]>
[2024-12-05T20:55:45.180+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:55:40.344502+00:00 [queued]>
[2024-12-05T20:55:45.181+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:55:45.209+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:55:40.344502+00:00
[2024-12-05T20:55:45.215+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2518) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:55:45.216+0000] {standard_task_runner.py:72} INFO - Started process 2519 to run task
[2024-12-05T20:55:45.216+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:55:40.344502+00:00', '--job-id', '558', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpyjrcq3ax']
[2024-12-05T20:55:45.218+0000] {standard_task_runner.py:105} INFO - Job 558: Subtask call_llm
[2024-12-05T20:55:45.257+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:55:40.344502+00:00 [running]> on host c7780884450d
[2024-12-05T20:55:45.319+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:55:40.344502+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:55:40.344502+00:00'
[2024-12-05T20:55:45.320+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:55:45.336+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['adili', 'adking', 'admarginem', 'admira', 'adora', 'adriatica', 'adrilux', 'advan', 'aeg', 'a-elita', 'aenepure', 'aeolus', 'aero', 'aerocool', 'aeroforce', 'aerolajf', 'aerosystem', 'afnan', 'afox', 'ag', 'agatharuizdelaprada', 'age', 'agent', 'agidel', 'agness'], 'next_index': 75}
[2024-12-05T20:55:45.337+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:55:45.862+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:56:00.340+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to the predefined categories based on the search results and analysis:

1. **adili** - apparel
2. **adking** - electronics
3. **admarginem** - stationery
4. **admira** - apparel
5. **adora** - furniture
6. **adriatica** - accessories
7. **adrilux** - electronics
8. **advan** - electronics
9. **aeg** - appliances
10. **a-elita** - apparel
11. **aenepure** - medicine
12. **aeolus** - auto
13. **aero** - auto
14. **aerocool** - electronics
15. **aeroforce** - electronics
16. **aerolajf** - electronics
17. **aerosystem** - electronics
18. **afnan** - accessories
19. **afox** - electronics
20. **ag** - apparel
21. **agatharuizdelaprada** - apparel
22. **age** - accessories
23. **agent** - electronics
24. **agidel** - medicine
25. **agness** - kids

Based on this mapping, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('adili', 'apparel'),
    ('adking', 'electronics'),
    ('admarginem', 'stationery'),
    ('admira', 'apparel'),
    ('adora', 'furniture'),
    ('adriatica', 'accessories'),
    ('adrilux', 'electronics'),
    ('advan', 'electronics'),
    ('aeg', 'appliances'),
    ('a-elita', 'apparel'),
    ('aenepure', 'medicine'),
    ('aeolus', 'auto'),
    ('aero', 'auto'),
    ('aerocool', 'electronics'),
    ('aeroforce', 'electronics'),
    ('aerolajf', 'electronics'),
    ('aerosystem', 'electronics'),
    ('afnan', 'accessories'),
    ('afox', 'electronics'),
    ('ag', 'apparel'),
    ('agatharuizdelaprada', 'apparel'),
    ('age', 'accessories'),
    ('agent', 'electronics'),
    ('agidel', 'medicine'),
    ('agness', 'kids');
```
[2024-12-05T20:56:00.341+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to the predefined categories based on the search results and analysis:

1. **adili** - apparel
2. **adking** - electronics
3. **admarginem** - stationery
4. **admira** - apparel
5. **adora** - furniture
6. **adriatica** - accessories
7. **adrilux** - electronics
8. **advan** - electronics
9. **aeg** - appliances
10. **a-elita** - apparel
11. **aenepure** - medicine
12. **aeolus** - auto
13. **aero** - auto
14. **aerocool** - electronics
15. **aeroforce** - electronics
16. **aerolajf** - electronics
17. **aerosystem** - electronics
18. **afnan** - accessories
19. **afox** - electronics
20. **ag** - apparel
21. **agatharuizdelaprada** - apparel
22. **age** - accessories
23. **agent** - electronics
24. **agidel** - medicine
25. **agness** - kids

Based on this mapping, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('adili', 'apparel'),
    ('adking', 'electronics'),
    ('admarginem', 'stationery'),
    ('admira', 'apparel'),
    ('adora', 'furniture'),
    ('adriatica', 'accessories'),
    ('adrilux', 'electronics'),
    ('advan', 'electronics'),
    ('aeg', 'appliances'),
    ('a-elita', 'apparel'),
    ('aenepure', 'medicine'),
    ('aeolus', 'auto'),
    ('aero', 'auto'),
    ('aerocool', 'electronics'),
    ('aeroforce', 'electronics'),
    ('aerolajf', 'electronics'),
    ('aerosystem', 'electronics'),
    ('afnan', 'accessories'),
    ('afox', 'electronics'),
    ('ag', 'apparel'),
    ('agatharuizdelaprada', 'apparel'),
    ('age', 'accessories'),
    ('agent', 'electronics'),
    ('agidel', 'medicine'),
    ('agness', 'kids');
```
[2024-12-05T20:56:00.361+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:56:00.362+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:55:40.344502+00:00, execution_date=20241205T205540, start_date=20241205T205545, end_date=20241205T205600
[2024-12-05T20:56:00.397+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:56:00.415+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:56:00.418+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
