[2024-12-05T20:56:11.572+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:56:11.584+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:56:05.798159+00:00 [queued]>
[2024-12-05T20:56:11.591+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:56:05.798159+00:00 [queued]>
[2024-12-05T20:56:11.592+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:56:11.606+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:56:05.798159+00:00
[2024-12-05T20:56:11.612+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2546) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:56:11.614+0000] {standard_task_runner.py:72} INFO - Started process 2547 to run task
[2024-12-05T20:56:11.614+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:56:05.798159+00:00', '--job-id', '564', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp09914nch']
[2024-12-05T20:56:11.616+0000] {standard_task_runner.py:105} INFO - Job 564: Subtask call_llm
[2024-12-05T20:56:11.654+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:56:05.798159+00:00 [running]> on host c7780884450d
[2024-12-05T20:56:11.721+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:56:05.798159+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:56:05.798159+00:00'
[2024-12-05T20:56:11.722+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:56:11.739+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['agnetha', 'agrimotor', 'agu', 'agv', 'aidini', 'aiebao', 'aiformaria', 'aiken', 'aiko', 'aileron', 'aimile', 'aimoto', 'ainibabe', 'air-cool', 'aircool', 'airelec', 'airjordan', 'airline', 'airmax', 'airrower', 'airselfie', 'airwheel', 'aist', 'aivengo', 'ajmal'], 'next_index': 100}
[2024-12-05T20:56:11.739+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:56:12.164+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:56:30.953+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the provided brands to their respective categories based on the search results:

1. **agnetha** - apparel
2. **agrimotor** - construction, auto
3. **agu** - apparel, accessories
4. **agv** - apparel, accessories, auto
5. **aidini** - apparel
6. **aiebao** - accessories
7. **aiformaria** - apparel
8. **aiken** - apparel
9. **aiko** - apparel
10. **aileron** - appliances, electronics
11. **aimile** - appliances, electronics
12. **aimoto** - auto
13. **ainibabe** - apparel, kids
14. **air-cool** - appliances, electronics
15. **aircool** - appliances, electronics
16. **airelec** - appliances, electronics
17. **airjordan** - apparel, accessories, sport
18. **airline** - apparel, accessories
19. **airmax** - apparel, accessories, sport
20. **airrower** - sport, appliances
21. **airselfie** - electronics
22. **airwheel** - electronics, sport
23. **aist** - electronics
24. **aivengo** - electronics
25. **ajmal** - medicine, accessories

Now, here’s the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('agnetha', 'apparel'),
    ('agrimotor', 'construction'),
    ('agrimotor', 'auto'),
    ('agu', 'apparel'),
    ('agu', 'accessories'),
    ('agv', 'apparel'),
    ('agv', 'accessories'),
    ('agv', 'auto'),
    ('aidini', 'apparel'),
    ('aiebao', 'accessories'),
    ('aiformaria', 'apparel'),
    ('aiken', 'apparel'),
    ('aiko', 'apparel'),
    ('aileron', 'appliances'),
    ('aileron', 'electronics'),
    ('aimile', 'appliances'),
    ('aimile', 'electronics'),
    ('aimoto', 'auto'),
    ('ainibabe', 'apparel'),
    ('ainibabe', 'kids'),
    ('air-cool', 'appliances'),
    ('air-cool', 'electronics'),
    ('aircool', 'appliances'),
    ('aircool', 'electronics'),
    ('airelec', 'appliances'),
    ('airelec', 'electronics'),
    ('airjordan', 'apparel'),
    ('airjordan', 'accessories'),
    ('airjordan', 'sport'),
    ('airline', 'apparel'),
    ('airline', 'accessories'),
    ('airmax', 'apparel'),
    ('airmax', 'accessories'),
    ('airmax', 'sport'),
    ('airrower', 'sport'),
    ('airrower', 'appliances'),
    ('airselfie', 'electronics'),
    ('airwheel', 'electronics'),
    ('airwheel', 'sport'),
    ('aist', 'electronics'),
    ('aivengo', 'electronics'),
    ('ajmal', 'medicine'),
    ('ajmal', 'accessories');
```
[2024-12-05T20:56:30.953+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the provided brands to their respective categories based on the search results:

1. **agnetha** - apparel
2. **agrimotor** - construction, auto
3. **agu** - apparel, accessories
4. **agv** - apparel, accessories, auto
5. **aidini** - apparel
6. **aiebao** - accessories
7. **aiformaria** - apparel
8. **aiken** - apparel
9. **aiko** - apparel
10. **aileron** - appliances, electronics
11. **aimile** - appliances, electronics
12. **aimoto** - auto
13. **ainibabe** - apparel, kids
14. **air-cool** - appliances, electronics
15. **aircool** - appliances, electronics
16. **airelec** - appliances, electronics
17. **airjordan** - apparel, accessories, sport
18. **airline** - apparel, accessories
19. **airmax** - apparel, accessories, sport
20. **airrower** - sport, appliances
21. **airselfie** - electronics
22. **airwheel** - electronics, sport
23. **aist** - electronics
24. **aivengo** - electronics
25. **ajmal** - medicine, accessories

Now, here’s the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('agnetha', 'apparel'),
    ('agrimotor', 'construction'),
    ('agrimotor', 'auto'),
    ('agu', 'apparel'),
    ('agu', 'accessories'),
    ('agv', 'apparel'),
    ('agv', 'accessories'),
    ('agv', 'auto'),
    ('aidini', 'apparel'),
    ('aiebao', 'accessories'),
    ('aiformaria', 'apparel'),
    ('aiken', 'apparel'),
    ('aiko', 'apparel'),
    ('aileron', 'appliances'),
    ('aileron', 'electronics'),
    ('aimile', 'appliances'),
    ('aimile', 'electronics'),
    ('aimoto', 'auto'),
    ('ainibabe', 'apparel'),
    ('ainibabe', 'kids'),
    ('air-cool', 'appliances'),
    ('air-cool', 'electronics'),
    ('aircool', 'appliances'),
    ('aircool', 'electronics'),
    ('airelec', 'appliances'),
    ('airelec', 'electronics'),
    ('airjordan', 'apparel'),
    ('airjordan', 'accessories'),
    ('airjordan', 'sport'),
    ('airline', 'apparel'),
    ('airline', 'accessories'),
    ('airmax', 'apparel'),
    ('airmax', 'accessories'),
    ('airmax', 'sport'),
    ('airrower', 'sport'),
    ('airrower', 'appliances'),
    ('airselfie', 'electronics'),
    ('airwheel', 'electronics'),
    ('airwheel', 'sport'),
    ('aist', 'electronics'),
    ('aivengo', 'electronics'),
    ('ajmal', 'medicine'),
    ('ajmal', 'accessories');
```
[2024-12-05T20:56:30.976+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:56:30.977+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:56:05.798159+00:00, execution_date=20241205T205605, start_date=20241205T205611, end_date=20241205T205630
[2024-12-05T20:56:31.010+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:56:31.028+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:56:31.031+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
