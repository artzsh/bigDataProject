[2024-12-05T22:44:37.323+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:44:37.337+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:44:32.924652+00:00 [queued]>
[2024-12-05T22:44:37.344+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:44:32.924652+00:00 [queued]>
[2024-12-05T22:44:37.344+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:44:37.361+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:44:32.924652+00:00
[2024-12-05T22:44:37.368+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8274) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:44:37.370+0000] {standard_task_runner.py:72} INFO - Started process 8275 to run task
[2024-12-05T22:44:37.370+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:44:32.924652+00:00', '--job-id', '1794', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpb74npfaz']
[2024-12-05T22:44:37.372+0000] {standard_task_runner.py:105} INFO - Job 1794: Subtask call_llm
[2024-12-05T22:44:37.410+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:44:32.924652+00:00 [running]> on host c7780884450d
[2024-12-05T22:44:37.475+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:44:32.924652+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:44:32.924652+00:00'
[2024-12-05T22:44:37.477+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:44:37.496+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['uglydolls', 'ugreen', 'ukikids', 'ulker', 'ultimate', 'ultimatenutrition', 'ultimatumboxing', 'ultra', 'ultraflash', 'ultrapowersports', 'ultrasone', 'ultravit', 'umbro', 'umi', 'umka', 'underarmour', 'unex', 'unice', 'unicum', 'unidec', 'uniforce', 'uni-fortunetoys', 'unifur', 'unikum', 'unilux'], 'next_index': 5225}
[2024-12-05T22:44:37.496+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:44:37.940+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:44:57.343+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on the search results:

1. **uglydolls**: kids, apparel
2. **ugreen**: electronics, appliances
3. **ukikids**: kids, apparel
4. **ulker**: food (not in predefined categories, but could be considered under country_yard for snacks)
5. **ultimate**: sport, supplements
6. **ultimatenutrition**: medicine, sport
7. **ultimatumboxing**: sport, apparel
8. **ultra**: electronics, appliances (depends on context, could also be sport)
9. **ultraflash**: electronics
10. **ultrapowersports**: sport, auto
11. **ultrasone**: electronics
12. **ultravit**: medicine, supplements
13. **umbro**: sport, apparel
14. **umi**: kids, apparel
15. **umka**: kids, apparel
16. **underarmour**: sport, apparel
17. **unex**: construction, appliances
18. **unice**: medicine
19. **unicum**: medicine
20. **unidec**: construction, appliances
21. **uniforce**: construction
22. **uni-fortunetoys**: kids
23. **unifur**: accessories, apparel (fur-related)
24. **unikum**: accessories
25. **unilux**: electronics, appliances

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('uglydolls', 'kids'),
    ('uglydolls', 'apparel'),
    ('ugreen', 'electronics'),
    ('ugreen', 'appliances'),
    ('ukikids', 'kids'),
    ('ukikids', 'apparel'),
    ('ulker', 'country_yard'),
    ('ultimate', 'sport'),
    ('ultimate', 'supplements'),
    ('ultimatenutrition', 'medicine'),
    ('ultimatenutrition', 'sport'),
    ('ultimatumboxing', 'sport'),
    ('ultimatumboxing', 'apparel'),
    ('ultra', 'electronics'),
    ('ultra', 'appliances'),
    ('ultraflash', 'electronics'),
    ('ultrapowersports', 'sport'),
    ('ultrapowersports', 'auto'),
    ('ultrasone', 'electronics'),
    ('ultravit', 'medicine'),
    ('ultravit', 'supplements'),
    ('umbro', 'sport'),
    ('umbro', 'apparel'),
    ('umi', 'kids'),
    ('umi', 'apparel'),
    ('umka', 'kids'),
    ('umka', 'apparel'),
    ('underarmour', 'sport'),
    ('underarmour', 'apparel'),
    ('unex', 'construction'),
    ('unex', 'appliances'),
    ('unice', 'medicine'),
    ('unicum', 'medicine'),
    ('unidec', 'construction'),
    ('unidec', 'appliances'),
    ('uniforce', 'construction'),
    ('uni-fortunetoys', 'kids'),
    ('unifur', 'accessories'),
    ('unifur', 'apparel'),
    ('unikum', 'accessories'),
    ('unilux', 'electronics'),
    ('unilux', 'appliances');
```
[2024-12-05T22:44:57.343+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on the search results:

1. **uglydolls**: kids, apparel
2. **ugreen**: electronics, appliances
3. **ukikids**: kids, apparel
4. **ulker**: food (not in predefined categories, but could be considered under country_yard for snacks)
5. **ultimate**: sport, supplements
6. **ultimatenutrition**: medicine, sport
7. **ultimatumboxing**: sport, apparel
8. **ultra**: electronics, appliances (depends on context, could also be sport)
9. **ultraflash**: electronics
10. **ultrapowersports**: sport, auto
11. **ultrasone**: electronics
12. **ultravit**: medicine, supplements
13. **umbro**: sport, apparel
14. **umi**: kids, apparel
15. **umka**: kids, apparel
16. **underarmour**: sport, apparel
17. **unex**: construction, appliances
18. **unice**: medicine
19. **unicum**: medicine
20. **unidec**: construction, appliances
21. **uniforce**: construction
22. **uni-fortunetoys**: kids
23. **unifur**: accessories, apparel (fur-related)
24. **unikum**: accessories
25. **unilux**: electronics, appliances

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('uglydolls', 'kids'),
    ('uglydolls', 'apparel'),
    ('ugreen', 'electronics'),
    ('ugreen', 'appliances'),
    ('ukikids', 'kids'),
    ('ukikids', 'apparel'),
    ('ulker', 'country_yard'),
    ('ultimate', 'sport'),
    ('ultimate', 'supplements'),
    ('ultimatenutrition', 'medicine'),
    ('ultimatenutrition', 'sport'),
    ('ultimatumboxing', 'sport'),
    ('ultimatumboxing', 'apparel'),
    ('ultra', 'electronics'),
    ('ultra', 'appliances'),
    ('ultraflash', 'electronics'),
    ('ultrapowersports', 'sport'),
    ('ultrapowersports', 'auto'),
    ('ultrasone', 'electronics'),
    ('ultravit', 'medicine'),
    ('ultravit', 'supplements'),
    ('umbro', 'sport'),
    ('umbro', 'apparel'),
    ('umi', 'kids'),
    ('umi', 'apparel'),
    ('umka', 'kids'),
    ('umka', 'apparel'),
    ('underarmour', 'sport'),
    ('underarmour', 'apparel'),
    ('unex', 'construction'),
    ('unex', 'appliances'),
    ('unice', 'medicine'),
    ('unicum', 'medicine'),
    ('unidec', 'construction'),
    ('unidec', 'appliances'),
    ('uniforce', 'construction'),
    ('uni-fortunetoys', 'kids'),
    ('unifur', 'accessories'),
    ('unifur', 'apparel'),
    ('unikum', 'accessories'),
    ('unilux', 'electronics'),
    ('unilux', 'appliances');
```
[2024-12-05T22:44:57.361+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:44:57.362+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:44:32.924652+00:00, execution_date=20241205T224432, start_date=20241205T224437, end_date=20241205T224457
[2024-12-05T22:44:57.387+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:44:57.404+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:44:57.407+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
