[2024-12-05T22:01:56.048+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:01:56.059+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:01:51.154847+00:00 [queued]>
[2024-12-05T22:01:56.065+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:01:51.154847+00:00 [queued]>
[2024-12-05T22:01:56.066+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:01:56.077+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:01:51.154847+00:00
[2024-12-05T22:01:56.082+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=6057) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:01:56.084+0000] {standard_task_runner.py:72} INFO - Started process 6058 to run task
[2024-12-05T22:01:56.084+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:01:51.154847+00:00', '--job-id', '1320', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpt0_2zuw8']
[2024-12-05T22:01:56.085+0000] {standard_task_runner.py:105} INFO - Job 1320: Subtask call_llm
[2024-12-05T22:01:56.119+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:01:51.154847+00:00 [running]> on host c7780884450d
[2024-12-05T22:01:56.180+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:01:51.154847+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:01:51.154847+00:00'
[2024-12-05T22:01:56.181+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:01:56.199+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['medi-peel', 'medisana', 'medtextile', 'medvedko', 'mefferts', 'mefro', 'megabass', 'megabloks', 'megasaurs', 'meguin', 'mehovojsalonledi', 'meike', 'meinl', 'meirende', 'meizer', 'meizu', 'mekkan', 'meliconi', 'melidadi', 'melissadoug', 'melitta', 'mello', 'melomanpublishing', 'memo', 'mentor'], 'next_index': 3250}
[2024-12-05T22:01:56.199+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:01:56.609+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:02:14.927+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the provided brands to the predefined categories based on the search results:

1. **medi-peel**: medicine
2. **medisana**: medicine, appliances
3. **medtextile**: medicine, accessories
4. **medvedko**: kids
5. **mefferts**: kids
6. **mefro**: auto
7. **megabass**: electronics
8. **megabloks**: kids
9. **megasaurs**: kids
10. **meguin**: medicine
11. **mehovojsalonledi**: apparel
12. **meike**: electronics
13. **meinl**: accessories
14. **meirende**: accessories
15. **meizer**: electronics
16. **meizu**: electronics
17. **mekkan**: electronics
18. **meliconi**: appliances
19. **melidadi**: apparel
20. **melissadoug**: kids
21. **melitta**: appliances
22. **mello**: kids
23. **melomanpublishing**: stationery
24. **memo**: stationery
25. **mentor**: education, stationery

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('medi-peel', 'medicine'),
    ('medisana', 'medicine'),
    ('medisana', 'appliances'),
    ('medtextile', 'medicine'),
    ('medtextile', 'accessories'),
    ('medvedko', 'kids'),
    ('mefferts', 'kids'),
    ('mefro', 'auto'),
    ('megabass', 'electronics'),
    ('megabloks', 'kids'),
    ('megasaurs', 'kids'),
    ('meguin', 'medicine'),
    ('mehovojsalonledi', 'apparel'),
    ('meike', 'electronics'),
    ('meinl', 'accessories'),
    ('meirende', 'accessories'),
    ('meizer', 'electronics'),
    ('meizu', 'electronics'),
    ('mekkan', 'electronics'),
    ('meliconi', 'appliances'),
    ('melidadi', 'apparel'),
    ('melissadoug', 'kids'),
    ('melitta', 'appliances'),
    ('mello', 'kids'),
    ('melomanpublishing', 'stationery'),
    ('memo', 'stationery'),
    ('mentor', 'stationery');
```

This statement includes all the brands with their corresponding categories based on the searches conducted.
[2024-12-05T22:02:14.928+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the provided brands to the predefined categories based on the search results:

1. **medi-peel**: medicine
2. **medisana**: medicine, appliances
3. **medtextile**: medicine, accessories
4. **medvedko**: kids
5. **mefferts**: kids
6. **mefro**: auto
7. **megabass**: electronics
8. **megabloks**: kids
9. **megasaurs**: kids
10. **meguin**: medicine
11. **mehovojsalonledi**: apparel
12. **meike**: electronics
13. **meinl**: accessories
14. **meirende**: accessories
15. **meizer**: electronics
16. **meizu**: electronics
17. **mekkan**: electronics
18. **meliconi**: appliances
19. **melidadi**: apparel
20. **melissadoug**: kids
21. **melitta**: appliances
22. **mello**: kids
23. **melomanpublishing**: stationery
24. **memo**: stationery
25. **mentor**: education, stationery

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('medi-peel', 'medicine'),
    ('medisana', 'medicine'),
    ('medisana', 'appliances'),
    ('medtextile', 'medicine'),
    ('medtextile', 'accessories'),
    ('medvedko', 'kids'),
    ('mefferts', 'kids'),
    ('mefro', 'auto'),
    ('megabass', 'electronics'),
    ('megabloks', 'kids'),
    ('megasaurs', 'kids'),
    ('meguin', 'medicine'),
    ('mehovojsalonledi', 'apparel'),
    ('meike', 'electronics'),
    ('meinl', 'accessories'),
    ('meirende', 'accessories'),
    ('meizer', 'electronics'),
    ('meizu', 'electronics'),
    ('mekkan', 'electronics'),
    ('meliconi', 'appliances'),
    ('melidadi', 'apparel'),
    ('melissadoug', 'kids'),
    ('melitta', 'appliances'),
    ('mello', 'kids'),
    ('melomanpublishing', 'stationery'),
    ('memo', 'stationery'),
    ('mentor', 'stationery');
```

This statement includes all the brands with their corresponding categories based on the searches conducted.
[2024-12-05T22:02:14.946+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:02:14.947+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:01:51.154847+00:00, execution_date=20241205T220151, start_date=20241205T220156, end_date=20241205T220214
[2024-12-05T22:02:15.001+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:02:15.019+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:02:15.022+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
