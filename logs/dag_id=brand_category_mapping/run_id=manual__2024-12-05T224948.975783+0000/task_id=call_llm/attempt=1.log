[2024-12-05T22:49:53.435+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:49:53.450+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:49:48.975783+00:00 [queued]>
[2024-12-05T22:49:53.459+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:49:48.975783+00:00 [queued]>
[2024-12-05T22:49:53.460+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:49:53.474+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:49:48.975783+00:00
[2024-12-05T22:49:53.481+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8575) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:49:53.483+0000] {standard_task_runner.py:72} INFO - Started process 8576 to run task
[2024-12-05T22:49:53.482+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:49:48.975783+00:00', '--job-id', '1860', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp6tz4y8wy']
[2024-12-05T22:49:53.485+0000] {standard_task_runner.py:105} INFO - Job 1860: Subtask call_llm
[2024-12-05T22:49:53.526+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:49:48.975783+00:00 [running]> on host c7780884450d
[2024-12-05T22:49:53.596+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:49:48.975783+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:49:48.975783+00:00'
[2024-12-05T22:49:53.597+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:49:53.619+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['willmax', 'wilmax', 'wilo', 'wilson', 'winca', 'wincars', 'wind', 'wing', 'wingo', 'wingoffly', 'winkod', 'winner', 'wintek', 'winx', 'winxclub', 'wiseson', 'witerra', 'withings', 'wiwu', 'wize', 'wk', 'wltoys', 'wmf', 'woddon', 'wonderlab'], 'next_index': 5500}
[2024-12-05T22:49:53.619+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:49:54.036+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:50:11.685+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here's the mapping of the provided brands to the predefined categories based on the searches performed:

1. **willmax** - appliances
2. **wilmax** - appliances
3. **wilo** - appliances
4. **wilson** - sport, apparel
5. **winca** - electronics
6. **wincars** - auto
7. **wind** - electronics
8. **wing** - electronics
9. **wingo** - electronics
10. **wingoffly** - electronics
11. **winkod** - electronics
12. **winner** - apparel, sport
13. **wintek** - computers, electronics
14. **winx** - kids, apparel
15. **winxclub** - kids, apparel
16. **wiseson** - electronics
17. **witerra** - country_yard
18. **withings** - medicine, electronics
19. **wiwu** - accessories, electronics
20. **wize** - electronics
21. **wk** - electronics
22. **wltoys** - kids, electronics
23. **wmf** - appliances
24. **woddon** - furniture
25. **wonderlab** - kids, medicine

Now, here’s the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('willmax', 'appliances'),
    ('wilmax', 'appliances'),
    ('wilo', 'appliances'),
    ('wilson', 'sport'),
    ('wilson', 'apparel'),
    ('winca', 'electronics'),
    ('wincars', 'auto'),
    ('wind', 'electronics'),
    ('wing', 'electronics'),
    ('wingo', 'electronics'),
    ('wingoffly', 'electronics'),
    ('winkod', 'electronics'),
    ('winner', 'apparel'),
    ('winner', 'sport'),
    ('wintek', 'computers'),
    ('wintek', 'electronics'),
    ('winx', 'kids'),
    ('winx', 'apparel'),
    ('winxclub', 'kids'),
    ('winxclub', 'apparel'),
    ('wiseson', 'electronics'),
    ('witerra', 'country_yard'),
    ('withings', 'medicine'),
    ('withings', 'electronics'),
    ('wiwu', 'accessories'),
    ('wiwu', 'electronics'),
    ('wize', 'electronics'),
    ('wk', 'electronics'),
    ('wltoys', 'kids'),
    ('wltoys', 'electronics'),
    ('wmf', 'appliances'),
    ('woddon', 'furniture'),
    ('wonderlab', 'kids'),
    ('wonderlab', 'medicine');
``` 

This statement reflects the brand-category mappings based on the information gathered.
[2024-12-05T22:50:11.686+0000] {python.py:240} INFO - Done. Returned value was: Here's the mapping of the provided brands to the predefined categories based on the searches performed:

1. **willmax** - appliances
2. **wilmax** - appliances
3. **wilo** - appliances
4. **wilson** - sport, apparel
5. **winca** - electronics
6. **wincars** - auto
7. **wind** - electronics
8. **wing** - electronics
9. **wingo** - electronics
10. **wingoffly** - electronics
11. **winkod** - electronics
12. **winner** - apparel, sport
13. **wintek** - computers, electronics
14. **winx** - kids, apparel
15. **winxclub** - kids, apparel
16. **wiseson** - electronics
17. **witerra** - country_yard
18. **withings** - medicine, electronics
19. **wiwu** - accessories, electronics
20. **wize** - electronics
21. **wk** - electronics
22. **wltoys** - kids, electronics
23. **wmf** - appliances
24. **woddon** - furniture
25. **wonderlab** - kids, medicine

Now, here’s the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('willmax', 'appliances'),
    ('wilmax', 'appliances'),
    ('wilo', 'appliances'),
    ('wilson', 'sport'),
    ('wilson', 'apparel'),
    ('winca', 'electronics'),
    ('wincars', 'auto'),
    ('wind', 'electronics'),
    ('wing', 'electronics'),
    ('wingo', 'electronics'),
    ('wingoffly', 'electronics'),
    ('winkod', 'electronics'),
    ('winner', 'apparel'),
    ('winner', 'sport'),
    ('wintek', 'computers'),
    ('wintek', 'electronics'),
    ('winx', 'kids'),
    ('winx', 'apparel'),
    ('winxclub', 'kids'),
    ('winxclub', 'apparel'),
    ('wiseson', 'electronics'),
    ('witerra', 'country_yard'),
    ('withings', 'medicine'),
    ('withings', 'electronics'),
    ('wiwu', 'accessories'),
    ('wiwu', 'electronics'),
    ('wize', 'electronics'),
    ('wk', 'electronics'),
    ('wltoys', 'kids'),
    ('wltoys', 'electronics'),
    ('wmf', 'appliances'),
    ('woddon', 'furniture'),
    ('wonderlab', 'kids'),
    ('wonderlab', 'medicine');
``` 

This statement reflects the brand-category mappings based on the information gathered.
[2024-12-05T22:50:11.705+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:50:11.705+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:49:48.975783+00:00, execution_date=20241205T224948, start_date=20241205T224953, end_date=20241205T225011
[2024-12-05T22:50:11.723+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:50:11.742+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:50:11.745+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
