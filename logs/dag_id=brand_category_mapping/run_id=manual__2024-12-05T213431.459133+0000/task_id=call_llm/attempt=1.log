[2024-12-05T21:34:36.690+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:34:36.701+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:34:31.459133+00:00 [queued]>
[2024-12-05T21:34:36.707+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:34:31.459133+00:00 [queued]>
[2024-12-05T21:34:36.708+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:34:36.720+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:34:31.459133+00:00
[2024-12-05T21:34:36.726+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4629) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:34:36.728+0000] {standard_task_runner.py:72} INFO - Started process 4630 to run task
[2024-12-05T21:34:36.727+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:34:31.459133+00:00', '--job-id', '1014', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpfmcmfbin']
[2024-12-05T21:34:36.729+0000] {standard_task_runner.py:105} INFO - Job 1014: Subtask call_llm
[2024-12-05T21:34:36.766+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:34:31.459133+00:00 [running]> on host c7780884450d
[2024-12-05T21:34:36.834+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:34:31.459133+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:34:31.459133+00:00'
[2024-12-05T21:34:36.835+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:34:36.852+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['gladen', 'gladiator', 'glam-forever', 'glamglow', 'glamour', 'glamvers', 'glasman', 'glimmeies', 'glimmies', 'glissade', 'glo', 'global', 'globalkeratin', 'globaltoys', 'globber', 'globex', 'globo', 'globus', 'glory', 'gloxy', 'gmini', 'gmslivgidromasao', 'gnu', 'goalzero', 'godin'], 'next_index': 1975}
[2024-12-05T21:34:36.852+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:34:37.282+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:34:59.493+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results and analysis:

1. **gladen** - electronics
2. **gladiator** - furniture, appliances
3. **glam-forever** - apparel, accessories
4. **glamglow** - medicine, cosmetics
5. **glamour** - apparel, cosmetics
6. **glamvers** - apparel, accessories
7. **glasman** - appliances
8. **glimmeies** - kids, toys
9. **glimmies** - kids, toys
10. **glissade** - apparel, sport
11. **glo** - cosmetics, medicine
12. **global** - electronics, appliances
13. **globalkeratin** - medicine, cosmetics
14. **globaltoys** - kids, toys
15. **globber** - kids, sport
16. **globex** - electronics
17. **globo** - kids, toys
18. **globus** - appliances
19. **glory** - apparel, accessories
20. **gloxy** - electronics
21. **gmini** - kids, electronics
22. **gmslivgidromasao** - auto
23. **gnu** - apparel, sport
24. **goalzero** - appliances, electronics
25. **godin** - musical instruments, accessories

Now, here's the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('gladen', 'electronics'),
    ('gladiator', 'furniture'),
    ('gladiator', 'appliances'),
    ('glam-forever', 'apparel'),
    ('glam-forever', 'accessories'),
    ('glamglow', 'medicine'),
    ('glamglow', 'cosmetics'),
    ('glamour', 'apparel'),
    ('glamour', 'cosmetics'),
    ('glamvers', 'apparel'),
    ('glamvers', 'accessories'),
    ('glasman', 'appliances'),
    ('glimmeies', 'kids'),
    ('glimmeies', 'toys'),
    ('glimmies', 'kids'),
    ('glimmies', 'toys'),
    ('glissade', 'apparel'),
    ('glissade', 'sport'),
    ('glo', 'cosmetics'),
    ('glo', 'medicine'),
    ('global', 'electronics'),
    ('global', 'appliances'),
    ('globalkeratin', 'medicine'),
    ('globalkeratin', 'cosmetics'),
    ('globaltoys', 'kids'),
    ('globaltoys', 'toys'),
    ('globber', 'kids'),
    ('globber', 'sport'),
    ('globex', 'electronics'),
    ('globo', 'kids'),
    ('globo', 'toys'),
    ('globus', 'appliances'),
    ('glory', 'apparel'),
    ('glory', 'accessories'),
    ('gloxy', 'electronics'),
    ('gmini', 'kids'),
    ('gmini', 'electronics'),
    ('gmslivgidromasao', 'auto'),
    ('gnu', 'apparel'),
    ('gnu', 'sport'),
    ('goalzero', 'appliances'),
    ('goalzero', 'electronics'),
    ('godin', 'musical instruments'),
    ('godin', 'accessories');
```
[2024-12-05T21:34:59.493+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results and analysis:

1. **gladen** - electronics
2. **gladiator** - furniture, appliances
3. **glam-forever** - apparel, accessories
4. **glamglow** - medicine, cosmetics
5. **glamour** - apparel, cosmetics
6. **glamvers** - apparel, accessories
7. **glasman** - appliances
8. **glimmeies** - kids, toys
9. **glimmies** - kids, toys
10. **glissade** - apparel, sport
11. **glo** - cosmetics, medicine
12. **global** - electronics, appliances
13. **globalkeratin** - medicine, cosmetics
14. **globaltoys** - kids, toys
15. **globber** - kids, sport
16. **globex** - electronics
17. **globo** - kids, toys
18. **globus** - appliances
19. **glory** - apparel, accessories
20. **gloxy** - electronics
21. **gmini** - kids, electronics
22. **gmslivgidromasao** - auto
23. **gnu** - apparel, sport
24. **goalzero** - appliances, electronics
25. **godin** - musical instruments, accessories

Now, here's the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('gladen', 'electronics'),
    ('gladiator', 'furniture'),
    ('gladiator', 'appliances'),
    ('glam-forever', 'apparel'),
    ('glam-forever', 'accessories'),
    ('glamglow', 'medicine'),
    ('glamglow', 'cosmetics'),
    ('glamour', 'apparel'),
    ('glamour', 'cosmetics'),
    ('glamvers', 'apparel'),
    ('glamvers', 'accessories'),
    ('glasman', 'appliances'),
    ('glimmeies', 'kids'),
    ('glimmeies', 'toys'),
    ('glimmies', 'kids'),
    ('glimmies', 'toys'),
    ('glissade', 'apparel'),
    ('glissade', 'sport'),
    ('glo', 'cosmetics'),
    ('glo', 'medicine'),
    ('global', 'electronics'),
    ('global', 'appliances'),
    ('globalkeratin', 'medicine'),
    ('globalkeratin', 'cosmetics'),
    ('globaltoys', 'kids'),
    ('globaltoys', 'toys'),
    ('globber', 'kids'),
    ('globber', 'sport'),
    ('globex', 'electronics'),
    ('globo', 'kids'),
    ('globo', 'toys'),
    ('globus', 'appliances'),
    ('glory', 'apparel'),
    ('glory', 'accessories'),
    ('gloxy', 'electronics'),
    ('gmini', 'kids'),
    ('gmini', 'electronics'),
    ('gmslivgidromasao', 'auto'),
    ('gnu', 'apparel'),
    ('gnu', 'sport'),
    ('goalzero', 'appliances'),
    ('goalzero', 'electronics'),
    ('godin', 'musical instruments'),
    ('godin', 'accessories');
```
[2024-12-05T21:34:59.516+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:34:59.517+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:34:31.459133+00:00, execution_date=20241205T213431, start_date=20241205T213436, end_date=20241205T213459
[2024-12-05T21:34:59.560+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:34:59.581+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:34:59.584+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
