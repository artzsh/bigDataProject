[2024-12-05T22:04:17.975+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:04:17.988+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.extract_sql manual__2024-12-05T22:03:50.579270+00:00 [queued]>
[2024-12-05T22:04:17.995+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.extract_sql manual__2024-12-05T22:03:50.579270+00:00 [queued]>
[2024-12-05T22:04:17.996+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:04:18.008+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): extract_sql> on 2024-12-05 22:03:50.579270+00:00
[2024-12-05T22:04:18.013+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=6174) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:04:18.015+0000] {standard_task_runner.py:72} INFO - Started process 6175 to run task
[2024-12-05T22:04:18.015+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'extract_sql', 'manual__2024-12-05T22:03:50.579270+00:00', '--job-id', '1345', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmppcpkwp3i']
[2024-12-05T22:04:18.017+0000] {standard_task_runner.py:105} INFO - Job 1345: Subtask extract_sql
[2024-12-05T22:04:18.055+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.extract_sql manual__2024-12-05T22:03:50.579270+00:00 [running]> on host c7780884450d
[2024-12-05T22:04:18.124+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='extract_sql' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:03:50.579270+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:03:50.579270+00:00'
[2024-12-05T22:04:18.125+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:04:18.142+0000] {llm_mapping.py:187} INFO - Извлечён llm_response: Here’s the mapping for the provided brands based on the categories:

1. **milavitsa** - apparel
2. **milight** - electronics
3. **military** - apparel, accessories
4. **milk** - food (not in the provided categories)
5. **milka** - food (not in the provided categories)
6. **millenium** - appliances, electronics
7. **millet** - apparel, sport
8. **millionaire** - apparel, accessories
9. **milwaukee** - tools, appliances (not in the provided categories)
10. **mima** - kids, furniture
11. **mi-mi-miski** - kids
12. **mimioriki** - kids
13. **minecraft** - kids, accessories
14. **minerva** - stationery, electronics (not in the provided categories)
15. **minimen** - kids
16. **minimi** - kids
17. **minimotors** - auto, electronics
18. **miniso** - accessories, stationery
19. **minizone** - electronics
20. **minno** - kids
21. **minony** - kids
22. **minoti** - kids
23. **mintex** - construction
24. **mio** - electronics
25. **miolla** - apparel

Now, here’s the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('milavitsa', 'apparel'),
    ('milight', 'electronics'),
    ('military', 'apparel'),
    ('military', 'accessories'),
    ('milk', 'appliances'),
    ('milka', 'appliances'),
    ('millenium', 'appliances'),
    ('millenium', 'electronics'),
    ('millet', 'apparel'),
    ('millet', 'sport'),
    ('millionaire', 'apparel'),
    ('millionaire', 'accessories'),
    ('milwaukee', 'appliances'),
    ('mima', 'kids'),
    ('mima', 'furniture'),
    ('mi-mi-miski', 'kids'),
    ('mimioriki', 'kids'),
    ('minecraft', 'kids'),
    ('minecraft', 'accessories'),
    ('minerva', 'stationery'),
    ('minerva', 'electronics'),
    ('minimen', 'kids'),
    ('minimi', 'kids'),
    ('minimotors', 'auto'),
    ('minimotors', 'electronics'),
    ('miniso', 'accessories'),
    ('miniso', 'stationery'),
    ('minizone', 'electronics'),
    ('minno', 'kids'),
    ('minony', 'kids'),
    ('minoti', 'kids'),
    ('mintex', 'construction'),
    ('mio', 'electronics'),
    ('miolla', 'apparel');
```

Note: Some brands like 'milk' and 'milka' were categorized under food, which is not in the provided categories, so I assigned them to 'appliances' as a placeholder. If you have specific preferences for those, please let me know!
[2024-12-05T22:04:18.143+0000] {llm_mapping.py:174} INFO - Извлечён SQL-код:
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('milavitsa', 'apparel'),
    ('milight', 'electronics'),
    ('military', 'apparel'),
    ('military', 'accessories'),
    ('milk', 'appliances'),
    ('milka', 'appliances'),
    ('millenium', 'appliances'),
    ('millenium', 'electronics'),
    ('millet', 'apparel'),
    ('millet', 'sport'),
    ('millionaire', 'apparel'),
    ('millionaire', 'accessories'),
    ('milwaukee', 'appliances'),
    ('mima', 'kids'),
    ('mima', 'furniture'),
    ('mi-mi-miski', 'kids'),
    ('mimioriki', 'kids'),
    ('minecraft', 'kids'),
    ('minecraft', 'accessories'),
    ('minerva', 'stationery'),
    ('minerva', 'electronics'),
    ('minimen', 'kids'),
    ('minimi', 'kids'),
    ('minimotors', 'auto'),
    ('minimotors', 'electronics'),
    ('miniso', 'accessories'),
    ('miniso', 'stationery'),
    ('minizone', 'electronics'),
    ('minno', 'kids'),
    ('minony', 'kids'),
    ('minoti', 'kids'),
    ('mintex', 'construction'),
    ('mio', 'electronics'),
    ('miolla', 'apparel');
[2024-12-05T22:04:18.143+0000] {python.py:240} INFO - Done. Returned value was: INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('milavitsa', 'apparel'),
    ('milight', 'electronics'),
    ('military', 'apparel'),
    ('military', 'accessories'),
    ('milk', 'appliances'),
    ('milka', 'appliances'),
    ('millenium', 'appliances'),
    ('millenium', 'electronics'),
    ('millet', 'apparel'),
    ('millet', 'sport'),
    ('millionaire', 'apparel'),
    ('millionaire', 'accessories'),
    ('milwaukee', 'appliances'),
    ('mima', 'kids'),
    ('mima', 'furniture'),
    ('mi-mi-miski', 'kids'),
    ('mimioriki', 'kids'),
    ('minecraft', 'kids'),
    ('minecraft', 'accessories'),
    ('minerva', 'stationery'),
    ('minerva', 'electronics'),
    ('minimen', 'kids'),
    ('minimi', 'kids'),
    ('minimotors', 'auto'),
    ('minimotors', 'electronics'),
    ('miniso', 'accessories'),
    ('miniso', 'stationery'),
    ('minizone', 'electronics'),
    ('minno', 'kids'),
    ('minony', 'kids'),
    ('minoti', 'kids'),
    ('mintex', 'construction'),
    ('mio', 'electronics'),
    ('miolla', 'apparel');
[2024-12-05T22:04:18.160+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:04:18.160+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=extract_sql, run_id=manual__2024-12-05T22:03:50.579270+00:00, execution_date=20241205T220350, start_date=20241205T220417, end_date=20241205T220418
[2024-12-05T22:04:18.189+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:04:18.208+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:04:18.210+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
