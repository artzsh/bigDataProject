[2024-12-05T21:50:55.296+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:50:55.308+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:50:50.172378+00:00 [queued]>
[2024-12-05T21:50:55.316+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:50:50.172378+00:00 [queued]>
[2024-12-05T21:50:55.316+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:50:55.329+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:50:50.172378+00:00
[2024-12-05T21:50:55.334+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5469) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:50:55.336+0000] {standard_task_runner.py:72} INFO - Started process 5470 to run task
[2024-12-05T21:50:55.336+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:50:50.172378+00:00', '--job-id', '1194', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpbyfwiwif']
[2024-12-05T21:50:55.338+0000] {standard_task_runner.py:105} INFO - Job 1194: Subtask call_llm
[2024-12-05T21:50:55.380+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:50:50.172378+00:00 [running]> on host c7780884450d
[2024-12-05T21:50:55.457+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:50:50.172378+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:50:50.172378+00:00'
[2024-12-05T21:50:55.458+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:50:55.477+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['kormoran', 'korpus', 'korting', 'korum', 'koseckamari', 'koski-myski', 'kosmos', 'koss', 'kotik', 'koton', 'kovea', 'kovens', 'kovroff', 'k-psport', 'kpt', 'kraftool', 'kramer', 'kranzle', 'krasnaaglina', 'krasnaapresna', 'kraton', 'krause', 'kreslocomfort', 'kress', 'kristal'], 'next_index': 2725}
[2024-12-05T21:50:55.478+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:50:55.900+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:51:12.994+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of each brand to the predefined categories based on the search results and logical deductions:

1. **kormoran** - auto
2. **korpus** - furniture
3. **korting** - appliances
4. **korum** - sport
5. **koseckamari** - country_yard
6. **koski-myski** - kids
7. **kosmos** - electronics
8. **koss** - electronics
9. **kotik** - kids
10. **koton** - apparel
11. **kovea** - appliances
12. **kovens** - construction
13. **kovroff** - construction
14. **k-psport** - sport
15. **kpt** - appliances
16. **kraftool** - construction
17. **kramer** - electronics
18. **kranzle** - appliances
19. **krasnaaglina** - construction
20. **krasnaapresna** - construction
21. **kraton** - construction
22. **krause** - construction
23. **kreslocomfort** - furniture
24. **kress** - appliances
25. **kristal** - stationery

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kormoran', 'auto'),
    ('korpus', 'furniture'),
    ('korting', 'appliances'),
    ('korum', 'sport'),
    ('koseckamari', 'country_yard'),
    ('koski-myski', 'kids'),
    ('kosmos', 'electronics'),
    ('koss', 'electronics'),
    ('kotik', 'kids'),
    ('koton', 'apparel'),
    ('kovea', 'appliances'),
    ('kovens', 'construction'),
    ('kovroff', 'construction'),
    ('k-psport', 'sport'),
    ('kpt', 'appliances'),
    ('kraftool', 'construction'),
    ('kramer', 'electronics'),
    ('kranzle', 'appliances'),
    ('krasnaaglina', 'construction'),
    ('krasnaapresna', 'construction'),
    ('kraton', 'construction'),
    ('krause', 'construction'),
    ('kreslocomfort', 'furniture'),
    ('kress', 'appliances'),
    ('kristal', 'stationery');
```
[2024-12-05T21:51:12.995+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of each brand to the predefined categories based on the search results and logical deductions:

1. **kormoran** - auto
2. **korpus** - furniture
3. **korting** - appliances
4. **korum** - sport
5. **koseckamari** - country_yard
6. **koski-myski** - kids
7. **kosmos** - electronics
8. **koss** - electronics
9. **kotik** - kids
10. **koton** - apparel
11. **kovea** - appliances
12. **kovens** - construction
13. **kovroff** - construction
14. **k-psport** - sport
15. **kpt** - appliances
16. **kraftool** - construction
17. **kramer** - electronics
18. **kranzle** - appliances
19. **krasnaaglina** - construction
20. **krasnaapresna** - construction
21. **kraton** - construction
22. **krause** - construction
23. **kreslocomfort** - furniture
24. **kress** - appliances
25. **kristal** - stationery

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kormoran', 'auto'),
    ('korpus', 'furniture'),
    ('korting', 'appliances'),
    ('korum', 'sport'),
    ('koseckamari', 'country_yard'),
    ('koski-myski', 'kids'),
    ('kosmos', 'electronics'),
    ('koss', 'electronics'),
    ('kotik', 'kids'),
    ('koton', 'apparel'),
    ('kovea', 'appliances'),
    ('kovens', 'construction'),
    ('kovroff', 'construction'),
    ('k-psport', 'sport'),
    ('kpt', 'appliances'),
    ('kraftool', 'construction'),
    ('kramer', 'electronics'),
    ('kranzle', 'appliances'),
    ('krasnaaglina', 'construction'),
    ('krasnaapresna', 'construction'),
    ('kraton', 'construction'),
    ('krause', 'construction'),
    ('kreslocomfort', 'furniture'),
    ('kress', 'appliances'),
    ('kristal', 'stationery');
```
[2024-12-05T21:51:13.014+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:51:13.014+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:50:50.172378+00:00, execution_date=20241205T215050, start_date=20241205T215055, end_date=20241205T215113
[2024-12-05T21:51:13.030+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:51:13.047+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:51:13.050+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
