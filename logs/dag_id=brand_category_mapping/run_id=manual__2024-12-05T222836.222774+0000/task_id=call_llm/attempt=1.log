[2024-12-05T22:28:41.680+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:28:41.692+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:28:36.222774+00:00 [queued]>
[2024-12-05T22:28:41.698+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:28:36.222774+00:00 [queued]>
[2024-12-05T22:28:41.699+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:28:41.711+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:28:36.222774+00:00
[2024-12-05T22:28:41.717+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7499) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:28:41.718+0000] {standard_task_runner.py:72} INFO - Started process 7500 to run task
[2024-12-05T22:28:41.718+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:28:36.222774+00:00', '--job-id', '1632', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpv2v2bczv']
[2024-12-05T22:28:41.720+0000] {standard_task_runner.py:105} INFO - Job 1632: Subtask call_llm
[2024-12-05T22:28:41.753+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:28:36.222774+00:00 [running]> on host c7780884450d
[2024-12-05T22:28:41.814+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:28:36.222774+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:28:36.222774+00:00'
[2024-12-05T22:28:41.815+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:28:41.831+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['seventeen', 'seventeenkids', 'sevillia', 'sgary', 'shagovita', 'shahirani', 'shaik', 'shakira', 'shamsi-irani', 'shangpree', 'shantou', 'shantougepai', 'shark', 'sharking', 'sharp', 'sheba', 'shedi', 'sheffilton', 'sheila', 'shengyuan', 'shenma', 'sherlock', 'sheyk', 'shhongri', 'shima'], 'next_index': 4550}
[2024-12-05T22:28:41.832+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:28:42.252+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:29:00.487+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **seventeen** - apparel
2. **seventeenkids** - kids, apparel
3. **sevillia** - apparel
4. **sgary** - apparel, accessories
5. **shagovita** - apparel
6. **shahirani** - apparel
7. **shaik** - apparel, accessories
8. **shakira** - apparel, accessories
9. **shamsi-irani** - apparel
10. **shangpree** - cosmetics, accessories
11. **shantou** - toys, kids
12. **shantougepai** - toys, kids
13. **shark** - appliances, electronics
14. **sharking** - electronics
15. **sharp** - electronics
16. **sheba** - appliances
17. **shedi** - apparel
18. **sheffilton** - furniture
19. **sheila** - apparel
20. **shengyuan** - electronics
21. **shenma** - electronics
22. **sherlock** - stationery
23. **sheyk** - apparel
24. **shhongri** - electronics
25. **shima** - apparel

Now, here’s the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('seventeen', 'apparel'),
    ('seventeenkids', 'kids'),
    ('seventeenkids', 'apparel'),
    ('sevillia', 'apparel'),
    ('sgary', 'apparel'),
    ('sgary', 'accessories'),
    ('shagovita', 'apparel'),
    ('shahirani', 'apparel'),
    ('shaik', 'apparel'),
    ('shaik', 'accessories'),
    ('shakira', 'apparel'),
    ('shakira', 'accessories'),
    ('shamsi-irani', 'apparel'),
    ('shangpree', 'accessories'),
    ('shantou', 'kids'),
    ('shantou', 'toys'),
    ('shantougepai', 'kids'),
    ('shantougepai', 'toys'),
    ('shark', 'appliances'),
    ('shark', 'electronics'),
    ('sharking', 'electronics'),
    ('sharp', 'electronics'),
    ('sheba', 'appliances'),
    ('shedi', 'apparel'),
    ('sheffilton', 'furniture'),
    ('sheila', 'apparel'),
    ('shengyuan', 'electronics'),
    ('shenma', 'electronics'),
    ('sherlock', 'stationery'),
    ('sheyk', 'apparel'),
    ('shhongri', 'electronics'),
    ('shima', 'apparel');
```
[2024-12-05T22:29:00.488+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **seventeen** - apparel
2. **seventeenkids** - kids, apparel
3. **sevillia** - apparel
4. **sgary** - apparel, accessories
5. **shagovita** - apparel
6. **shahirani** - apparel
7. **shaik** - apparel, accessories
8. **shakira** - apparel, accessories
9. **shamsi-irani** - apparel
10. **shangpree** - cosmetics, accessories
11. **shantou** - toys, kids
12. **shantougepai** - toys, kids
13. **shark** - appliances, electronics
14. **sharking** - electronics
15. **sharp** - electronics
16. **sheba** - appliances
17. **shedi** - apparel
18. **sheffilton** - furniture
19. **sheila** - apparel
20. **shengyuan** - electronics
21. **shenma** - electronics
22. **sherlock** - stationery
23. **sheyk** - apparel
24. **shhongri** - electronics
25. **shima** - apparel

Now, here’s the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('seventeen', 'apparel'),
    ('seventeenkids', 'kids'),
    ('seventeenkids', 'apparel'),
    ('sevillia', 'apparel'),
    ('sgary', 'apparel'),
    ('sgary', 'accessories'),
    ('shagovita', 'apparel'),
    ('shahirani', 'apparel'),
    ('shaik', 'apparel'),
    ('shaik', 'accessories'),
    ('shakira', 'apparel'),
    ('shakira', 'accessories'),
    ('shamsi-irani', 'apparel'),
    ('shangpree', 'accessories'),
    ('shantou', 'kids'),
    ('shantou', 'toys'),
    ('shantougepai', 'kids'),
    ('shantougepai', 'toys'),
    ('shark', 'appliances'),
    ('shark', 'electronics'),
    ('sharking', 'electronics'),
    ('sharp', 'electronics'),
    ('sheba', 'appliances'),
    ('shedi', 'apparel'),
    ('sheffilton', 'furniture'),
    ('sheila', 'apparel'),
    ('shengyuan', 'electronics'),
    ('shenma', 'electronics'),
    ('sherlock', 'stationery'),
    ('sheyk', 'apparel'),
    ('shhongri', 'electronics'),
    ('shima', 'apparel');
```
[2024-12-05T22:29:00.508+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:29:00.509+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:28:36.222774+00:00, execution_date=20241205T222836, start_date=20241205T222841, end_date=20241205T222900
[2024-12-05T22:29:00.552+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:29:00.571+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:29:00.574+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
