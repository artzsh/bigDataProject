[2024-12-05T21:38:04.649+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:38:04.661+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:37:59.611936+00:00 [queued]>
[2024-12-05T21:38:04.667+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:37:59.611936+00:00 [queued]>
[2024-12-05T21:38:04.667+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:38:04.681+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:37:59.611936+00:00
[2024-12-05T21:38:04.687+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4797) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:38:04.688+0000] {standard_task_runner.py:72} INFO - Started process 4798 to run task
[2024-12-05T21:38:04.688+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:37:59.611936+00:00', '--job-id', '1050', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpqbp1y0o2']
[2024-12-05T21:38:04.690+0000] {standard_task_runner.py:105} INFO - Job 1050: Subtask call_llm
[2024-12-05T21:38:04.725+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:37:59.611936+00:00 [running]> on host c7780884450d
[2024-12-05T21:38:04.788+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:37:59.611936+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:37:59.611936+00:00'
[2024-12-05T21:38:04.789+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:38:04.808+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['haley', 'halmar', 'hama', 'hamilton', 'hammer', 'handers', 'handwers', 'hangover', 'hangzhoujindingimportexportcoltd', 'hankook', 'hanlu', 'hanma', 'hannibal', 'hanowa', 'hansa', 'hape', 'hap-p-kid', 'happybaby', 'happyfamily', 'happykid', 'happykidtoy', 'happymonkey', 'happysnail', 'hardax', 'harleybaby'], 'next_index': 2125}
[2024-12-05T21:38:04.809+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:38:05.241+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:38:29.418+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the provided brands, I will categorize each brand according to the predefined categories. Here is the categorization process and the final SQL INSERT statement:

1. **haley** - apparel
2. **halmar** - furniture
3. **hama** - toys, electronics (stationery)
4. **hamilton** - electronics (watches)
5. **hammer** - tools (construction)
6. **handers** - apparel
7. **handwers** - apparel
8. **hangover** - apparel
9. **hangzhoujindingimportexportcoltd** - appliances, electronics
10. **hankook** - auto
11. **hanlu** - apparel
12. **hanma** - electronics (auto parts)
13. **hannibal** - furniture, outdoor (sport)
14. **hanowa** - electronics (watches)
15. **hansa** - appliances
16. **hape** - kids, toys
17. **hap-p-kid** - kids, toys
18. **happybaby** - kids, medicine (baby products)
19. **happyfamily** - kids, medicine (baby products)
20. **happykid** - kids, toys
21. **happykidtoy** - kids, toys
22. **happymonkey** - kids, toys
23. **happysnail** - kids, toys
24. **hardax** - sport, outdoor
25. **harleybaby** - kids, apparel

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('haley', 'apparel'),
    ('halmar', 'furniture'),
    ('hama', 'stationery'),
    ('hamilton', 'electronics'),
    ('hammer', 'construction'),
    ('handers', 'apparel'),
    ('handwers', 'apparel'),
    ('hangover', 'apparel'),
    ('hangzhoujindingimportexportcoltd', 'appliances'),
    ('hangzhoujindingimportexportcoltd', 'electronics'),
    ('hankook', 'auto'),
    ('hanlu', 'apparel'),
    ('hanma', 'electronics'),
    ('hannibal', 'furniture'),
    ('hannibal', 'sport'),
    ('hanowa', 'electronics'),
    ('hansa', 'appliances'),
    ('hape', 'kids'),
    ('hap-p-kid', 'kids'),
    ('happybaby', 'kids'),
    ('happybaby', 'medicine'),
    ('happyfamily', 'kids'),
    ('happyfamily', 'medicine'),
    ('happykid', 'kids'),
    ('happykidtoy', 'kids'),
    ('happymonkey', 'kids'),
    ('happysnail', 'kids'),
    ('hardax', 'sport'),
    ('hardax', 'outdoor'),
    ('harleybaby', 'kids'),
    ('harleybaby', 'apparel');
```

This SQL statement reflects the categorization of each brand based on the information gathered.
[2024-12-05T21:38:29.419+0000] {python.py:240} INFO - Done. Returned value was: Based on the provided brands, I will categorize each brand according to the predefined categories. Here is the categorization process and the final SQL INSERT statement:

1. **haley** - apparel
2. **halmar** - furniture
3. **hama** - toys, electronics (stationery)
4. **hamilton** - electronics (watches)
5. **hammer** - tools (construction)
6. **handers** - apparel
7. **handwers** - apparel
8. **hangover** - apparel
9. **hangzhoujindingimportexportcoltd** - appliances, electronics
10. **hankook** - auto
11. **hanlu** - apparel
12. **hanma** - electronics (auto parts)
13. **hannibal** - furniture, outdoor (sport)
14. **hanowa** - electronics (watches)
15. **hansa** - appliances
16. **hape** - kids, toys
17. **hap-p-kid** - kids, toys
18. **happybaby** - kids, medicine (baby products)
19. **happyfamily** - kids, medicine (baby products)
20. **happykid** - kids, toys
21. **happykidtoy** - kids, toys
22. **happymonkey** - kids, toys
23. **happysnail** - kids, toys
24. **hardax** - sport, outdoor
25. **harleybaby** - kids, apparel

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('haley', 'apparel'),
    ('halmar', 'furniture'),
    ('hama', 'stationery'),
    ('hamilton', 'electronics'),
    ('hammer', 'construction'),
    ('handers', 'apparel'),
    ('handwers', 'apparel'),
    ('hangover', 'apparel'),
    ('hangzhoujindingimportexportcoltd', 'appliances'),
    ('hangzhoujindingimportexportcoltd', 'electronics'),
    ('hankook', 'auto'),
    ('hanlu', 'apparel'),
    ('hanma', 'electronics'),
    ('hannibal', 'furniture'),
    ('hannibal', 'sport'),
    ('hanowa', 'electronics'),
    ('hansa', 'appliances'),
    ('hape', 'kids'),
    ('hap-p-kid', 'kids'),
    ('happybaby', 'kids'),
    ('happybaby', 'medicine'),
    ('happyfamily', 'kids'),
    ('happyfamily', 'medicine'),
    ('happykid', 'kids'),
    ('happykidtoy', 'kids'),
    ('happymonkey', 'kids'),
    ('happysnail', 'kids'),
    ('hardax', 'sport'),
    ('hardax', 'outdoor'),
    ('harleybaby', 'kids'),
    ('harleybaby', 'apparel');
```

This SQL statement reflects the categorization of each brand based on the information gathered.
[2024-12-05T21:38:29.437+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:38:29.437+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:37:59.611936+00:00, execution_date=20241205T213759, start_date=20241205T213804, end_date=20241205T213829
[2024-12-05T21:38:29.486+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:38:29.502+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:38:29.505+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
