[2024-12-05T22:20:17.765+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:20:17.777+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:20:12.758690+00:00 [queued]>
[2024-12-05T22:20:17.784+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:20:12.758690+00:00 [queued]>
[2024-12-05T22:20:17.785+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:20:17.799+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:20:12.758690+00:00
[2024-12-05T22:20:17.805+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7030) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:20:17.807+0000] {standard_task_runner.py:72} INFO - Started process 7031 to run task
[2024-12-05T22:20:17.807+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:20:12.758690+00:00', '--job-id', '1530', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmphavna36d']
[2024-12-05T22:20:17.809+0000] {standard_task_runner.py:105} INFO - Job 1530: Subtask call_llm
[2024-12-05T22:20:17.848+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:20:12.758690+00:00 [running]> on host c7780884450d
[2024-12-05T22:20:17.916+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:20:12.758690+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:20:12.758690+00:00'
[2024-12-05T22:20:17.917+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:20:17.935+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['purox', 'puzzles', 'pyrex', 'qazaqkhan', 'qazprotein', 'qcyber', 'qiangchi', 'qitech', 'qixels', 'qiyitoys', 'qmax', 'qml', 'qnap', 'qnt', 'qp', 'qplay', 'qq', 'quantex', 'quatro', 'quattrocomforto', 'quechua', 'queenfair', 'queensbee', 'quiksilver', 'quinny'], 'next_index': 4125}
[2024-12-05T22:20:17.936+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:20:18.351+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:20:34.368+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results:

1. **purox** - medicine
2. **puzzles** - kids, stationery
3. **pyrex** - appliances, kitchen
4. **qazaqkhan** - apparel
5. **qazprotein** - medicine, sport
6. **qcyber** - computers, electronics
7. **qiangchi** - appliances
8. **qitech** - electronics, computers
9. **qixels** - kids
10. **qiyitoys** - kids
11. **qmax** - electronics
12. **qml** - electronics
13. **qnap** - computers, electronics
14. **qnt** - medicine, sport
15. **qp** - appliances
16. **qplay** - kids, sport
17. **qq** - electronics
18. **quantex** - electronics
19. **quatro** - appliances
20. **quattrocomforto** - furniture
21. **quechua** - sport, apparel
22. **queenfair** - apparel
23. **queensbee** - stationery
24. **quiksilver** - apparel, sport
25. **quinny** - kids, apparel

Now, here’s the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('purox', 'medicine'),
    ('puzzles', 'kids'),
    ('puzzles', 'stationery'),
    ('pyrex', 'appliances'),
    ('qazaqkhan', 'apparel'),
    ('qazprotein', 'medicine'),
    ('qazprotein', 'sport'),
    ('qcyber', 'computers'),
    ('qcyber', 'electronics'),
    ('qiangchi', 'appliances'),
    ('qitech', 'electronics'),
    ('qitech', 'computers'),
    ('qixels', 'kids'),
    ('qiyitoys', 'kids'),
    ('qmax', 'electronics'),
    ('qml', 'electronics'),
    ('qnap', 'computers'),
    ('qnap', 'electronics'),
    ('qnt', 'medicine'),
    ('qnt', 'sport'),
    ('qp', 'appliances'),
    ('qplay', 'kids'),
    ('qplay', 'sport'),
    ('qq', 'electronics'),
    ('quantex', 'electronics'),
    ('quatro', 'appliances'),
    ('quattrocomforto', 'furniture'),
    ('quechua', 'sport'),
    ('quechua', 'apparel'),
    ('queenfair', 'apparel'),
    ('queensbee', 'stationery'),
    ('quiksilver', 'apparel'),
    ('quiksilver', 'sport'),
    ('quinny', 'kids'),
    ('quinny', 'apparel');
``` 

This statement includes all the brands and their assigned categories as per the search results.
[2024-12-05T22:20:34.368+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results:

1. **purox** - medicine
2. **puzzles** - kids, stationery
3. **pyrex** - appliances, kitchen
4. **qazaqkhan** - apparel
5. **qazprotein** - medicine, sport
6. **qcyber** - computers, electronics
7. **qiangchi** - appliances
8. **qitech** - electronics, computers
9. **qixels** - kids
10. **qiyitoys** - kids
11. **qmax** - electronics
12. **qml** - electronics
13. **qnap** - computers, electronics
14. **qnt** - medicine, sport
15. **qp** - appliances
16. **qplay** - kids, sport
17. **qq** - electronics
18. **quantex** - electronics
19. **quatro** - appliances
20. **quattrocomforto** - furniture
21. **quechua** - sport, apparel
22. **queenfair** - apparel
23. **queensbee** - stationery
24. **quiksilver** - apparel, sport
25. **quinny** - kids, apparel

Now, here’s the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('purox', 'medicine'),
    ('puzzles', 'kids'),
    ('puzzles', 'stationery'),
    ('pyrex', 'appliances'),
    ('qazaqkhan', 'apparel'),
    ('qazprotein', 'medicine'),
    ('qazprotein', 'sport'),
    ('qcyber', 'computers'),
    ('qcyber', 'electronics'),
    ('qiangchi', 'appliances'),
    ('qitech', 'electronics'),
    ('qitech', 'computers'),
    ('qixels', 'kids'),
    ('qiyitoys', 'kids'),
    ('qmax', 'electronics'),
    ('qml', 'electronics'),
    ('qnap', 'computers'),
    ('qnap', 'electronics'),
    ('qnt', 'medicine'),
    ('qnt', 'sport'),
    ('qp', 'appliances'),
    ('qplay', 'kids'),
    ('qplay', 'sport'),
    ('qq', 'electronics'),
    ('quantex', 'electronics'),
    ('quatro', 'appliances'),
    ('quattrocomforto', 'furniture'),
    ('quechua', 'sport'),
    ('quechua', 'apparel'),
    ('queenfair', 'apparel'),
    ('queensbee', 'stationery'),
    ('quiksilver', 'apparel'),
    ('quiksilver', 'sport'),
    ('quinny', 'kids'),
    ('quinny', 'apparel');
``` 

This statement includes all the brands and their assigned categories as per the search results.
[2024-12-05T22:20:34.388+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:20:34.389+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:20:12.758690+00:00, execution_date=20241205T222012, start_date=20241205T222017, end_date=20241205T222034
[2024-12-05T22:20:34.433+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:20:34.452+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:20:34.455+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
