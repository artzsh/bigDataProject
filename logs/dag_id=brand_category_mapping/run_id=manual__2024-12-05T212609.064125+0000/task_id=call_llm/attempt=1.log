[2024-12-05T21:26:13.988+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:26:14.001+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:26:09.064125+00:00 [queued]>
[2024-12-05T21:26:14.007+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:26:09.064125+00:00 [queued]>
[2024-12-05T21:26:14.008+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:26:14.021+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:26:09.064125+00:00
[2024-12-05T21:26:14.027+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4181) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:26:14.029+0000] {standard_task_runner.py:72} INFO - Started process 4182 to run task
[2024-12-05T21:26:14.029+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:26:09.064125+00:00', '--job-id', '918', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp9x776i35']
[2024-12-05T21:26:14.031+0000] {standard_task_runner.py:105} INFO - Job 918: Subtask call_llm
[2024-12-05T21:26:14.065+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:26:09.064125+00:00 [running]> on host c7780884450d
[2024-12-05T21:26:14.126+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:26:09.064125+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:26:09.064125+00:00'
[2024-12-05T21:26:14.127+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:26:14.144+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['emily', 'emoji', 'empire', 'emporioarmani', 'ems', 'emsa', 'enchantimals', 'endever', 'energenie', 'energizer', 'energolux', 'energy', 'energybody', 'energybodysystems', 'energysistem', 'enermax', 'engenius', 'engino', 'engy', 'enkor', 'enlightenbrick', 'enough', 'envision', 'enya', 'eolaboratorie'], 'next_index': 1575}
[2024-12-05T21:26:14.144+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:26:14.561+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:26:34.859+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the results of the searches and the assigned categories for each brand:

1. **emily** - apparel, accessories
2. **emoji** - kids, accessories
3. **empire** - furniture, appliances
4. **emporioarmani** - apparel, accessories
5. **ems** - medicine, appliances
6. **emsa** - appliances, country_yard
7. **enchantimals** - kids, accessories
8. **endever** - appliances
9. **energenie** - electronics
10. **energizer** - electronics, appliances
11. **energolux** - appliances
12. **energy** - appliances
13. **energybody** - sport, medicine
14. **energybodysystems** - sport, medicine
15. **energysistem** - electronics
16. **enermax** - electronics
17. **engenius** - electronics
18. **engino** - kids, electronics
19. **engy** - electronics
20. **enkor** - electronics
21. **enlightenbrick** - kids, electronics
22. **enough** - apparel, accessories
23. **envision** - electronics
24. **enya** - apparel
25. **eolaboratorie** - medicine

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('emily', 'apparel'),
    ('emily', 'accessories'),
    ('emoji', 'kids'),
    ('emoji', 'accessories'),
    ('empire', 'furniture'),
    ('empire', 'appliances'),
    ('emporioarmani', 'apparel'),
    ('emporioarmani', 'accessories'),
    ('ems', 'medicine'),
    ('ems', 'appliances'),
    ('emsa', 'appliances'),
    ('emsa', 'country_yard'),
    ('enchantimals', 'kids'),
    ('enchantimals', 'accessories'),
    ('endever', 'appliances'),
    ('energenie', 'electronics'),
    ('energizer', 'electronics'),
    ('energizer', 'appliances'),
    ('energolux', 'appliances'),
    ('energy', 'appliances'),
    ('energybody', 'sport'),
    ('energybody', 'medicine'),
    ('energybodysystems', 'sport'),
    ('energybodysystems', 'medicine'),
    ('energysistem', 'electronics'),
    ('enermax', 'electronics'),
    ('engenius', 'electronics'),
    ('engino', 'kids'),
    ('engino', 'electronics'),
    ('engy', 'electronics'),
    ('enkor', 'electronics'),
    ('enlightenbrick', 'kids'),
    ('enlightenbrick', 'electronics'),
    ('enough', 'apparel'),
    ('enough', 'accessories'),
    ('enya', 'apparel'),
    ('eolaboratorie', 'medicine');
```
[2024-12-05T21:26:34.860+0000] {python.py:240} INFO - Done. Returned value was: Here are the results of the searches and the assigned categories for each brand:

1. **emily** - apparel, accessories
2. **emoji** - kids, accessories
3. **empire** - furniture, appliances
4. **emporioarmani** - apparel, accessories
5. **ems** - medicine, appliances
6. **emsa** - appliances, country_yard
7. **enchantimals** - kids, accessories
8. **endever** - appliances
9. **energenie** - electronics
10. **energizer** - electronics, appliances
11. **energolux** - appliances
12. **energy** - appliances
13. **energybody** - sport, medicine
14. **energybodysystems** - sport, medicine
15. **energysistem** - electronics
16. **enermax** - electronics
17. **engenius** - electronics
18. **engino** - kids, electronics
19. **engy** - electronics
20. **enkor** - electronics
21. **enlightenbrick** - kids, electronics
22. **enough** - apparel, accessories
23. **envision** - electronics
24. **enya** - apparel
25. **eolaboratorie** - medicine

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('emily', 'apparel'),
    ('emily', 'accessories'),
    ('emoji', 'kids'),
    ('emoji', 'accessories'),
    ('empire', 'furniture'),
    ('empire', 'appliances'),
    ('emporioarmani', 'apparel'),
    ('emporioarmani', 'accessories'),
    ('ems', 'medicine'),
    ('ems', 'appliances'),
    ('emsa', 'appliances'),
    ('emsa', 'country_yard'),
    ('enchantimals', 'kids'),
    ('enchantimals', 'accessories'),
    ('endever', 'appliances'),
    ('energenie', 'electronics'),
    ('energizer', 'electronics'),
    ('energizer', 'appliances'),
    ('energolux', 'appliances'),
    ('energy', 'appliances'),
    ('energybody', 'sport'),
    ('energybody', 'medicine'),
    ('energybodysystems', 'sport'),
    ('energybodysystems', 'medicine'),
    ('energysistem', 'electronics'),
    ('enermax', 'electronics'),
    ('engenius', 'electronics'),
    ('engino', 'kids'),
    ('engino', 'electronics'),
    ('engy', 'electronics'),
    ('enkor', 'electronics'),
    ('enlightenbrick', 'kids'),
    ('enlightenbrick', 'electronics'),
    ('enough', 'apparel'),
    ('enough', 'accessories'),
    ('enya', 'apparel'),
    ('eolaboratorie', 'medicine');
```
[2024-12-05T21:26:34.879+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:26:34.880+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:26:09.064125+00:00, execution_date=20241205T212609, start_date=20241205T212614, end_date=20241205T212634
[2024-12-05T21:26:34.931+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:26:34.951+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:26:34.955+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
