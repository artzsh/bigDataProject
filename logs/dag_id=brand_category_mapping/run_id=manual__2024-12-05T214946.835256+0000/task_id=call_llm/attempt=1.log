[2024-12-05T21:49:51.894+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:49:51.907+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:49:46.835256+00:00 [queued]>
[2024-12-05T21:49:51.914+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:49:46.835256+00:00 [queued]>
[2024-12-05T21:49:51.915+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:49:51.928+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:49:46.835256+00:00
[2024-12-05T21:49:51.936+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5413) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:49:51.937+0000] {standard_task_runner.py:72} INFO - Started process 5414 to run task
[2024-12-05T21:49:51.937+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:49:46.835256+00:00', '--job-id', '1182', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpm7wn4m7t']
[2024-12-05T21:49:51.939+0000] {standard_task_runner.py:105} INFO - Job 1182: Subtask call_llm
[2024-12-05T21:49:51.981+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:49:46.835256+00:00 [running]> on host c7780884450d
[2024-12-05T21:49:52.047+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:49:46.835256+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:49:46.835256+00:00'
[2024-12-05T21:49:52.048+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:49:52.067+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['klapp', 'klavuu', 'kleancolor', 'klein', 'klepach.pro', 'klever', 'klima', 'k-lite', 'klorane', 'kloranebebe', 'klx', 'klymit', 'kmk', 'kmz', 'knauf', 'knief', 'kocostar', 'kodak', 'kodi', 'koelf', 'koffer', 'kohala', 'koito', 'kokiri', 'kolag'], 'next_index': 2675}
[2024-12-05T21:49:52.068+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:49:52.527+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:50:15.729+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to the predefined categories based on the search queries:

1. **klapp**: cosmetics, medicine
2. **klavuu**: cosmetics, medicine
3. **kleancolor**: cosmetics, medicine
4. **klein**: tools, construction
5. **klepach.pro**: tools, construction
6. **klever**: electronics, appliances
7. **klima**: appliances, electronics
8. **k-lite**: electronics, appliances
9. **klorane**: cosmetics, medicine
10. **kloranebebe**: cosmetics, medicine
11. **klx**: auto, sport
12. **klymit**: outdoor gear, sport
13. **kmk**: electronics, appliances
14. **kmz**: electronics, appliances
15. **knauf**: construction
16. **knief**: tools, construction
17. **kocostar**: cosmetics, medicine
18. **kodak**: electronics, photography
19. **kodi**: electronics, computers
20. **koelf**: cosmetics, medicine
21. **koffer**: accessories, luggage
22. **kohala**: sport, outdoor gear
23. **koito**: auto, electronics
24. **kokiri**: kids, toys
25. **kolag**: stationery, office supplies

Now, here is the SQL INSERT statement based on the assignments:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('klapp', 'medicine'),
    ('klapp', 'cosmetics'),
    ('klavuu', 'medicine'),
    ('klavuu', 'cosmetics'),
    ('kleancolor', 'medicine'),
    ('kleancolor', 'cosmetics'),
    ('klein', 'construction'),
    ('klepach.pro', 'construction'),
    ('klever', 'electronics'),
    ('klever', 'appliances'),
    ('klima', 'appliances'),
    ('klima', 'electronics'),
    ('k-lite', 'appliances'),
    ('k-lite', 'electronics'),
    ('klorane', 'medicine'),
    ('klorane', 'cosmetics'),
    ('kloranebebe', 'medicine'),
    ('kloranebebe', 'cosmetics'),
    ('klx', 'auto'),
    ('klx', 'sport'),
    ('klymit', 'sport'),
    ('klymit', 'outdoor gear'),
    ('kmk', 'electronics'),
    ('kmk', 'appliances'),
    ('kmz', 'electronics'),
    ('kmz', 'appliances'),
    ('knauf', 'construction'),
    ('knief', 'construction'),
    ('kocostar', 'medicine'),
    ('kocostar', 'cosmetics'),
    ('kodak', 'electronics'),
    ('kodak', 'photography'),
    ('kodi', 'electronics'),
    ('kodi', 'computers'),
    ('koelf', 'medicine'),
    ('koelf', 'cosmetics'),
    ('koffer', 'accessories'),
    ('koffer', 'luggage'),
    ('kohala', 'sport'),
    ('kohala', 'outdoor gear'),
    ('koito', 'auto'),
    ('koito', 'electronics'),
    ('kokiri', 'kids'),
    ('kokiri', 'toys'),
    ('kolag', 'stationery'),
    ('kolag', 'office supplies');
``` 

This SQL statement reflects the assigned categories for each brand based on the research conducted.
[2024-12-05T21:50:15.730+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to the predefined categories based on the search queries:

1. **klapp**: cosmetics, medicine
2. **klavuu**: cosmetics, medicine
3. **kleancolor**: cosmetics, medicine
4. **klein**: tools, construction
5. **klepach.pro**: tools, construction
6. **klever**: electronics, appliances
7. **klima**: appliances, electronics
8. **k-lite**: electronics, appliances
9. **klorane**: cosmetics, medicine
10. **kloranebebe**: cosmetics, medicine
11. **klx**: auto, sport
12. **klymit**: outdoor gear, sport
13. **kmk**: electronics, appliances
14. **kmz**: electronics, appliances
15. **knauf**: construction
16. **knief**: tools, construction
17. **kocostar**: cosmetics, medicine
18. **kodak**: electronics, photography
19. **kodi**: electronics, computers
20. **koelf**: cosmetics, medicine
21. **koffer**: accessories, luggage
22. **kohala**: sport, outdoor gear
23. **koito**: auto, electronics
24. **kokiri**: kids, toys
25. **kolag**: stationery, office supplies

Now, here is the SQL INSERT statement based on the assignments:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('klapp', 'medicine'),
    ('klapp', 'cosmetics'),
    ('klavuu', 'medicine'),
    ('klavuu', 'cosmetics'),
    ('kleancolor', 'medicine'),
    ('kleancolor', 'cosmetics'),
    ('klein', 'construction'),
    ('klepach.pro', 'construction'),
    ('klever', 'electronics'),
    ('klever', 'appliances'),
    ('klima', 'appliances'),
    ('klima', 'electronics'),
    ('k-lite', 'appliances'),
    ('k-lite', 'electronics'),
    ('klorane', 'medicine'),
    ('klorane', 'cosmetics'),
    ('kloranebebe', 'medicine'),
    ('kloranebebe', 'cosmetics'),
    ('klx', 'auto'),
    ('klx', 'sport'),
    ('klymit', 'sport'),
    ('klymit', 'outdoor gear'),
    ('kmk', 'electronics'),
    ('kmk', 'appliances'),
    ('kmz', 'electronics'),
    ('kmz', 'appliances'),
    ('knauf', 'construction'),
    ('knief', 'construction'),
    ('kocostar', 'medicine'),
    ('kocostar', 'cosmetics'),
    ('kodak', 'electronics'),
    ('kodak', 'photography'),
    ('kodi', 'electronics'),
    ('kodi', 'computers'),
    ('koelf', 'medicine'),
    ('koelf', 'cosmetics'),
    ('koffer', 'accessories'),
    ('koffer', 'luggage'),
    ('kohala', 'sport'),
    ('kohala', 'outdoor gear'),
    ('koito', 'auto'),
    ('koito', 'electronics'),
    ('kokiri', 'kids'),
    ('kokiri', 'toys'),
    ('kolag', 'stationery'),
    ('kolag', 'office supplies');
``` 

This SQL statement reflects the assigned categories for each brand based on the research conducted.
[2024-12-05T21:50:15.751+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:50:15.752+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:49:46.835256+00:00, execution_date=20241205T214946, start_date=20241205T214951, end_date=20241205T215015
[2024-12-05T21:50:15.797+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:50:15.817+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:50:15.820+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
