[2024-12-05T21:38:39.998+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:38:40.010+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:38:35.058404+00:00 [queued]>
[2024-12-05T21:38:40.017+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:38:35.058404+00:00 [queued]>
[2024-12-05T21:38:40.017+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:38:40.030+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:38:35.058404+00:00
[2024-12-05T21:38:40.035+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4832) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:38:40.037+0000] {standard_task_runner.py:72} INFO - Started process 4833 to run task
[2024-12-05T21:38:40.037+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:38:35.058404+00:00', '--job-id', '1056', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp9fjzlald']
[2024-12-05T21:38:40.039+0000] {standard_task_runner.py:105} INFO - Job 1056: Subtask call_llm
[2024-12-05T21:38:40.077+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:38:35.058404+00:00 [running]> on host c7780884450d
[2024-12-05T21:38:40.151+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:38:35.058404+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:38:35.058404+00:00'
[2024-12-05T21:38:40.152+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:38:40.173+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['harley-davidson', 'harmankardon', 'haro', 'harp', 'harper', 'harpercollins', 'hartan', 'harte', 'hartung', 'harvia', 'hasbro', 'hasbromylittlepony', 'hatchimals', 'hauck', 'hauptstadtkoffer', 'haushalt', 'hausmann', 'havit', 'hayabusa', 'hayali', 'hayejin', 'hb', 'hde', 'head', 'headrush'], 'next_index': 2150}
[2024-12-05T21:38:40.174+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:38:40.604+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:38:58.693+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the brands mapped to their appropriate categories based on the search queries:

1. **harley-davidson**: auto, apparel
2. **harmankardon**: electronics
3. **haro**: sport, accessories
4. **harp**: musical instruments (not in predefined categories, but could fit under accessories)
5. **harper**: stationery, kids
6. **harpercollins**: stationery
7. **hartan**: kids, apparel (specifically strollers)
8. **harte**: (no specific category found, could fit under apparel)
9. **hartung**: (no specific category found, could fit under furniture)
10. **harvia**: appliances (specifically sauna heaters)
11. **hasbro**: kids, toys (not in predefined categories, but could fit under kids)
12. **hasbromylittlepony**: kids
13. **hatchimals**: kids
14. **hauck**: kids, apparel (specifically baby products)
15. **hauptstadtkoffer**: accessories (luggage)
16. **haushalt**: appliances
17. **hausmann**: furniture
18. **havit**: electronics, computers (peripherals)
19. **hayabusa**: sport, apparel (specifically MMA gear)
20. **hayali**: (no specific category found, could fit under accessories)
21. **hayejin**: (no specific category found, could fit under accessories)
22. **hb**: stationery
23. **hde**: (no specific category found, could fit under electronics)
24. **head**: sport, accessories (specifically sports equipment)
25. **headrush**: apparel, sport (specifically clothing for sports)

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('harley-davidson', 'auto'),
    ('harley-davidson', 'apparel'),
    ('harmankardon', 'electronics'),
    ('haro', 'sport'),
    ('haro', 'accessories'),
    ('harp', 'accessories'),
    ('harper', 'stationery'),
    ('harper', 'kids'),
    ('harpercollins', 'stationery'),
    ('hartan', 'kids'),
    ('hartan', 'apparel'),
    ('harte', 'apparel'),
    ('hartung', 'furniture'),
    ('harvia', 'appliances'),
    ('hasbro', 'kids'),
    ('hasbromylittlepony', 'kids'),
    ('hatchimals', 'kids'),
    ('hauck', 'kids'),
    ('hauck', 'apparel'),
    ('hauptstadtkoffer', 'accessories'),
    ('haushalt', 'appliances'),
    ('hausmann', 'furniture'),
    ('havit', 'electronics'),
    ('havit', 'computers'),
    ('hayabusa', 'sport'),
    ('hayabusa', 'apparel'),
    ('hayali', 'accessories'),
    ('hayejin', 'accessories'),
    ('hb', 'stationery'),
    ('hde', 'electronics'),
    ('head', 'sport'),
    ('head', 'accessories'),
    ('headrush', 'apparel'),
    ('headrush', 'sport');
```

Feel free to ask if you need further assistance or modifications!
[2024-12-05T21:38:58.694+0000] {python.py:240} INFO - Done. Returned value was: Here are the brands mapped to their appropriate categories based on the search queries:

1. **harley-davidson**: auto, apparel
2. **harmankardon**: electronics
3. **haro**: sport, accessories
4. **harp**: musical instruments (not in predefined categories, but could fit under accessories)
5. **harper**: stationery, kids
6. **harpercollins**: stationery
7. **hartan**: kids, apparel (specifically strollers)
8. **harte**: (no specific category found, could fit under apparel)
9. **hartung**: (no specific category found, could fit under furniture)
10. **harvia**: appliances (specifically sauna heaters)
11. **hasbro**: kids, toys (not in predefined categories, but could fit under kids)
12. **hasbromylittlepony**: kids
13. **hatchimals**: kids
14. **hauck**: kids, apparel (specifically baby products)
15. **hauptstadtkoffer**: accessories (luggage)
16. **haushalt**: appliances
17. **hausmann**: furniture
18. **havit**: electronics, computers (peripherals)
19. **hayabusa**: sport, apparel (specifically MMA gear)
20. **hayali**: (no specific category found, could fit under accessories)
21. **hayejin**: (no specific category found, could fit under accessories)
22. **hb**: stationery
23. **hde**: (no specific category found, could fit under electronics)
24. **head**: sport, accessories (specifically sports equipment)
25. **headrush**: apparel, sport (specifically clothing for sports)

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('harley-davidson', 'auto'),
    ('harley-davidson', 'apparel'),
    ('harmankardon', 'electronics'),
    ('haro', 'sport'),
    ('haro', 'accessories'),
    ('harp', 'accessories'),
    ('harper', 'stationery'),
    ('harper', 'kids'),
    ('harpercollins', 'stationery'),
    ('hartan', 'kids'),
    ('hartan', 'apparel'),
    ('harte', 'apparel'),
    ('hartung', 'furniture'),
    ('harvia', 'appliances'),
    ('hasbro', 'kids'),
    ('hasbromylittlepony', 'kids'),
    ('hatchimals', 'kids'),
    ('hauck', 'kids'),
    ('hauck', 'apparel'),
    ('hauptstadtkoffer', 'accessories'),
    ('haushalt', 'appliances'),
    ('hausmann', 'furniture'),
    ('havit', 'electronics'),
    ('havit', 'computers'),
    ('hayabusa', 'sport'),
    ('hayabusa', 'apparel'),
    ('hayali', 'accessories'),
    ('hayejin', 'accessories'),
    ('hb', 'stationery'),
    ('hde', 'electronics'),
    ('head', 'sport'),
    ('head', 'accessories'),
    ('headrush', 'apparel'),
    ('headrush', 'sport');
```

Feel free to ask if you need further assistance or modifications!
[2024-12-05T21:38:58.714+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:38:58.715+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:38:35.058404+00:00, execution_date=20241205T213835, start_date=20241205T213840, end_date=20241205T213858
[2024-12-05T21:38:58.748+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:38:58.767+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:38:58.771+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
