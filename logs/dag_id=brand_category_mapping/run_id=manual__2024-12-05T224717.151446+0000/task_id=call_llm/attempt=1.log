[2024-12-05T22:47:21.769+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:47:21.780+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:47:17.151446+00:00 [queued]>
[2024-12-05T22:47:21.786+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:47:17.151446+00:00 [queued]>
[2024-12-05T22:47:21.786+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:47:21.799+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:47:17.151446+00:00
[2024-12-05T22:47:21.804+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8435) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:47:21.806+0000] {standard_task_runner.py:72} INFO - Started process 8436 to run task
[2024-12-05T22:47:21.806+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:47:17.151446+00:00', '--job-id', '1830', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp31b9rrxr']
[2024-12-05T22:47:21.808+0000] {standard_task_runner.py:105} INFO - Job 1830: Subtask call_llm
[2024-12-05T22:47:21.846+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:47:17.151446+00:00 [running]> on host c7780884450d
[2024-12-05T22:47:21.914+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:47:17.151446+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:47:17.151446+00:00'
[2024-12-05T22:47:21.915+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:47:21.933+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['vipose', 'visage', 'visavis', 'visma', 'visnevyjpapa', 'vissol', 'vista', 'vitacci', 'vitaluce', 'vitamec', 'vitax', 'vitebskiekovry', 'vitek', 'viteks', 'vitelia', 'vitesse', 'vitol', 'vitra', 'vitross', 'vitus', 'viva', 'viviennesabo', 'vivitek', 'vivo', 'vladi'], 'next_index': 5375}
[2024-12-05T22:47:21.933+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:47:22.483+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:47:45.573+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here's the mapping of the provided brands to their respective categories based on the search results and available information:

1. **vipose** - electronics
2. **visage** - cosmetics, apparel
3. **visavis** - apparel, accessories
4. **visma** - electronics, computers
5. **visnevyjpapa** - apparel
6. **vissol** - appliances
7. **vista** - electronics, computers
8. **vitacci** - kids, apparel
9. **vitaluce** - appliances, electronics
10. **vitamec** - medicine
11. **vitax** - medicine, health
12. **vitebskiekovry** - home decor, furniture
13. **vitek** - appliances, electronics
14. **viteks** - appliances, electronics
15. **vitelia** - electronics
16. **vitesse** - auto
17. **vitol** - auto
18. **vitra** - furniture
19. **vitross** - appliances
20. **vitus** - electronics
21. **viva** - stationery
22. **viviennesabo** - apparel, accessories
23. **vivitek** - electronics, computers
24. **vivo** - electronics, computers
25. **vladi** - furniture, home decor

Now, here is the SQL INSERT statement for the brand-category mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('vipose', 'electronics'),
    ('visage', 'apparel'),
    ('visage', 'cosmetics'),
    ('visavis', 'apparel'),
    ('visavis', 'accessories'),
    ('visma', 'electronics'),
    ('visma', 'computers'),
    ('visnevyjpapa', 'apparel'),
    ('vissol', 'appliances'),
    ('vista', 'electronics'),
    ('vista', 'computers'),
    ('vitacci', 'kids'),
    ('vitacci', 'apparel'),
    ('vitaluce', 'appliances'),
    ('vitaluce', 'electronics'),
    ('vitamec', 'medicine'),
    ('vitax', 'medicine'),
    ('vitax', 'health'),
    ('vitebskiekovry', 'home decor'),
    ('vitebskiekovry', 'furniture'),
    ('vitek', 'appliances'),
    ('vitek', 'electronics'),
    ('viteks', 'appliances'),
    ('viteks', 'electronics'),
    ('vitelia', 'electronics'),
    ('vitesse', 'auto'),
    ('vitol', 'auto'),
    ('vitra', 'furniture'),
    ('vitross', 'appliances'),
    ('vitus', 'electronics'),
    ('viva', 'stationery'),
    ('viviennesabo', 'apparel'),
    ('viviennesabo', 'accessories'),
    ('vivitek', 'electronics'),
    ('vivitek', 'computers'),
    ('vivo', 'electronics'),
    ('vivo', 'computers'),
    ('vladi', 'furniture'),
    ('vladi', 'home decor');
```

This statement reflects the categories assigned to each brand based on their product offerings.
[2024-12-05T22:47:45.574+0000] {python.py:240} INFO - Done. Returned value was: Here's the mapping of the provided brands to their respective categories based on the search results and available information:

1. **vipose** - electronics
2. **visage** - cosmetics, apparel
3. **visavis** - apparel, accessories
4. **visma** - electronics, computers
5. **visnevyjpapa** - apparel
6. **vissol** - appliances
7. **vista** - electronics, computers
8. **vitacci** - kids, apparel
9. **vitaluce** - appliances, electronics
10. **vitamec** - medicine
11. **vitax** - medicine, health
12. **vitebskiekovry** - home decor, furniture
13. **vitek** - appliances, electronics
14. **viteks** - appliances, electronics
15. **vitelia** - electronics
16. **vitesse** - auto
17. **vitol** - auto
18. **vitra** - furniture
19. **vitross** - appliances
20. **vitus** - electronics
21. **viva** - stationery
22. **viviennesabo** - apparel, accessories
23. **vivitek** - electronics, computers
24. **vivo** - electronics, computers
25. **vladi** - furniture, home decor

Now, here is the SQL INSERT statement for the brand-category mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('vipose', 'electronics'),
    ('visage', 'apparel'),
    ('visage', 'cosmetics'),
    ('visavis', 'apparel'),
    ('visavis', 'accessories'),
    ('visma', 'electronics'),
    ('visma', 'computers'),
    ('visnevyjpapa', 'apparel'),
    ('vissol', 'appliances'),
    ('vista', 'electronics'),
    ('vista', 'computers'),
    ('vitacci', 'kids'),
    ('vitacci', 'apparel'),
    ('vitaluce', 'appliances'),
    ('vitaluce', 'electronics'),
    ('vitamec', 'medicine'),
    ('vitax', 'medicine'),
    ('vitax', 'health'),
    ('vitebskiekovry', 'home decor'),
    ('vitebskiekovry', 'furniture'),
    ('vitek', 'appliances'),
    ('vitek', 'electronics'),
    ('viteks', 'appliances'),
    ('viteks', 'electronics'),
    ('vitelia', 'electronics'),
    ('vitesse', 'auto'),
    ('vitol', 'auto'),
    ('vitra', 'furniture'),
    ('vitross', 'appliances'),
    ('vitus', 'electronics'),
    ('viva', 'stationery'),
    ('viviennesabo', 'apparel'),
    ('viviennesabo', 'accessories'),
    ('vivitek', 'electronics'),
    ('vivitek', 'computers'),
    ('vivo', 'electronics'),
    ('vivo', 'computers'),
    ('vladi', 'furniture'),
    ('vladi', 'home decor');
```

This statement reflects the categories assigned to each brand based on their product offerings.
[2024-12-05T22:47:45.591+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:47:45.592+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:47:17.151446+00:00, execution_date=20241205T224717, start_date=20241205T224721, end_date=20241205T224745
[2024-12-05T22:47:45.640+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:47:45.658+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:47:45.661+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
