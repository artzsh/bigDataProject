[2024-12-05T22:25:10.734+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:25:10.749+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:25:05.381702+00:00 [queued]>
[2024-12-05T22:25:10.757+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:25:05.381702+00:00 [queued]>
[2024-12-05T22:25:10.758+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:25:10.772+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:25:05.381702+00:00
[2024-12-05T22:25:10.779+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7303) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:25:10.780+0000] {standard_task_runner.py:72} INFO - Started process 7304 to run task
[2024-12-05T22:25:10.781+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:25:05.381702+00:00', '--job-id', '1590', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpz0guuitc']
[2024-12-05T22:25:10.783+0000] {standard_task_runner.py:105} INFO - Job 1590: Subtask call_llm
[2024-12-05T22:25:10.827+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:25:05.381702+00:00 [running]> on host c7780884450d
[2024-12-05T22:25:10.905+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:25:05.381702+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:25:05.381702+00:00'
[2024-12-05T22:25:10.907+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:25:10.928+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['royal', 'royallondon', 'rozenbal', 'r-senda', 'rsp', 'rubelli', 'rubetek', 'rubies', 'rubiks', 'rubineta', 'ruike', 'ruiter', 'ruixinlang', 'rukka', 'runail', 'runwin', 'rusgoldart', 'rush', 'russia', 'ruvill', 'rw', 'ryobi', 'ryor', 'ryzijkot', 'saachi'], 'next_index': 4375}
[2024-12-05T22:25:10.929+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:25:11.385+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:25:31.973+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of the brands to their respective categories based on the search results and reasoning:

1. **royal** - apparel
2. **royallondon** - apparel
3. **rozenbal** - accessories
4. **r-senda** - electronics
5. **rsp** - electronics
6. **rubelli** - furniture
7. **rubetek** - electronics
8. **rubies** - kids
9. **rubiks** - kids
10. **rubineta** - appliances
11. **ruike** - accessories
12. **ruiter** - auto
13. **ruixinlang** - electronics
14. **rukka** - apparel
15. **runail** - accessories
16. **runwin** - electronics
17. **rusgoldart** - accessories
18. **rush** - apparel
19. **russia** - country_yard
20. **ruvill** - appliances
21. **rw** - apparel
22. **ryobi** - appliances
23. **ryor** - medicine
24. **ryzijkot** - stationery
25. **saachi** - appliances

Based on the above mapping, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('royal', 'apparel'),
    ('royallondon', 'apparel'),
    ('rozenbal', 'accessories'),
    ('r-senda', 'electronics'),
    ('rsp', 'electronics'),
    ('rubelli', 'furniture'),
    ('rubetek', 'electronics'),
    ('rubies', 'kids'),
    ('rubiks', 'kids'),
    ('rubineta', 'appliances'),
    ('ruike', 'accessories'),
    ('ruiter', 'auto'),
    ('ruixinlang', 'electronics'),
    ('rukka', 'apparel'),
    ('runail', 'accessories'),
    ('runwin', 'electronics'),
    ('rusgoldart', 'accessories'),
    ('rush', 'apparel'),
    ('russia', 'country_yard'),
    ('ruvill', 'appliances'),
    ('rw', 'apparel'),
    ('ryobi', 'appliances'),
    ('ryor', 'medicine'),
    ('ryzijkot', 'stationery'),
    ('saachi', 'appliances');
```
[2024-12-05T22:25:31.974+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of the brands to their respective categories based on the search results and reasoning:

1. **royal** - apparel
2. **royallondon** - apparel
3. **rozenbal** - accessories
4. **r-senda** - electronics
5. **rsp** - electronics
6. **rubelli** - furniture
7. **rubetek** - electronics
8. **rubies** - kids
9. **rubiks** - kids
10. **rubineta** - appliances
11. **ruike** - accessories
12. **ruiter** - auto
13. **ruixinlang** - electronics
14. **rukka** - apparel
15. **runail** - accessories
16. **runwin** - electronics
17. **rusgoldart** - accessories
18. **rush** - apparel
19. **russia** - country_yard
20. **ruvill** - appliances
21. **rw** - apparel
22. **ryobi** - appliances
23. **ryor** - medicine
24. **ryzijkot** - stationery
25. **saachi** - appliances

Based on the above mapping, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('royal', 'apparel'),
    ('royallondon', 'apparel'),
    ('rozenbal', 'accessories'),
    ('r-senda', 'electronics'),
    ('rsp', 'electronics'),
    ('rubelli', 'furniture'),
    ('rubetek', 'electronics'),
    ('rubies', 'kids'),
    ('rubiks', 'kids'),
    ('rubineta', 'appliances'),
    ('ruike', 'accessories'),
    ('ruiter', 'auto'),
    ('ruixinlang', 'electronics'),
    ('rukka', 'apparel'),
    ('runail', 'accessories'),
    ('runwin', 'electronics'),
    ('rusgoldart', 'accessories'),
    ('rush', 'apparel'),
    ('russia', 'country_yard'),
    ('ruvill', 'appliances'),
    ('rw', 'apparel'),
    ('ryobi', 'appliances'),
    ('ryor', 'medicine'),
    ('ryzijkot', 'stationery'),
    ('saachi', 'appliances');
```
[2024-12-05T22:25:31.995+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:25:31.995+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:25:05.381702+00:00, execution_date=20241205T222505, start_date=20241205T222510, end_date=20241205T222531
[2024-12-05T22:25:32.052+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:25:32.073+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:25:32.076+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
