[2024-12-05T22:52:20.943+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:52:20.959+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:52:16.019618+00:00 [queued]>
[2024-12-05T22:52:20.966+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:52:16.019618+00:00 [queued]>
[2024-12-05T22:52:20.967+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:52:20.981+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:52:16.019618+00:00
[2024-12-05T22:52:20.987+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8708) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:52:20.988+0000] {standard_task_runner.py:72} INFO - Started process 8709 to run task
[2024-12-05T22:52:20.988+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:52:16.019618+00:00', '--job-id', '1890', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp4w1qvl8m']
[2024-12-05T22:52:20.990+0000] {standard_task_runner.py:105} INFO - Job 1890: Subtask call_llm
[2024-12-05T22:52:21.026+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:52:16.019618+00:00 [running]> on host c7780884450d
[2024-12-05T22:52:21.095+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:52:16.019618+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:52:16.019618+00:00'
[2024-12-05T22:52:21.096+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:52:21.113+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['z.a.i.n.', 'zain', 'zajkami', 'zalman', 'zancaster', 'zangavar', 'zanry', 'zanussi', 'zanzoon', 'zapco', 'zapfcreation', 'zappiti', 'zara', 'zarad', 'zarkoperfume', 'zass', 'zazu', 'zebratoys', 'zeetex', 'zegan', 'zegor', 'zelenyjpogruznojnasos', 'zelmer', 'zemex', 'zenecka'], 'next_index': 5625}
[2024-12-05T22:52:21.114+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:52:21.534+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:52:40.290+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the brands provided, here is the mapping of each brand to its appropriate categories:

1. **z.a.i.n.** - apparel
2. **zain** - electronics
3. **zajkami** - kids
4. **zalman** - electronics
5. **zancaster** - electronics
6. **zangavar** - accessories
7. **zanry** - apparel
8. **zanussi** - appliances
9. **zanzoon** - kids
10. **zapco** - electronics
11. **zapfcreation** - kids
12. **zappiti** - electronics
13. **zara** - apparel
14. **zarad** - appliances
15. **zarkoperfume** - accessories
16. **zass** - appliances
17. **zazu** - kids
18. **zebratoys** - kids
19. **zeetex** - auto
20. **zegan** - electronics
21. **zegor** - electronics
22. **zelenyjpogruznojnasos** - construction
23. **zelmer** - appliances
24. **zemex** - construction
25. **zenecka** - apparel

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('z.a.i.n.', 'apparel'),
    ('zain', 'electronics'),
    ('zajkami', 'kids'),
    ('zalman', 'electronics'),
    ('zancaster', 'electronics'),
    ('zangavar', 'accessories'),
    ('zanry', 'apparel'),
    ('zanussi', 'appliances'),
    ('zanzoon', 'kids'),
    ('zapco', 'electronics'),
    ('zapfcreation', 'kids'),
    ('zappiti', 'electronics'),
    ('zara', 'apparel'),
    ('zarad', 'appliances'),
    ('zarkoperfume', 'accessories'),
    ('zass', 'appliances'),
    ('zazu', 'kids'),
    ('zebratoys', 'kids'),
    ('zeetex', 'auto'),
    ('zegan', 'electronics'),
    ('zegor', 'electronics'),
    ('zelenyjpogruznojnasos', 'construction'),
    ('zelmer', 'appliances'),
    ('zemex', 'construction'),
    ('zenecka', 'apparel');
```
[2024-12-05T22:52:40.290+0000] {python.py:240} INFO - Done. Returned value was: Based on the brands provided, here is the mapping of each brand to its appropriate categories:

1. **z.a.i.n.** - apparel
2. **zain** - electronics
3. **zajkami** - kids
4. **zalman** - electronics
5. **zancaster** - electronics
6. **zangavar** - accessories
7. **zanry** - apparel
8. **zanussi** - appliances
9. **zanzoon** - kids
10. **zapco** - electronics
11. **zapfcreation** - kids
12. **zappiti** - electronics
13. **zara** - apparel
14. **zarad** - appliances
15. **zarkoperfume** - accessories
16. **zass** - appliances
17. **zazu** - kids
18. **zebratoys** - kids
19. **zeetex** - auto
20. **zegan** - electronics
21. **zegor** - electronics
22. **zelenyjpogruznojnasos** - construction
23. **zelmer** - appliances
24. **zemex** - construction
25. **zenecka** - apparel

Now, here is the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('z.a.i.n.', 'apparel'),
    ('zain', 'electronics'),
    ('zajkami', 'kids'),
    ('zalman', 'electronics'),
    ('zancaster', 'electronics'),
    ('zangavar', 'accessories'),
    ('zanry', 'apparel'),
    ('zanussi', 'appliances'),
    ('zanzoon', 'kids'),
    ('zapco', 'electronics'),
    ('zapfcreation', 'kids'),
    ('zappiti', 'electronics'),
    ('zara', 'apparel'),
    ('zarad', 'appliances'),
    ('zarkoperfume', 'accessories'),
    ('zass', 'appliances'),
    ('zazu', 'kids'),
    ('zebratoys', 'kids'),
    ('zeetex', 'auto'),
    ('zegan', 'electronics'),
    ('zegor', 'electronics'),
    ('zelenyjpogruznojnasos', 'construction'),
    ('zelmer', 'appliances'),
    ('zemex', 'construction'),
    ('zenecka', 'apparel');
```
[2024-12-05T22:52:40.308+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:52:40.309+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:52:16.019618+00:00, execution_date=20241205T225216, start_date=20241205T225220, end_date=20241205T225240
[2024-12-05T22:52:40.360+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:52:40.376+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:52:40.381+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
