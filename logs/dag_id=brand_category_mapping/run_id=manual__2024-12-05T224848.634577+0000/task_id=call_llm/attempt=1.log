[2024-12-05T22:48:53.844+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:48:53.857+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:48:48.634577+00:00 [queued]>
[2024-12-05T22:48:53.863+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:48:48.634577+00:00 [queued]>
[2024-12-05T22:48:53.864+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:48:53.877+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:48:48.634577+00:00
[2024-12-05T22:48:53.883+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8519) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:48:53.884+0000] {standard_task_runner.py:72} INFO - Started process 8520 to run task
[2024-12-05T22:48:53.884+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:48:48.634577+00:00', '--job-id', '1848', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmppw7y2z9r']
[2024-12-05T22:48:53.886+0000] {standard_task_runner.py:105} INFO - Job 1848: Subtask call_llm
[2024-12-05T22:48:53.923+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:48:48.634577+00:00 [running]> on host c7780884450d
[2024-12-05T22:48:53.986+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:48:48.634577+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:48:48.634577+00:00'
[2024-12-05T22:48:53.987+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:48:54.005+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['warrior', 'waterpik', 'waterrowerclub', 'waterworld', 'wd', 'weber', 'weber-vetonit', 'wedze', 'weekend', 'wehncke', 'weichao', 'weider', 'weifeng', 'weimingzhu', 'weina', 'weissgauff', 'weiste', 'weitai', 'welcos', 'wella', 'wellberg', 'wellborn', 'welldone', 'wellneo', 'welly'], 'next_index': 5450}
[2024-12-05T22:48:54.005+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:48:54.434+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:49:10.597+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the results of the categorization based on the brands provided:

1. **warrior** - sport
2. **waterpik** - appliances, medicine
3. **waterrowerclub** - sport
4. **waterworld** - country_yard
5. **wd** - electronics
6. **weber** - appliances
7. **weber-vetonit** - construction
8. **wedze** - sport
9. **weekend** - apparel
10. **wehncke** - furniture
11. **weichao** - electronics
12. **weider** - sport
13. **weifeng** - accessories
14. **weimingzhu** - apparel
15. **weina** - appliances
16. **weissgauff** - appliances
17. **weiste** - electronics
18. **weitai** - electronics
19. **welcos** - medicine
20. **wella** - medicine, accessories
21. **wellberg** - appliances
22. **wellborn** - furniture
23. **welldone** - appliances
24. **wellneo** - appliances
25. **welly** - kids

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('warrior', 'sport'),
    ('waterpik', 'appliances'),
    ('waterpik', 'medicine'),
    ('waterrowerclub', 'sport'),
    ('waterworld', 'country_yard'),
    ('wd', 'electronics'),
    ('weber', 'appliances'),
    ('weber-vetonit', 'construction'),
    ('wedze', 'sport'),
    ('weekend', 'apparel'),
    ('wehncke', 'furniture'),
    ('weichao', 'electronics'),
    ('weider', 'sport'),
    ('weifeng', 'accessories'),
    ('weimingzhu', 'apparel'),
    ('weina', 'appliances'),
    ('weissgauff', 'appliances'),
    ('weiste', 'electronics'),
    ('weitai', 'electronics'),
    ('welcos', 'medicine'),
    ('wella', 'medicine'),
    ('wella', 'accessories'),
    ('wellberg', 'appliances'),
    ('wellborn', 'furniture'),
    ('welldone', 'appliances'),
    ('wellneo', 'appliances'),
    ('welly', 'kids');
```
[2024-12-05T22:49:10.598+0000] {python.py:240} INFO - Done. Returned value was: Here are the results of the categorization based on the brands provided:

1. **warrior** - sport
2. **waterpik** - appliances, medicine
3. **waterrowerclub** - sport
4. **waterworld** - country_yard
5. **wd** - electronics
6. **weber** - appliances
7. **weber-vetonit** - construction
8. **wedze** - sport
9. **weekend** - apparel
10. **wehncke** - furniture
11. **weichao** - electronics
12. **weider** - sport
13. **weifeng** - accessories
14. **weimingzhu** - apparel
15. **weina** - appliances
16. **weissgauff** - appliances
17. **weiste** - electronics
18. **weitai** - electronics
19. **welcos** - medicine
20. **wella** - medicine, accessories
21. **wellberg** - appliances
22. **wellborn** - furniture
23. **welldone** - appliances
24. **wellneo** - appliances
25. **welly** - kids

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('warrior', 'sport'),
    ('waterpik', 'appliances'),
    ('waterpik', 'medicine'),
    ('waterrowerclub', 'sport'),
    ('waterworld', 'country_yard'),
    ('wd', 'electronics'),
    ('weber', 'appliances'),
    ('weber-vetonit', 'construction'),
    ('wedze', 'sport'),
    ('weekend', 'apparel'),
    ('wehncke', 'furniture'),
    ('weichao', 'electronics'),
    ('weider', 'sport'),
    ('weifeng', 'accessories'),
    ('weimingzhu', 'apparel'),
    ('weina', 'appliances'),
    ('weissgauff', 'appliances'),
    ('weiste', 'electronics'),
    ('weitai', 'electronics'),
    ('welcos', 'medicine'),
    ('wella', 'medicine'),
    ('wella', 'accessories'),
    ('wellberg', 'appliances'),
    ('wellborn', 'furniture'),
    ('welldone', 'appliances'),
    ('wellneo', 'appliances'),
    ('welly', 'kids');
```
[2024-12-05T22:49:10.616+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:49:10.616+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:48:48.634577+00:00, execution_date=20241205T224848, start_date=20241205T224853, end_date=20241205T224910
[2024-12-05T22:49:10.636+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:49:10.655+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:49:10.658+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
