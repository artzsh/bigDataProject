[2024-12-05T21:01:19.950+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:01:19.963+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:01:15.023443+00:00 [queued]>
[2024-12-05T21:01:19.969+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:01:15.023443+00:00 [queued]>
[2024-12-05T21:01:19.969+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:01:19.983+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:01:15.023443+00:00
[2024-12-05T21:01:19.989+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2826) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:01:19.991+0000] {standard_task_runner.py:72} INFO - Started process 2827 to run task
[2024-12-05T21:01:19.991+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:01:15.023443+00:00', '--job-id', '624', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpmtxjo1ze']
[2024-12-05T21:01:19.993+0000] {standard_task_runner.py:105} INFO - Job 624: Subtask call_llm
[2024-12-05T21:01:20.027+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:01:15.023443+00:00 [running]> on host c7780884450d
[2024-12-05T21:01:20.093+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:01:15.023443+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:01:15.023443+00:00'
[2024-12-05T21:01:20.094+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:01:20.113+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['ariete', 'ariston', 'ark', 'arkade', 'arkadia', 'arktika', 'arlem', 'armada', 'armaf', 'armand', 'armandbasi', 'armani', 'armatech', 'armateh', 'armmedia', 'arms', 'armytek', 'arnica', 'arno', 'aromika', 'aromir', 'arrivo', 'arsi', 'arstisa', 'artberry'], 'next_index': 350}
[2024-12-05T21:01:20.113+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:01:20.543+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:01:36.076+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of each brand to its respective categories based on the search results:

1. **ariete**: appliances
2. **ariston**: appliances
3. **ark**: apparel
4. **arkade**: apparel
5. **arkadia**: apparel
6. **arktika**: apparel
7. **arlem**: apparel
8. **armada**: apparel
9. **armaf**: accessories
10. **armand**: apparel
11. **armandbasi**: apparel
12. **armani**: apparel, accessories
13. **armatech**: electronics
14. **armateh**: electronics
15. **armmedia**: electronics
16. **arms**: accessories
17. **armytek**: electronics
18. **arnica**: medicine
19. **arno**: furniture
20. **aromika**: medicine
21. **aromir**: medicine
22. **arrivo**: electronics
23. **arsi**: electronics
24. **arstisa**: furniture
25. **artberry**: kids, stationery

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ariete', 'appliances'),
    ('ariston', 'appliances'),
    ('ark', 'apparel'),
    ('arkade', 'apparel'),
    ('arkadia', 'apparel'),
    ('arktika', 'apparel'),
    ('arlem', 'apparel'),
    ('armada', 'apparel'),
    ('armaf', 'accessories'),
    ('armand', 'apparel'),
    ('armandbasi', 'apparel'),
    ('armani', 'apparel'),
    ('armani', 'accessories'),
    ('armatech', 'electronics'),
    ('armateh', 'electronics'),
    ('armmedia', 'electronics'),
    ('arms', 'accessories'),
    ('armytek', 'electronics'),
    ('arnica', 'medicine'),
    ('arno', 'furniture'),
    ('aromika', 'medicine'),
    ('aromir', 'medicine'),
    ('arrivo', 'electronics'),
    ('arsi', 'electronics'),
    ('arstisa', 'furniture'),
    ('artberry', 'kids'),
    ('artberry', 'stationery');
```
[2024-12-05T21:01:36.076+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of each brand to its respective categories based on the search results:

1. **ariete**: appliances
2. **ariston**: appliances
3. **ark**: apparel
4. **arkade**: apparel
5. **arkadia**: apparel
6. **arktika**: apparel
7. **arlem**: apparel
8. **armada**: apparel
9. **armaf**: accessories
10. **armand**: apparel
11. **armandbasi**: apparel
12. **armani**: apparel, accessories
13. **armatech**: electronics
14. **armateh**: electronics
15. **armmedia**: electronics
16. **arms**: accessories
17. **armytek**: electronics
18. **arnica**: medicine
19. **arno**: furniture
20. **aromika**: medicine
21. **aromir**: medicine
22. **arrivo**: electronics
23. **arsi**: electronics
24. **arstisa**: furniture
25. **artberry**: kids, stationery

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ariete', 'appliances'),
    ('ariston', 'appliances'),
    ('ark', 'apparel'),
    ('arkade', 'apparel'),
    ('arkadia', 'apparel'),
    ('arktika', 'apparel'),
    ('arlem', 'apparel'),
    ('armada', 'apparel'),
    ('armaf', 'accessories'),
    ('armand', 'apparel'),
    ('armandbasi', 'apparel'),
    ('armani', 'apparel'),
    ('armani', 'accessories'),
    ('armatech', 'electronics'),
    ('armateh', 'electronics'),
    ('armmedia', 'electronics'),
    ('arms', 'accessories'),
    ('armytek', 'electronics'),
    ('arnica', 'medicine'),
    ('arno', 'furniture'),
    ('aromika', 'medicine'),
    ('aromir', 'medicine'),
    ('arrivo', 'electronics'),
    ('arsi', 'electronics'),
    ('arstisa', 'furniture'),
    ('artberry', 'kids'),
    ('artberry', 'stationery');
```
[2024-12-05T21:01:36.096+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:01:36.097+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:01:15.023443+00:00, execution_date=20241205T210115, start_date=20241205T210119, end_date=20241205T210136
[2024-12-05T21:01:36.132+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:01:36.165+0000] {taskinstance.py:3895} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:01:36.170+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
