[2024-12-05T21:17:15.387+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:17:15.400+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:17:10.785658+00:00 [queued]>
[2024-12-05T21:17:15.407+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:17:10.785658+00:00 [queued]>
[2024-12-05T21:17:15.408+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:17:15.422+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:17:10.785658+00:00
[2024-12-05T21:17:15.428+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3691) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:17:15.429+0000] {standard_task_runner.py:72} INFO - Started process 3692 to run task
[2024-12-05T21:17:15.430+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:17:10.785658+00:00', '--job-id', '810', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp6pjmf5rx']
[2024-12-05T21:17:15.432+0000] {standard_task_runner.py:105} INFO - Job 810: Subtask call_llm
[2024-12-05T21:17:15.473+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:17:10.785658+00:00 [running]> on host c7780884450d
[2024-12-05T21:17:15.548+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:17:10.785658+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:17:10.785658+00:00'
[2024-12-05T21:17:15.549+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:17:15.566+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['condor', 'condtrol', 'conductor', 'confetti', 'constantdelight', 'conte', 'conteelegant', 'continent', 'continental', 'contour', 'converse', 'coolbaby', 'coolermaster', 'coolfort', 'coolinar', 'coolmaker', 'coolmaster', 'cooperhunter', 'coopervision', 'cordial', 'cordiant', 'cornerstone', 'corps', 'corpus', 'corsair'], 'next_index': 1125}
[2024-12-05T21:17:15.567+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:17:15.999+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:17:34.871+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the brands mapped to their respective categories based on the search queries:

1. **condor**: apparel
2. **condtrol**: electronics
3. **conductor**: electronics
4. **confetti**: stationery, kids
5. **constantdelight**: food (not in predefined categories, but could fit under appliances)
6. **conte**: stationery
7. **conteelegant**: apparel
8. **continent**: appliances (general home goods)
9. **continental**: appliances, auto
10. **contour**: electronics, accessories
11. **converse**: apparel, sport
12. **coolbaby**: kids
13. **coolermaster**: computers, electronics
14. **coolfort**: appliances
15. **coolinar**: appliances
16. **coolmaker**: kids
17. **coolmaster**: electronics
18. **cooperhunter**: appliances
19. **coopervision**: medicine
20. **cordial**: food (not in predefined categories, but could fit under appliances)
21. **cordiant**: auto
22. **cornerstone**: construction
23. **corps**: construction
24. **corpus**: electronics
25. **corsair**: computers, electronics

Now, here's the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('condor', 'apparel'),
    ('condtrol', 'electronics'),
    ('conductor', 'electronics'),
    ('confetti', 'stationery'),
    ('confetti', 'kids'),
    ('constantdelight', 'appliances'),
    ('conte', 'stationery'),
    ('conteelegant', 'apparel'),
    ('continent', 'appliances'),
    ('continental', 'appliances'),
    ('continental', 'auto'),
    ('contour', 'electronics'),
    ('contour', 'accessories'),
    ('converse', 'apparel'),
    ('converse', 'sport'),
    ('coolbaby', 'kids'),
    ('coolermaster', 'computers'),
    ('coolermaster', 'electronics'),
    ('coolfort', 'appliances'),
    ('coolinar', 'appliances'),
    ('coolmaker', 'kids'),
    ('coolmaster', 'electronics'),
    ('cooperhunter', 'appliances'),
    ('coopervision', 'medicine'),
    ('cordial', 'appliances'),
    ('cordiant', 'auto'),
    ('cornerstone', 'construction'),
    ('corps', 'construction'),
    ('corpus', 'electronics'),
    ('corsair', 'computers'),
    ('corsair', 'electronics');
```
[2024-12-05T21:17:34.872+0000] {python.py:240} INFO - Done. Returned value was: Here are the brands mapped to their respective categories based on the search queries:

1. **condor**: apparel
2. **condtrol**: electronics
3. **conductor**: electronics
4. **confetti**: stationery, kids
5. **constantdelight**: food (not in predefined categories, but could fit under appliances)
6. **conte**: stationery
7. **conteelegant**: apparel
8. **continent**: appliances (general home goods)
9. **continental**: appliances, auto
10. **contour**: electronics, accessories
11. **converse**: apparel, sport
12. **coolbaby**: kids
13. **coolermaster**: computers, electronics
14. **coolfort**: appliances
15. **coolinar**: appliances
16. **coolmaker**: kids
17. **coolmaster**: electronics
18. **cooperhunter**: appliances
19. **coopervision**: medicine
20. **cordial**: food (not in predefined categories, but could fit under appliances)
21. **cordiant**: auto
22. **cornerstone**: construction
23. **corps**: construction
24. **corpus**: electronics
25. **corsair**: computers, electronics

Now, here's the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('condor', 'apparel'),
    ('condtrol', 'electronics'),
    ('conductor', 'electronics'),
    ('confetti', 'stationery'),
    ('confetti', 'kids'),
    ('constantdelight', 'appliances'),
    ('conte', 'stationery'),
    ('conteelegant', 'apparel'),
    ('continent', 'appliances'),
    ('continental', 'appliances'),
    ('continental', 'auto'),
    ('contour', 'electronics'),
    ('contour', 'accessories'),
    ('converse', 'apparel'),
    ('converse', 'sport'),
    ('coolbaby', 'kids'),
    ('coolermaster', 'computers'),
    ('coolermaster', 'electronics'),
    ('coolfort', 'appliances'),
    ('coolinar', 'appliances'),
    ('coolmaker', 'kids'),
    ('coolmaster', 'electronics'),
    ('cooperhunter', 'appliances'),
    ('coopervision', 'medicine'),
    ('cordial', 'appliances'),
    ('cordiant', 'auto'),
    ('cornerstone', 'construction'),
    ('corps', 'construction'),
    ('corpus', 'electronics'),
    ('corsair', 'computers'),
    ('corsair', 'electronics');
```
[2024-12-05T21:17:34.891+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:17:34.892+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:17:10.785658+00:00, execution_date=20241205T211710, start_date=20241205T211715, end_date=20241205T211734
[2024-12-05T21:17:34.945+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:17:34.962+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:17:34.966+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
