[2024-12-05T21:03:20.120+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:03:20.134+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:03:14.220828+00:00 [queued]>
[2024-12-05T21:03:20.142+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:03:14.220828+00:00 [queued]>
[2024-12-05T21:03:20.143+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:03:20.158+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:03:14.220828+00:00
[2024-12-05T21:03:20.165+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2938) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:03:20.167+0000] {standard_task_runner.py:72} INFO - Started process 2939 to run task
[2024-12-05T21:03:20.167+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:03:14.220828+00:00', '--job-id', '648', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp5wy4a8oe']
[2024-12-05T21:03:20.169+0000] {standard_task_runner.py:105} INFO - Job 648: Subtask call_llm
[2024-12-05T21:03:20.207+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:03:14.220828+00:00 [running]> on host c7780884450d
[2024-12-05T21:03:20.274+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:03:14.220828+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:03:14.220828+00:00'
[2024-12-05T21:03:20.275+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:03:20.293+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['author', 'autojet', 'autoline', 'autolite', 'autopower', 'autoprofi', 'autotime', 'autovirazh', 'aux', 'ava', 'avalon', 'avaloncarpet', 'avanta', 'avatar', 'avel', 'avene', 'avengers', 'avent', 'avermedia', 'avid', 'avina', 'avionaut', 'avis', 'aviselectronics', 'avitron'], 'next_index': 450}
[2024-12-05T21:03:20.294+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:03:20.732+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:03:40.706+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories based on the brands provided:

1. **author**: stationery
2. **autojet**: auto
3. **autoline**: auto
4. **autolite**: auto
5. **autopower**: auto
6. **autoprofi**: auto
7. **autotime**: auto
8. **autovirazh**: auto
9. **aux**: electronics
10. **ava**: medicine
11. **avalon**: furniture
12. **avaloncarpet**: furniture
13. **avanta**: furniture
14. **avatar**: electronics
15. **avel**: electronics
16. **avene**: medicine
17. **avengers**: kids, apparel
18. **avent**: kids, medicine
19. **avermedia**: electronics
20. **avid**: electronics
21. **avina**: medicine
22. **avionaut**: auto
23. **avis**: auto
24. **aviselectronics**: electronics
25. **avitron**: electronics

Now, here is the SQL INSERT statement for the brand-category mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('author', 'stationery'),
    ('autojet', 'auto'),
    ('autoline', 'auto'),
    ('autolite', 'auto'),
    ('autopower', 'auto'),
    ('autoprofi', 'auto'),
    ('autotime', 'auto'),
    ('autovirazh', 'auto'),
    ('aux', 'electronics'),
    ('ava', 'medicine'),
    ('avalon', 'furniture'),
    ('avaloncarpet', 'furniture'),
    ('avanta', 'furniture'),
    ('avatar', 'electronics'),
    ('avel', 'electronics'),
    ('avene', 'medicine'),
    ('avengers', 'kids'),
    ('avengers', 'apparel'),
    ('avent', 'kids'),
    ('avent', 'medicine'),
    ('avermedia', 'electronics'),
    ('avid', 'electronics'),
    ('avina', 'medicine'),
    ('avionaut', 'auto'),
    ('avis', 'auto'),
    ('aviselectronics', 'electronics'),
    ('avitron', 'electronics');
```
[2024-12-05T21:03:40.707+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories based on the brands provided:

1. **author**: stationery
2. **autojet**: auto
3. **autoline**: auto
4. **autolite**: auto
5. **autopower**: auto
6. **autoprofi**: auto
7. **autotime**: auto
8. **autovirazh**: auto
9. **aux**: electronics
10. **ava**: medicine
11. **avalon**: furniture
12. **avaloncarpet**: furniture
13. **avanta**: furniture
14. **avatar**: electronics
15. **avel**: electronics
16. **avene**: medicine
17. **avengers**: kids, apparel
18. **avent**: kids, medicine
19. **avermedia**: electronics
20. **avid**: electronics
21. **avina**: medicine
22. **avionaut**: auto
23. **avis**: auto
24. **aviselectronics**: electronics
25. **avitron**: electronics

Now, here is the SQL INSERT statement for the brand-category mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('author', 'stationery'),
    ('autojet', 'auto'),
    ('autoline', 'auto'),
    ('autolite', 'auto'),
    ('autopower', 'auto'),
    ('autoprofi', 'auto'),
    ('autotime', 'auto'),
    ('autovirazh', 'auto'),
    ('aux', 'electronics'),
    ('ava', 'medicine'),
    ('avalon', 'furniture'),
    ('avaloncarpet', 'furniture'),
    ('avanta', 'furniture'),
    ('avatar', 'electronics'),
    ('avel', 'electronics'),
    ('avene', 'medicine'),
    ('avengers', 'kids'),
    ('avengers', 'apparel'),
    ('avent', 'kids'),
    ('avent', 'medicine'),
    ('avermedia', 'electronics'),
    ('avid', 'electronics'),
    ('avina', 'medicine'),
    ('avionaut', 'auto'),
    ('avis', 'auto'),
    ('aviselectronics', 'electronics'),
    ('avitron', 'electronics');
```
[2024-12-05T21:03:40.726+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:03:40.727+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:03:14.220828+00:00, execution_date=20241205T210314, start_date=20241205T210320, end_date=20241205T210340
[2024-12-05T21:03:40.764+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:03:40.782+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:03:40.785+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
