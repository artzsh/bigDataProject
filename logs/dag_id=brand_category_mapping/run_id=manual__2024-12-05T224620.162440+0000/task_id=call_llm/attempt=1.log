[2024-12-05T22:46:24.939+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:46:24.951+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:46:20.162440+00:00 [queued]>
[2024-12-05T22:46:24.958+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:46:20.162440+00:00 [queued]>
[2024-12-05T22:46:24.959+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:46:24.971+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:46:20.162440+00:00
[2024-12-05T22:46:24.977+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8379) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:46:24.979+0000] {standard_task_runner.py:72} INFO - Started process 8380 to run task
[2024-12-05T22:46:24.979+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:46:20.162440+00:00', '--job-id', '1818', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpqa6te6bi']
[2024-12-05T22:46:24.980+0000] {standard_task_runner.py:105} INFO - Job 1818: Subtask call_llm
[2024-12-05T22:46:25.017+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:46:20.162440+00:00 [running]> on host c7780884450d
[2024-12-05T22:46:25.083+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:46:20.162440+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:46:20.162440+00:00'
[2024-12-05T22:46:25.084+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:46:25.102+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['verloni', 'vernel', 'verossa', 'verran', 'versace', 'versal', 'versale', 'versus', 'vertex', 'ves', 'vesna', 'vesta', 'vestel', 'veston', 'veurne', 'vgp', 'vgr', 'vgs', 'vialata', 'viatti', 'vibe', 'vibram', 'vicalina', 'vichy', 'vicovation'], 'next_index': 5325}
[2024-12-05T22:46:25.103+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:46:25.530+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:46:44.594+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on the search results:

1. **verloni**: appliances
2. **vernel**: appliances
3. **verossa**: apparel
4. **verran**: apparel
5. **versace**: apparel, accessories
6. **versal**: appliances
7. **versale**: apparel
8. **versus**: apparel, accessories
9. **vertex**: electronics
10. **ves**: apparel
11. **vesna**: apparel
12. **vesta**: apparel
13. **vestel**: appliances, electronics
14. **veston**: apparel
15. **veurne**: apparel
16. **vgp**: construction
17. **vgr**: electronics
18. **vgs**: electronics
19. **vialata**: auto
20. **viatti**: auto
21. **vibe**: electronics
22. **vibram**: apparel, accessories
23. **vicalina**: medicine
24. **vichy**: medicine
25. **vicovation**: electronics

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('verloni', 'appliances'),
    ('vernel', 'appliances'),
    ('verossa', 'apparel'),
    ('verran', 'apparel'),
    ('versace', 'apparel'),
    ('versace', 'accessories'),
    ('versal', 'appliances'),
    ('versale', 'apparel'),
    ('versus', 'apparel'),
    ('versus', 'accessories'),
    ('vertex', 'electronics'),
    ('ves', 'apparel'),
    ('vesna', 'apparel'),
    ('vesta', 'apparel'),
    ('vestel', 'appliances'),
    ('vestel', 'electronics'),
    ('veston', 'apparel'),
    ('veurne', 'apparel'),
    ('vgp', 'construction'),
    ('vgr', 'electronics'),
    ('vgs', 'electronics'),
    ('vialata', 'auto'),
    ('viatti', 'auto'),
    ('vibe', 'electronics'),
    ('vibram', 'apparel'),
    ('vibram', 'accessories'),
    ('vicalina', 'medicine'),
    ('vichy', 'medicine'),
    ('vicovation', 'electronics');
```
[2024-12-05T22:46:44.594+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on the search results:

1. **verloni**: appliances
2. **vernel**: appliances
3. **verossa**: apparel
4. **verran**: apparel
5. **versace**: apparel, accessories
6. **versal**: appliances
7. **versale**: apparel
8. **versus**: apparel, accessories
9. **vertex**: electronics
10. **ves**: apparel
11. **vesna**: apparel
12. **vesta**: apparel
13. **vestel**: appliances, electronics
14. **veston**: apparel
15. **veurne**: apparel
16. **vgp**: construction
17. **vgr**: electronics
18. **vgs**: electronics
19. **vialata**: auto
20. **viatti**: auto
21. **vibe**: electronics
22. **vibram**: apparel, accessories
23. **vicalina**: medicine
24. **vichy**: medicine
25. **vicovation**: electronics

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('verloni', 'appliances'),
    ('vernel', 'appliances'),
    ('verossa', 'apparel'),
    ('verran', 'apparel'),
    ('versace', 'apparel'),
    ('versace', 'accessories'),
    ('versal', 'appliances'),
    ('versale', 'apparel'),
    ('versus', 'apparel'),
    ('versus', 'accessories'),
    ('vertex', 'electronics'),
    ('ves', 'apparel'),
    ('vesna', 'apparel'),
    ('vesta', 'apparel'),
    ('vestel', 'appliances'),
    ('vestel', 'electronics'),
    ('veston', 'apparel'),
    ('veurne', 'apparel'),
    ('vgp', 'construction'),
    ('vgr', 'electronics'),
    ('vgs', 'electronics'),
    ('vialata', 'auto'),
    ('viatti', 'auto'),
    ('vibe', 'electronics'),
    ('vibram', 'apparel'),
    ('vibram', 'accessories'),
    ('vicalina', 'medicine'),
    ('vichy', 'medicine'),
    ('vicovation', 'electronics');
```
[2024-12-05T22:46:44.613+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:46:44.614+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:46:20.162440+00:00, execution_date=20241205T224620, start_date=20241205T224624, end_date=20241205T224644
[2024-12-05T22:46:44.656+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:46:44.678+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:46:44.681+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
