[2024-12-05T21:15:52.585+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:15:52.598+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:15:47.474086+00:00 [queued]>
[2024-12-05T21:15:52.604+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:15:47.474086+00:00 [queued]>
[2024-12-05T21:15:52.605+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:15:52.618+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:15:47.474086+00:00
[2024-12-05T21:15:52.624+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3607) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:15:52.627+0000] {standard_task_runner.py:72} INFO - Started process 3608 to run task
[2024-12-05T21:15:52.627+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:15:47.474086+00:00', '--job-id', '792', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpa4z8z25r']
[2024-12-05T21:15:52.631+0000] {standard_task_runner.py:105} INFO - Job 792: Subtask call_llm
[2024-12-05T21:15:52.709+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:15:47.474086+00:00 [running]> on host c7780884450d
[2024-12-05T21:15:52.816+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:15:47.474086+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:15:47.474086+00:00'
[2024-12-05T21:15:52.817+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:15:52.835+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['cikoo', 'cilek', 'cilia', 'cillit', 'cime', 'cinemood', 'circle', 'cisco', 'citilux', 'citizen', 'citycolor', 'cityrover', 'cityup', 'clanfrancoferre', 'clarion', 'clariss', 'classen', 'clasy', 'clatronic', 'claudebernard', 'claudedozorme', 'clevan', 'clever', 'clevercompany', 'cliff'], 'next_index': 1050}
[2024-12-05T21:15:52.836+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:15:53.270+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:16:06.915+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on their products:

1. **cikoo** - kids
2. **cilek** - furniture, kids
3. **cilia** - furniture
4. **cillit** - appliances
5. **cime** - appliances
6. **cinemood** - electronics
7. **circle** - electronics
8. **cisco** - computers, electronics
9. **citilux** - appliances, electronics
10. **citizen** - accessories, electronics
11. **citycolor** - cosmetics (not in provided categories, but can be considered under accessories)
12. **cityrover** - auto
13. **cityup** - auto
14. **clanfrancoferre** - apparel, accessories
15. **clarion** - electronics, auto
16. **clariss** - apparel
17. **classen** - construction, furniture
18. **clasy** - appliances
19. **clatronic** - appliances
20. **claudebernard** - accessories
21. **claudedozorme** - accessories
22. **clevan** - electronics
23. **clever** - appliances
24. **clevercompany** - appliances, kids
25. **cliff** - apparel

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('cikoo', 'kids'),
    ('cilek', 'furniture'),
    ('cilek', 'kids'),
    ('cilia', 'furniture'),
    ('cillit', 'appliances'),
    ('cime', 'appliances'),
    ('cinemood', 'electronics'),
    ('circle', 'electronics'),
    ('cisco', 'computers'),
    ('cisco', 'electronics'),
    ('citilux', 'appliances'),
    ('citilux', 'electronics'),
    ('citizen', 'accessories'),
    ('citizen', 'electronics'),
    ('citycolor', 'accessories'),
    ('cityrover', 'auto'),
    ('cityup', 'auto'),
    ('clanfrancoferre', 'apparel'),
    ('clanfrancoferre', 'accessories'),
    ('clarion', 'electronics'),
    ('clarion', 'auto'),
    ('clariss', 'apparel'),
    ('classen', 'construction'),
    ('classen', 'furniture'),
    ('clasy', 'appliances'),
    ('clatronic', 'appliances'),
    ('claudebernard', 'accessories'),
    ('claudedozorme', 'accessories'),
    ('clevan', 'electronics'),
    ('clever', 'appliances'),
    ('clevercompany', 'appliances'),
    ('clevercompany', 'kids'),
    ('cliff', 'apparel');
```
[2024-12-05T21:16:06.915+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on their products:

1. **cikoo** - kids
2. **cilek** - furniture, kids
3. **cilia** - furniture
4. **cillit** - appliances
5. **cime** - appliances
6. **cinemood** - electronics
7. **circle** - electronics
8. **cisco** - computers, electronics
9. **citilux** - appliances, electronics
10. **citizen** - accessories, electronics
11. **citycolor** - cosmetics (not in provided categories, but can be considered under accessories)
12. **cityrover** - auto
13. **cityup** - auto
14. **clanfrancoferre** - apparel, accessories
15. **clarion** - electronics, auto
16. **clariss** - apparel
17. **classen** - construction, furniture
18. **clasy** - appliances
19. **clatronic** - appliances
20. **claudebernard** - accessories
21. **claudedozorme** - accessories
22. **clevan** - electronics
23. **clever** - appliances
24. **clevercompany** - appliances, kids
25. **cliff** - apparel

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('cikoo', 'kids'),
    ('cilek', 'furniture'),
    ('cilek', 'kids'),
    ('cilia', 'furniture'),
    ('cillit', 'appliances'),
    ('cime', 'appliances'),
    ('cinemood', 'electronics'),
    ('circle', 'electronics'),
    ('cisco', 'computers'),
    ('cisco', 'electronics'),
    ('citilux', 'appliances'),
    ('citilux', 'electronics'),
    ('citizen', 'accessories'),
    ('citizen', 'electronics'),
    ('citycolor', 'accessories'),
    ('cityrover', 'auto'),
    ('cityup', 'auto'),
    ('clanfrancoferre', 'apparel'),
    ('clanfrancoferre', 'accessories'),
    ('clarion', 'electronics'),
    ('clarion', 'auto'),
    ('clariss', 'apparel'),
    ('classen', 'construction'),
    ('classen', 'furniture'),
    ('clasy', 'appliances'),
    ('clatronic', 'appliances'),
    ('claudebernard', 'accessories'),
    ('claudedozorme', 'accessories'),
    ('clevan', 'electronics'),
    ('clever', 'appliances'),
    ('clevercompany', 'appliances'),
    ('clevercompany', 'kids'),
    ('cliff', 'apparel');
```
[2024-12-05T21:16:06.935+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:16:06.936+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:15:47.474086+00:00, execution_date=20241205T211547, start_date=20241205T211552, end_date=20241205T211606
[2024-12-05T21:16:06.988+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:16:07.003+0000] {taskinstance.py:3895} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:16:07.007+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
