[2024-12-05T21:37:13.297+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:37:13.312+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:37:07.445945+00:00 [queued]>
[2024-12-05T21:37:13.319+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:37:07.445945+00:00 [queued]>
[2024-12-05T21:37:13.319+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:37:13.335+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:37:07.445945+00:00
[2024-12-05T21:37:13.344+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4769) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:37:13.346+0000] {standard_task_runner.py:72} INFO - Started process 4770 to run task
[2024-12-05T21:37:13.346+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:37:07.445945+00:00', '--job-id', '1044', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpc8z9bf4y']
[2024-12-05T21:37:13.348+0000] {standard_task_runner.py:105} INFO - Job 1044: Subtask call_llm
[2024-12-05T21:37:13.388+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:37:07.445945+00:00 [running]> on host c7780884450d
[2024-12-05T21:37:13.460+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:37:07.445945+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:37:07.445945+00:00'
[2024-12-05T21:37:13.461+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:37:13.480+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['gucci', 'gudi', 'guerisson', 'guerlain', 'guerlainlapetiterob', 'guess', 'gula', 'guliver', 'gulliver', 'gumarnyzubri', 'gungho', 'gustavsberg', 'gutrend', 'guzzini', 'habilead', 'hachette', 'hada', 'hadaa', 'hadarrosen', 'haday', 'haeger', 'hagen', 'haier', 'hairdorables', 'haken'], 'next_index': 2100}
[2024-12-05T21:37:13.481+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:37:13.902+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:37:53.900+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **gucci**: apparel, accessories
2. **gudi**: kids
3. **guerisson**: medicine, cosmetics
4. **guerlain**: cosmetics, medicine
5. **guerlainlapetiterob**: cosmetics
6. **guess**: apparel, accessories
7. **gula**: appliances
8. **guliver**: kids
9. **gulliver**: kids
10. **gumarnyzubri**: medicine
11. **gungho**: apparel
12. **gustavsberg**: appliances, furniture
13. **gutrend**: appliances
14. **guzzini**: appliances, accessories
15. **habilead**: stationery
16. **hachette**: stationery
17. **hada**: cosmetics
18. **hadaa**: cosmetics
19. **hadarrosen**: apparel
20. **haday**: appliances
21. **haeger**: appliances
22. **hagen**: appliances
23. **haier**: appliances
24. **hairdorables**: kids
25. **haken**: stationery

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('gucci', 'apparel'),
    ('gucci', 'accessories'),
    ('gudi', 'kids'),
    ('guerisson', 'medicine'),
    ('guerisson', 'cosmetics'),
    ('guerlain', 'cosmetics'),
    ('guerlain', 'medicine'),
    ('guerlainlapetiterob', 'cosmetics'),
    ('guess', 'apparel'),
    ('guess', 'accessories'),
    ('gula', 'appliances'),
    ('guliver', 'kids'),
    ('gulliver', 'kids'),
    ('gumarnyzubri', 'medicine'),
    ('gungho', 'apparel'),
    ('gustavsberg', 'appliances'),
    ('gustavsberg', 'furniture'),
    ('gutrend', 'appliances'),
    ('guzzini', 'appliances'),
    ('guzzini', 'accessories'),
    ('habilead', 'stationery'),
    ('hachette', 'stationery'),
    ('hada', 'cosmetics'),
    ('hadaa', 'cosmetics'),
    ('hadarrosen', 'apparel'),
    ('haday', 'appliances'),
    ('haeger', 'appliances'),
    ('hagen', 'appliances'),
    ('haier', 'appliances'),
    ('hairdorables', 'kids'),
    ('haken', 'stationery');
```
[2024-12-05T21:37:53.900+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **gucci**: apparel, accessories
2. **gudi**: kids
3. **guerisson**: medicine, cosmetics
4. **guerlain**: cosmetics, medicine
5. **guerlainlapetiterob**: cosmetics
6. **guess**: apparel, accessories
7. **gula**: appliances
8. **guliver**: kids
9. **gulliver**: kids
10. **gumarnyzubri**: medicine
11. **gungho**: apparel
12. **gustavsberg**: appliances, furniture
13. **gutrend**: appliances
14. **guzzini**: appliances, accessories
15. **habilead**: stationery
16. **hachette**: stationery
17. **hada**: cosmetics
18. **hadaa**: cosmetics
19. **hadarrosen**: apparel
20. **haday**: appliances
21. **haeger**: appliances
22. **hagen**: appliances
23. **haier**: appliances
24. **hairdorables**: kids
25. **haken**: stationery

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('gucci', 'apparel'),
    ('gucci', 'accessories'),
    ('gudi', 'kids'),
    ('guerisson', 'medicine'),
    ('guerisson', 'cosmetics'),
    ('guerlain', 'cosmetics'),
    ('guerlain', 'medicine'),
    ('guerlainlapetiterob', 'cosmetics'),
    ('guess', 'apparel'),
    ('guess', 'accessories'),
    ('gula', 'appliances'),
    ('guliver', 'kids'),
    ('gulliver', 'kids'),
    ('gumarnyzubri', 'medicine'),
    ('gungho', 'apparel'),
    ('gustavsberg', 'appliances'),
    ('gustavsberg', 'furniture'),
    ('gutrend', 'appliances'),
    ('guzzini', 'appliances'),
    ('guzzini', 'accessories'),
    ('habilead', 'stationery'),
    ('hachette', 'stationery'),
    ('hada', 'cosmetics'),
    ('hadaa', 'cosmetics'),
    ('hadarrosen', 'apparel'),
    ('haday', 'appliances'),
    ('haeger', 'appliances'),
    ('hagen', 'appliances'),
    ('haier', 'appliances'),
    ('hairdorables', 'kids'),
    ('haken', 'stationery');
```
[2024-12-05T21:37:53.920+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:37:53.920+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:37:07.445945+00:00, execution_date=20241205T213707, start_date=20241205T213713, end_date=20241205T213753
[2024-12-05T21:37:53.974+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:37:53.996+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:37:54.001+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
