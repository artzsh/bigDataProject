[2024-12-05T21:19:48.988+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:19:49.000+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:19:43.722263+00:00 [queued]>
[2024-12-05T21:19:49.007+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:19:43.722263+00:00 [queued]>
[2024-12-05T21:19:49.008+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:19:49.020+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:19:43.722263+00:00
[2024-12-05T21:19:49.026+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3824) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:19:49.027+0000] {standard_task_runner.py:72} INFO - Started process 3825 to run task
[2024-12-05T21:19:49.027+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:19:43.722263+00:00', '--job-id', '840', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpwecog_fj']
[2024-12-05T21:19:49.029+0000] {standard_task_runner.py:105} INFO - Job 840: Subtask call_llm
[2024-12-05T21:19:49.063+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:19:43.722263+00:00 [running]> on host c7780884450d
[2024-12-05T21:19:49.122+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:19:43.722263+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:19:43.722263+00:00'
[2024-12-05T21:19:49.123+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:19:49.139+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['decathlon', 'decocode', 'decola', 'decool', 'decora', 'decoroom', 'deepcool', 'deeper', 'defacto', 'defalucy', 'defender', 'definitivetechnology', 'dekart', 'deko', 'dekok', 'delibri', 'delimano', 'delkor', 'dell', 'dello', 'delmax', 'delo', 'delonghi', 'delphi', 'delsey'], 'next_index': 1250}
[2024-12-05T21:19:49.139+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:19:49.555+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:20:06.090+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results and general knowledge:

1. **decathlon** - sport
2. **decocode** - furniture, accessories
3. **decola** - stationery, kids
4. **decool** - electronics, accessories
5. **decora** - home, furniture
6. **decoroom** - furniture, home
7. **deepcool** - electronics, computers
8. **deeper** - appliances, electronics
9. **defacto** - apparel
10. **defalucy** - apparel, accessories
11. **defender** - electronics, auto
12. **definitivetechnology** - electronics, appliances
13. **dekart** - stationery, computers
14. **deko** - furniture, home
15. **dekok** - furniture, home
16. **delibri** - stationery, kids
17. **delimano** - appliances, kitchen
18. **delkor** - auto, electronics
19. **dell** - computers, electronics
20. **dello** - appliances, electronics
21. **delmax** - appliances, electronics
22. **delo** - appliances, electronics
23. **delonghi** - appliances, kitchen
24. **delphi** - auto, electronics
25. **delsey** - accessories, luggage

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('decathlon', 'sport'),
    ('decocode', 'furniture'),
    ('decocode', 'accessories'),
    ('decola', 'stationery'),
    ('decola', 'kids'),
    ('decool', 'electronics'),
    ('decool', 'accessories'),
    ('decora', 'home'),
    ('decoroom', 'furniture'),
    ('deepcool', 'electronics'),
    ('deepcool', 'computers'),
    ('deeper', 'appliances'),
    ('deeper', 'electronics'),
    ('defacto', 'apparel'),
    ('defalucy', 'apparel'),
    ('defalucy', 'accessories'),
    ('defender', 'electronics'),
    ('defender', 'auto'),
    ('definitivetechnology', 'electronics'),
    ('definitivetechnology', 'appliances'),
    ('dekart', 'stationery'),
    ('dekart', 'computers'),
    ('deko', 'furniture'),
    ('deko', 'home'),
    ('dekok', 'furniture'),
    ('dekok', 'home'),
    ('delibri', 'stationery'),
    ('delibri', 'kids'),
    ('delimano', 'appliances'),
    ('delimano', 'kitchen'),
    ('delkor', 'auto'),
    ('delkor', 'electronics'),
    ('dell', 'computers'),
    ('dell', 'electronics'),
    ('dello', 'appliances'),
    ('dello', 'electronics'),
    ('delmax', 'appliances'),
    ('delmax', 'electronics'),
    ('delo', 'appliances'),
    ('delo', 'electronics'),
    ('delonghi', 'appliances'),
    ('delonghi', 'kitchen'),
    ('delphi', 'auto'),
    ('delphi', 'electronics'),
    ('delsey', 'accessories'),
    ('delsey', 'luggage');
```
[2024-12-05T21:20:06.090+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results and general knowledge:

1. **decathlon** - sport
2. **decocode** - furniture, accessories
3. **decola** - stationery, kids
4. **decool** - electronics, accessories
5. **decora** - home, furniture
6. **decoroom** - furniture, home
7. **deepcool** - electronics, computers
8. **deeper** - appliances, electronics
9. **defacto** - apparel
10. **defalucy** - apparel, accessories
11. **defender** - electronics, auto
12. **definitivetechnology** - electronics, appliances
13. **dekart** - stationery, computers
14. **deko** - furniture, home
15. **dekok** - furniture, home
16. **delibri** - stationery, kids
17. **delimano** - appliances, kitchen
18. **delkor** - auto, electronics
19. **dell** - computers, electronics
20. **dello** - appliances, electronics
21. **delmax** - appliances, electronics
22. **delo** - appliances, electronics
23. **delonghi** - appliances, kitchen
24. **delphi** - auto, electronics
25. **delsey** - accessories, luggage

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('decathlon', 'sport'),
    ('decocode', 'furniture'),
    ('decocode', 'accessories'),
    ('decola', 'stationery'),
    ('decola', 'kids'),
    ('decool', 'electronics'),
    ('decool', 'accessories'),
    ('decora', 'home'),
    ('decoroom', 'furniture'),
    ('deepcool', 'electronics'),
    ('deepcool', 'computers'),
    ('deeper', 'appliances'),
    ('deeper', 'electronics'),
    ('defacto', 'apparel'),
    ('defalucy', 'apparel'),
    ('defalucy', 'accessories'),
    ('defender', 'electronics'),
    ('defender', 'auto'),
    ('definitivetechnology', 'electronics'),
    ('definitivetechnology', 'appliances'),
    ('dekart', 'stationery'),
    ('dekart', 'computers'),
    ('deko', 'furniture'),
    ('deko', 'home'),
    ('dekok', 'furniture'),
    ('dekok', 'home'),
    ('delibri', 'stationery'),
    ('delibri', 'kids'),
    ('delimano', 'appliances'),
    ('delimano', 'kitchen'),
    ('delkor', 'auto'),
    ('delkor', 'electronics'),
    ('dell', 'computers'),
    ('dell', 'electronics'),
    ('dello', 'appliances'),
    ('dello', 'electronics'),
    ('delmax', 'appliances'),
    ('delmax', 'electronics'),
    ('delo', 'appliances'),
    ('delo', 'electronics'),
    ('delonghi', 'appliances'),
    ('delonghi', 'kitchen'),
    ('delphi', 'auto'),
    ('delphi', 'electronics'),
    ('delsey', 'accessories'),
    ('delsey', 'luggage');
```
[2024-12-05T21:20:06.109+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:20:06.110+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:19:43.722263+00:00, execution_date=20241205T211943, start_date=20241205T211949, end_date=20241205T212006
[2024-12-05T21:20:06.135+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:20:06.153+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:20:06.156+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
