[2024-12-05T21:22:12.114+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:22:12.128+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:22:07.562393+00:00 [queued]>
[2024-12-05T21:22:12.136+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:22:07.562393+00:00 [queued]>
[2024-12-05T21:22:12.136+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:22:12.150+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:22:07.562393+00:00
[2024-12-05T21:22:12.157+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3964) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:22:12.158+0000] {standard_task_runner.py:72} INFO - Started process 3965 to run task
[2024-12-05T21:22:12.158+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:22:07.562393+00:00', '--job-id', '870', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpuemjy5px']
[2024-12-05T21:22:12.160+0000] {standard_task_runner.py:105} INFO - Job 870: Subtask call_llm
[2024-12-05T21:22:12.200+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:22:07.562393+00:00 [running]> on host c7780884450d
[2024-12-05T21:22:12.263+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:22:07.562393+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:22:07.562393+00:00'
[2024-12-05T21:22:12.265+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:22:12.281+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['doctors', 'doda', 'dodo', 'doff', 'dogrular', 'dohany', 'dolcegabbana', 'dolcevita', 'doliva', 'dollytoy', 'domani-spa', 'domasnijocag', 'domcraft', 'domenik', 'domestos', 'dometic', 'domika', 'dominant-print', 'domini', 'domyos', 'donfeel', 'dongma', 'donic', 'donnavanna', 'doogee'], 'next_index': 1375}
[2024-12-05T21:22:12.282+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:22:12.699+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:22:31.014+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of the provided brands to their respective categories based on the search results:

1. **doctors** - medicine
2. **doda** - apparel
3. **dodo** - apparel
4. **doff** - appliances
5. **dogrular** - furniture
6. **dohany** - accessories
7. **dolcegabbana** - apparel, accessories
8. **dolcevita** - apparel
9. **doliva** - medicine
10. **dollytoy** - kids
11. **domani-spa** - appliances
12. **domasnijocag** - appliances
13. **domcraft** - furniture
14. **domenik** - apparel
15. **domestos** - appliances
16. **dometic** - appliances
17. **domika** - furniture
18. **dominant-print** - apparel
19. **domini** - apparel
20. **domyos** - sport
21. **donfeel** - appliances
22. **dongma** - electronics
23. **donic** - sport
24. **donnavanna** - apparel
25. **doogee** - electronics

Now, here is the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('doctors', 'medicine'),
    ('doda', 'apparel'),
    ('dodo', 'apparel'),
    ('doff', 'appliances'),
    ('dogrular', 'furniture'),
    ('dohany', 'accessories'),
    ('dolcegabbana', 'apparel'),
    ('dolcegabbana', 'accessories'),
    ('dolcevita', 'apparel'),
    ('doliva', 'medicine'),
    ('dollytoy', 'kids'),
    ('domani-spa', 'appliances'),
    ('domasnijocag', 'appliances'),
    ('domcraft', 'furniture'),
    ('domenik', 'apparel'),
    ('domestos', 'appliances'),
    ('dometic', 'appliances'),
    ('domika', 'furniture'),
    ('dominant-print', 'apparel'),
    ('domini', 'apparel'),
    ('domyos', 'sport'),
    ('donfeel', 'appliances'),
    ('dongma', 'electronics'),
    ('donic', 'sport'),
    ('donnavanna', 'apparel'),
    ('doogee', 'electronics');
```
[2024-12-05T21:22:31.015+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of the provided brands to their respective categories based on the search results:

1. **doctors** - medicine
2. **doda** - apparel
3. **dodo** - apparel
4. **doff** - appliances
5. **dogrular** - furniture
6. **dohany** - accessories
7. **dolcegabbana** - apparel, accessories
8. **dolcevita** - apparel
9. **doliva** - medicine
10. **dollytoy** - kids
11. **domani-spa** - appliances
12. **domasnijocag** - appliances
13. **domcraft** - furniture
14. **domenik** - apparel
15. **domestos** - appliances
16. **dometic** - appliances
17. **domika** - furniture
18. **dominant-print** - apparel
19. **domini** - apparel
20. **domyos** - sport
21. **donfeel** - appliances
22. **dongma** - electronics
23. **donic** - sport
24. **donnavanna** - apparel
25. **doogee** - electronics

Now, here is the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('doctors', 'medicine'),
    ('doda', 'apparel'),
    ('dodo', 'apparel'),
    ('doff', 'appliances'),
    ('dogrular', 'furniture'),
    ('dohany', 'accessories'),
    ('dolcegabbana', 'apparel'),
    ('dolcegabbana', 'accessories'),
    ('dolcevita', 'apparel'),
    ('doliva', 'medicine'),
    ('dollytoy', 'kids'),
    ('domani-spa', 'appliances'),
    ('domasnijocag', 'appliances'),
    ('domcraft', 'furniture'),
    ('domenik', 'apparel'),
    ('domestos', 'appliances'),
    ('dometic', 'appliances'),
    ('domika', 'furniture'),
    ('dominant-print', 'apparel'),
    ('domini', 'apparel'),
    ('domyos', 'sport'),
    ('donfeel', 'appliances'),
    ('dongma', 'electronics'),
    ('donic', 'sport'),
    ('donnavanna', 'apparel'),
    ('doogee', 'electronics');
```
[2024-12-05T21:22:31.034+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:22:31.034+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:22:07.562393+00:00, execution_date=20241205T212207, start_date=20241205T212212, end_date=20241205T212231
[2024-12-05T21:22:31.072+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:22:31.111+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:22:31.117+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
