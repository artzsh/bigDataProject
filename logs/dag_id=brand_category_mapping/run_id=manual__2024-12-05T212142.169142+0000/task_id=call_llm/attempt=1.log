[2024-12-05T21:21:47.212+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:21:47.225+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:21:42.169142+00:00 [queued]>
[2024-12-05T21:21:47.232+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:21:42.169142+00:00 [queued]>
[2024-12-05T21:21:47.233+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:21:47.246+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:21:42.169142+00:00
[2024-12-05T21:21:47.252+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3936) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:21:47.254+0000] {standard_task_runner.py:72} INFO - Started process 3937 to run task
[2024-12-05T21:21:47.254+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:21:42.169142+00:00', '--job-id', '864', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpkwc66fub']
[2024-12-05T21:21:47.256+0000] {standard_task_runner.py:105} INFO - Job 864: Subtask call_llm
[2024-12-05T21:21:47.294+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:21:42.169142+00:00 [running]> on host c7780884450d
[2024-12-05T21:21:47.366+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:21:42.169142+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:21:42.169142+00:00'
[2024-12-05T21:21:47.367+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:21:47.386+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['disney', 'dispho', 'distar', 'dita', 'ditreex', 'diva', 'divalux', 'divan-kz', 'divan.kz', 'divinare', 'divoom', 'dizel', 'dizzy', 'dji', 'dk', 'dkny', 'dla', 'dlaudio', 'd-link', 'dls', 'dmichael', 'dobroparov', 'dobroprav', 'dobrusskijfarforovyjzavod', 'dobryna'], 'next_index': 1350}
[2024-12-05T21:21:47.386+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:21:47.816+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:22:02.408+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their appropriate categories based on the search results:

1. **disney**: apparel, kids
2. **dispho**: electronics
3. **distar**: stationery, kids
4. **dita**: accessories
5. **ditreex**: furniture
6. **diva**: accessories
7. **divalux**: furniture
8. **divan-kz**: furniture
9. **divan.kz**: furniture
10. **divinare**: electronics
11. **divoom**: electronics
12. **dizel**: auto
13. **dizzy**: apparel
14. **dji**: electronics
15. **dk**: apparel
16. **dkny**: apparel, accessories
17. **dla**: electronics
18. **dlaudio**: electronics
19. **d-link**: electronics
20. **dls**: electronics
21. **dmichael**: apparel
22. **dobroparov**: furniture
23. **dobroprav**: furniture
24. **dobrusskijfarforovyjzavod**: furniture
25. **dobryna**: furniture

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('disney', 'apparel'),
    ('disney', 'kids'),
    ('dispho', 'electronics'),
    ('distar', 'stationery'),
    ('distar', 'kids'),
    ('dita', 'accessories'),
    ('ditreex', 'furniture'),
    ('diva', 'accessories'),
    ('divalux', 'furniture'),
    ('divan-kz', 'furniture'),
    ('divan.kz', 'furniture'),
    ('divinare', 'electronics'),
    ('divoom', 'electronics'),
    ('dizel', 'auto'),
    ('dizzy', 'apparel'),
    ('dji', 'electronics'),
    ('dk', 'apparel'),
    ('dkny', 'apparel'),
    ('dkny', 'accessories'),
    ('dla', 'electronics'),
    ('dlaudio', 'electronics'),
    ('d-link', 'electronics'),
    ('dls', 'electronics'),
    ('dmichael', 'apparel'),
    ('dobroparov', 'furniture'),
    ('dobroprav', 'furniture'),
    ('dobrusskijfarforovyjzavod', 'furniture'),
    ('dobryna', 'furniture');
```
[2024-12-05T21:22:02.408+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their appropriate categories based on the search results:

1. **disney**: apparel, kids
2. **dispho**: electronics
3. **distar**: stationery, kids
4. **dita**: accessories
5. **ditreex**: furniture
6. **diva**: accessories
7. **divalux**: furniture
8. **divan-kz**: furniture
9. **divan.kz**: furniture
10. **divinare**: electronics
11. **divoom**: electronics
12. **dizel**: auto
13. **dizzy**: apparel
14. **dji**: electronics
15. **dk**: apparel
16. **dkny**: apparel, accessories
17. **dla**: electronics
18. **dlaudio**: electronics
19. **d-link**: electronics
20. **dls**: electronics
21. **dmichael**: apparel
22. **dobroparov**: furniture
23. **dobroprav**: furniture
24. **dobrusskijfarforovyjzavod**: furniture
25. **dobryna**: furniture

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('disney', 'apparel'),
    ('disney', 'kids'),
    ('dispho', 'electronics'),
    ('distar', 'stationery'),
    ('distar', 'kids'),
    ('dita', 'accessories'),
    ('ditreex', 'furniture'),
    ('diva', 'accessories'),
    ('divalux', 'furniture'),
    ('divan-kz', 'furniture'),
    ('divan.kz', 'furniture'),
    ('divinare', 'electronics'),
    ('divoom', 'electronics'),
    ('dizel', 'auto'),
    ('dizzy', 'apparel'),
    ('dji', 'electronics'),
    ('dk', 'apparel'),
    ('dkny', 'apparel'),
    ('dkny', 'accessories'),
    ('dla', 'electronics'),
    ('dlaudio', 'electronics'),
    ('d-link', 'electronics'),
    ('dls', 'electronics'),
    ('dmichael', 'apparel'),
    ('dobroparov', 'furniture'),
    ('dobroprav', 'furniture'),
    ('dobrusskijfarforovyjzavod', 'furniture'),
    ('dobryna', 'furniture');
```
[2024-12-05T21:22:02.431+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:22:02.431+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:21:42.169142+00:00, execution_date=20241205T212142, start_date=20241205T212147, end_date=20241205T212202
[2024-12-05T21:22:02.485+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:22:02.505+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:22:02.508+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
