[2024-12-05T20:56:40.705+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:56:40.715+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:56:35.842791+00:00 [queued]>
[2024-12-05T20:56:40.721+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:56:35.842791+00:00 [queued]>
[2024-12-05T20:56:40.721+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:56:40.733+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:56:35.842791+00:00
[2024-12-05T20:56:40.739+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2574) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:56:40.740+0000] {standard_task_runner.py:72} INFO - Started process 2575 to run task
[2024-12-05T20:56:40.740+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:56:35.842791+00:00', '--job-id', '570', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpwawhum91']
[2024-12-05T20:56:40.742+0000] {standard_task_runner.py:105} INFO - Job 570: Subtask call_llm
[2024-12-05T20:56:40.775+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:56:35.842791+00:00 [running]> on host c7780884450d
[2024-12-05T20:56:40.828+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:56:35.842791+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:56:35.842791+00:00'
[2024-12-05T20:56:40.829+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:56:40.845+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['ajris-press', 'akademiagrupp', 'akademiaholding', 'akai', 'akara', 'akciaeglo', 'akebono', 'akel', 'akg', 'akkord', 'akku', 'akom', 'akor', 'akpo', 'akro', 'aksina', 'aksion', 'akva', 'akvafor', 'akvarel', 'akvarobot', 'akvaton', 'akyoto', 'aladen', 'alaia'], 'next_index': 125}
[2024-12-05T20:56:40.846+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:56:41.268+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:57:01.056+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **ajris-press**: stationery
2. **akademiagrupp**: stationery
3. **akademiaholding**: stationery
4. **akai**: electronics
5. **akara**: electronics
6. **akciaeglo**: electronics
7. **akebono**: auto
8. **akel**: electronics
9. **akg**: electronics
10. **akkord**: electronics
11. **akku**: electronics
12. **akom**: electronics
13. **akor**: electronics
14. **akpo**: electronics
15. **akro**: electronics
16. **aksina**: electronics
17. **aksion**: electronics
18. **akva**: country_yard
19. **akvafor**: country_yard
20. **akvarel**: stationery
21. **akvarobot**: electronics
22. **akvaton**: country_yard
23. **akyoto**: electronics
24. **aladen**: furniture
25. **alaia**: apparel

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ajris-press', 'stationery'),
    ('akademiagrupp', 'stationery'),
    ('akademiaholding', 'stationery'),
    ('akai', 'electronics'),
    ('akara', 'electronics'),
    ('akciaeglo', 'electronics'),
    ('akebono', 'auto'),
    ('akel', 'electronics'),
    ('akg', 'electronics'),
    ('akkord', 'electronics'),
    ('akku', 'electronics'),
    ('akom', 'electronics'),
    ('akor', 'electronics'),
    ('akpo', 'electronics'),
    ('akro', 'electronics'),
    ('aksina', 'electronics'),
    ('aksion', 'electronics'),
    ('akva', 'country_yard'),
    ('akvafor', 'country_yard'),
    ('akvarel', 'stationery'),
    ('akvarobot', 'electronics'),
    ('akvaton', 'country_yard'),
    ('akyoto', 'electronics'),
    ('aladen', 'furniture'),
    ('alaia', 'apparel');
```
[2024-12-05T20:57:01.057+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **ajris-press**: stationery
2. **akademiagrupp**: stationery
3. **akademiaholding**: stationery
4. **akai**: electronics
5. **akara**: electronics
6. **akciaeglo**: electronics
7. **akebono**: auto
8. **akel**: electronics
9. **akg**: electronics
10. **akkord**: electronics
11. **akku**: electronics
12. **akom**: electronics
13. **akor**: electronics
14. **akpo**: electronics
15. **akro**: electronics
16. **aksina**: electronics
17. **aksion**: electronics
18. **akva**: country_yard
19. **akvafor**: country_yard
20. **akvarel**: stationery
21. **akvarobot**: electronics
22. **akvaton**: country_yard
23. **akyoto**: electronics
24. **aladen**: furniture
25. **alaia**: apparel

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ajris-press', 'stationery'),
    ('akademiagrupp', 'stationery'),
    ('akademiaholding', 'stationery'),
    ('akai', 'electronics'),
    ('akara', 'electronics'),
    ('akciaeglo', 'electronics'),
    ('akebono', 'auto'),
    ('akel', 'electronics'),
    ('akg', 'electronics'),
    ('akkord', 'electronics'),
    ('akku', 'electronics'),
    ('akom', 'electronics'),
    ('akor', 'electronics'),
    ('akpo', 'electronics'),
    ('akro', 'electronics'),
    ('aksina', 'electronics'),
    ('aksion', 'electronics'),
    ('akva', 'country_yard'),
    ('akvafor', 'country_yard'),
    ('akvarel', 'stationery'),
    ('akvarobot', 'electronics'),
    ('akvaton', 'country_yard'),
    ('akyoto', 'electronics'),
    ('aladen', 'furniture'),
    ('alaia', 'apparel');
```
[2024-12-05T20:57:01.075+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:57:01.076+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:56:35.842791+00:00, execution_date=20241205T205635, start_date=20241205T205640, end_date=20241205T205701
[2024-12-05T20:57:01.130+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:57:01.149+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:57:01.152+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
