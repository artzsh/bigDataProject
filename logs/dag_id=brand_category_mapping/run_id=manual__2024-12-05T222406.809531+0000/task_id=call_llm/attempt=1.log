[2024-12-05T22:24:11.259+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:24:11.274+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:24:06.809531+00:00 [queued]>
[2024-12-05T22:24:11.281+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:24:06.809531+00:00 [queued]>
[2024-12-05T22:24:11.282+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:24:11.295+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:24:06.809531+00:00
[2024-12-05T22:24:11.301+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7254) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:24:11.303+0000] {standard_task_runner.py:72} INFO - Started process 7255 to run task
[2024-12-05T22:24:11.303+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:24:06.809531+00:00', '--job-id', '1578', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpb5_etq6n']
[2024-12-05T22:24:11.306+0000] {standard_task_runner.py:105} INFO - Job 1578: Subtask call_llm
[2024-12-05T22:24:11.347+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:24:06.809531+00:00 [running]> on host c7780884450d
[2024-12-05T22:24:11.417+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:24:06.809531+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:24:06.809531+00:00'
[2024-12-05T22:24:11.418+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:24:11.436+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['rocknail', 'rockrider', 'rockstargames', 'rode', 'rodi', 'roeyuta', 'rogervandenberghenv', 'roingto', 'roison', 'roja', 'rokids', 'roland', 'rolife', 'romack', 'romana', 'romanson', 'romax', 'rombica', 'romer', 'romoss', 'ronas', 'roncato', 'rondell', 'rongta', 'rongtai'], 'next_index': 4325}
[2024-12-05T22:24:11.436+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:24:11.847+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:24:30.576+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the categorization of the brands based on the search results and my knowledge:

1. **rocknail** - **(accessories)**
2. **rockrider** - **(sport)**
3. **rockstargames** - **(kids)**, **(electronics)**
4. **rode** - **(electronics)**, **(accessories)**
5. **rodi** - **(appliances)**, **(kids)**
6. **roeyuta** - **(apparel)**, **(accessories)**
7. **rogervandenberghenv** - **(furniture)**, **(accessories)**
8. **roingto** - **(appliances)**, **(electronics)**
9. **roison** - **(stationery)**, **(accessories)**
10. **roja** - **(accessories)**, **(apparel)**
11. **rokids** - **(kids)**, **(apparel)**
12. **roland** - **(electronics)**, **(accessories)**
13. **rolife** - **(kids)**, **(stationery)**
14. **romack** - **(furniture)**, **(appliances)**
15. **romana** - **(furniture)**, **(accessories)**
16. **romanson** - **(accessories)**, **(electronics)**
17. **romax** - **(appliances)**, **(electronics)**
18. **rombica** - **(electronics)**, **(accessories)**
19. **romer** - **(electronics)**, **(appliances)**
20. **romoss** - **(electronics)**, **(appliances)**
21. **ronas** - **(apparel)**, **(accessories)**
22. **roncato** - **(accessories)**, **(apparel)**
23. **rondell** - **(appliances)**, **(kitchen)**
24. **rongta** - **(stationery)**, **(electronics)**
25. **rongtai** - **(appliances)**, **(electronics)**

Now, here’s the SQL INSERT statement based on the categorization:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rocknail', 'accessories'),
    ('rockrider', 'sport'),
    ('rockstargames', 'kids'),
    ('rockstargames', 'electronics'),
    ('rode', 'electronics'),
    ('rode', 'accessories'),
    ('rodi', 'appliances'),
    ('rodi', 'kids'),
    ('roeyuta', 'apparel'),
    ('roeyuta', 'accessories'),
    ('rogervandenberghenv', 'furniture'),
    ('rogervandenberghenv', 'accessories'),
    ('roingto', 'appliances'),
    ('roingto', 'electronics'),
    ('roison', 'stationery'),
    ('roison', 'accessories'),
    ('roja', 'accessories'),
    ('roja', 'apparel'),
    ('rokids', 'kids'),
    ('rokids', 'apparel'),
    ('roland', 'electronics'),
    ('roland', 'accessories'),
    ('rolife', 'kids'),
    ('rolife', 'stationery'),
    ('romack', 'furniture'),
    ('romack', 'appliances'),
    ('romana', 'furniture'),
    ('romana', 'accessories'),
    ('romanson', 'accessories'),
    ('romanson', 'electronics'),
    ('romax', 'appliances'),
    ('romax', 'electronics'),
    ('rombica', 'electronics'),
    ('rombica', 'accessories'),
    ('romer', 'electronics'),
    ('romer', 'appliances'),
    ('romoss', 'electronics'),
    ('romoss', 'appliances'),
    ('ronas', 'apparel'),
    ('ronas', 'accessories'),
    ('roncato', 'accessories'),
    ('roncato', 'apparel'),
    ('rondell', 'appliances'),
    ('rongta', 'stationery'),
    ('rongta', 'electronics'),
    ('rongtai', 'appliances'),
    ('rongtai', 'electronics');
``` 

This SQL statement reflects the brand-category mappings based on the information gathered.
[2024-12-05T22:24:30.577+0000] {python.py:240} INFO - Done. Returned value was: Here’s the categorization of the brands based on the search results and my knowledge:

1. **rocknail** - **(accessories)**
2. **rockrider** - **(sport)**
3. **rockstargames** - **(kids)**, **(electronics)**
4. **rode** - **(electronics)**, **(accessories)**
5. **rodi** - **(appliances)**, **(kids)**
6. **roeyuta** - **(apparel)**, **(accessories)**
7. **rogervandenberghenv** - **(furniture)**, **(accessories)**
8. **roingto** - **(appliances)**, **(electronics)**
9. **roison** - **(stationery)**, **(accessories)**
10. **roja** - **(accessories)**, **(apparel)**
11. **rokids** - **(kids)**, **(apparel)**
12. **roland** - **(electronics)**, **(accessories)**
13. **rolife** - **(kids)**, **(stationery)**
14. **romack** - **(furniture)**, **(appliances)**
15. **romana** - **(furniture)**, **(accessories)**
16. **romanson** - **(accessories)**, **(electronics)**
17. **romax** - **(appliances)**, **(electronics)**
18. **rombica** - **(electronics)**, **(accessories)**
19. **romer** - **(electronics)**, **(appliances)**
20. **romoss** - **(electronics)**, **(appliances)**
21. **ronas** - **(apparel)**, **(accessories)**
22. **roncato** - **(accessories)**, **(apparel)**
23. **rondell** - **(appliances)**, **(kitchen)**
24. **rongta** - **(stationery)**, **(electronics)**
25. **rongtai** - **(appliances)**, **(electronics)**

Now, here’s the SQL INSERT statement based on the categorization:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rocknail', 'accessories'),
    ('rockrider', 'sport'),
    ('rockstargames', 'kids'),
    ('rockstargames', 'electronics'),
    ('rode', 'electronics'),
    ('rode', 'accessories'),
    ('rodi', 'appliances'),
    ('rodi', 'kids'),
    ('roeyuta', 'apparel'),
    ('roeyuta', 'accessories'),
    ('rogervandenberghenv', 'furniture'),
    ('rogervandenberghenv', 'accessories'),
    ('roingto', 'appliances'),
    ('roingto', 'electronics'),
    ('roison', 'stationery'),
    ('roison', 'accessories'),
    ('roja', 'accessories'),
    ('roja', 'apparel'),
    ('rokids', 'kids'),
    ('rokids', 'apparel'),
    ('roland', 'electronics'),
    ('roland', 'accessories'),
    ('rolife', 'kids'),
    ('rolife', 'stationery'),
    ('romack', 'furniture'),
    ('romack', 'appliances'),
    ('romana', 'furniture'),
    ('romana', 'accessories'),
    ('romanson', 'accessories'),
    ('romanson', 'electronics'),
    ('romax', 'appliances'),
    ('romax', 'electronics'),
    ('rombica', 'electronics'),
    ('rombica', 'accessories'),
    ('romer', 'electronics'),
    ('romer', 'appliances'),
    ('romoss', 'electronics'),
    ('romoss', 'appliances'),
    ('ronas', 'apparel'),
    ('ronas', 'accessories'),
    ('roncato', 'accessories'),
    ('roncato', 'apparel'),
    ('rondell', 'appliances'),
    ('rongta', 'stationery'),
    ('rongta', 'electronics'),
    ('rongtai', 'appliances'),
    ('rongtai', 'electronics');
``` 

This SQL statement reflects the brand-category mappings based on the information gathered.
[2024-12-05T22:24:30.597+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:24:30.598+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:24:06.809531+00:00, execution_date=20241205T222406, start_date=20241205T222411, end_date=20241205T222430
[2024-12-05T22:24:30.627+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:24:30.646+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:24:30.649+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
