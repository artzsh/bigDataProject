[2024-12-05T22:45:33.456+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:45:33.470+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:45:28.412634+00:00 [queued]>
[2024-12-05T22:45:33.478+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:45:28.412634+00:00 [queued]>
[2024-12-05T22:45:33.478+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:45:33.493+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:45:28.412634+00:00
[2024-12-05T22:45:33.500+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8323) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:45:33.501+0000] {standard_task_runner.py:72} INFO - Started process 8324 to run task
[2024-12-05T22:45:33.502+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:45:28.412634+00:00', '--job-id', '1806', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpbnj9jza4']
[2024-12-05T22:45:33.504+0000] {standard_task_runner.py:105} INFO - Job 1806: Subtask call_llm
[2024-12-05T22:45:33.543+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:45:28.412634+00:00 [running]> on host c7780884450d
[2024-12-05T22:45:33.607+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:45:28.412634+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:45:28.412634+00:00'
[2024-12-05T22:45:33.608+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:45:33.627+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['vag', 'vaggan', 'vagoriginal', 'vaily', 'vaiper', 'vako', 'vakosa', 'valberg', 'valentino', 'valeo', 'valkiria', 'value', 'valve', 'vanilla', 'vanish', 'vans', 'vardoven', 'vari', 'variolux', 'varta', 'vasco', 'vasden', 'vasilisa', 'vasin', 'vaude'], 'next_index': 5275}
[2024-12-05T22:45:33.627+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:45:34.060+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:45:47.157+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **vag** - apparel
2. **vaggan** - apparel
3. **vagoriginal** - apparel
4. **vaily** - apparel
5. **vaiper** - electronics
6. **vako** - apparel
7. **vakosa** - apparel
8. **valberg** - appliances
9. **valentino** - apparel, accessories
10. **valeo** - auto, electronics
11. **valkiria** - apparel
12. **value** - appliances
13. **valve** - appliances
14. **vanilla** - food, accessories
15. **vanish** - appliances, cleaning products
16. **vans** - apparel, accessories
17. **vardoven** - appliances
18. **vari** - furniture, accessories
19. **variolux** - electronics
20. **varta** - electronics
21. **vasco** - electronics
22. **vasden** - apparel
23. **vasilisa** - apparel
24. **vasin** - apparel
25. **vaude** - apparel, accessories

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('vag', 'apparel'),
    ('vaggan', 'apparel'),
    ('vagoriginal', 'apparel'),
    ('vaily', 'apparel'),
    ('vaiper', 'electronics'),
    ('vako', 'apparel'),
    ('vakosa', 'apparel'),
    ('valberg', 'appliances'),
    ('valentino', 'apparel'),
    ('valentino', 'accessories'),
    ('valeo', 'auto'),
    ('valeo', 'electronics'),
    ('valkiria', 'apparel'),
    ('value', 'appliances'),
    ('valve', 'appliances'),
    ('vanilla', 'accessories'),
    ('vanish', 'appliances'),
    ('vans', 'apparel'),
    ('vans', 'accessories'),
    ('vardoven', 'appliances'),
    ('vari', 'furniture'),
    ('vari', 'accessories'),
    ('variolux', 'electronics'),
    ('varta', 'electronics'),
    ('vasco', 'electronics'),
    ('vasden', 'apparel'),
    ('vasilisa', 'apparel'),
    ('vasin', 'apparel'),
    ('vaude', 'apparel'),
    ('vaude', 'accessories');
```

This SQL statement includes all the brands and their corresponding categories as identified.
[2024-12-05T22:45:47.158+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **vag** - apparel
2. **vaggan** - apparel
3. **vagoriginal** - apparel
4. **vaily** - apparel
5. **vaiper** - electronics
6. **vako** - apparel
7. **vakosa** - apparel
8. **valberg** - appliances
9. **valentino** - apparel, accessories
10. **valeo** - auto, electronics
11. **valkiria** - apparel
12. **value** - appliances
13. **valve** - appliances
14. **vanilla** - food, accessories
15. **vanish** - appliances, cleaning products
16. **vans** - apparel, accessories
17. **vardoven** - appliances
18. **vari** - furniture, accessories
19. **variolux** - electronics
20. **varta** - electronics
21. **vasco** - electronics
22. **vasden** - apparel
23. **vasilisa** - apparel
24. **vasin** - apparel
25. **vaude** - apparel, accessories

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('vag', 'apparel'),
    ('vaggan', 'apparel'),
    ('vagoriginal', 'apparel'),
    ('vaily', 'apparel'),
    ('vaiper', 'electronics'),
    ('vako', 'apparel'),
    ('vakosa', 'apparel'),
    ('valberg', 'appliances'),
    ('valentino', 'apparel'),
    ('valentino', 'accessories'),
    ('valeo', 'auto'),
    ('valeo', 'electronics'),
    ('valkiria', 'apparel'),
    ('value', 'appliances'),
    ('valve', 'appliances'),
    ('vanilla', 'accessories'),
    ('vanish', 'appliances'),
    ('vans', 'apparel'),
    ('vans', 'accessories'),
    ('vardoven', 'appliances'),
    ('vari', 'furniture'),
    ('vari', 'accessories'),
    ('variolux', 'electronics'),
    ('varta', 'electronics'),
    ('vasco', 'electronics'),
    ('vasden', 'apparel'),
    ('vasilisa', 'apparel'),
    ('vasin', 'apparel'),
    ('vaude', 'apparel'),
    ('vaude', 'accessories');
```

This SQL statement includes all the brands and their corresponding categories as identified.
[2024-12-05T22:45:47.176+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:45:47.177+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:45:28.412634+00:00, execution_date=20241205T224528, start_date=20241205T224533, end_date=20241205T224547
[2024-12-05T22:45:47.213+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:45:47.234+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:45:47.237+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
