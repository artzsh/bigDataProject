[2024-12-05T20:57:35.231+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:57:35.245+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:57:30.278372+00:00 [queued]>
[2024-12-05T20:57:35.252+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:57:30.278372+00:00 [queued]>
[2024-12-05T20:57:35.252+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:57:35.265+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:57:30.278372+00:00
[2024-12-05T20:57:35.271+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2630) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:57:35.272+0000] {standard_task_runner.py:72} INFO - Started process 2631 to run task
[2024-12-05T20:57:35.272+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:57:30.278372+00:00', '--job-id', '582', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpkhb3x55b']
[2024-12-05T20:57:35.274+0000] {standard_task_runner.py:105} INFO - Job 582: Subtask call_llm
[2024-12-05T20:57:35.309+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:57:30.278372+00:00 [running]> on host c7780884450d
[2024-12-05T20:57:35.388+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:57:30.278372+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:57:30.278372+00:00'
[2024-12-05T20:57:35.389+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:57:35.408+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['alexrojo', 'alfa', 'alfa-kniga', 'alfreddunhill', 'algotherm', 'alienware', 'alilo', 'alinapaint', 'alinex', 'alis', 'alisa', 'alissabeaute', 'alita', 'al-ko', 'alkor', 'alligator', 'allocacoc', 'allvega', 'almacom', 'almada', 'almaks', 'almatv', 'alondra', 'alpenhof', 'alphaline'], 'next_index': 175}
[2024-12-05T20:57:35.408+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:57:35.825+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:57:55.718+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results:

1. **alexrojo** - apparel
2. **alfa** - appliances, auto
3. **alfa-kniga** - stationery
4. **alfreddunhill** - apparel, accessories
5. **algotherm** - medicine, accessories (skincare products)
6. **alienware** - computers, electronics
7. **alilo** - kids, electronics (toys)
8. **alinapaint** - construction
9. **alinex** - electronics
10. **alis** - apparel
11. **alisa** - apparel
12. **alissabeaute** - medicine, accessories (beauty products)
13. **alita** - apparel
14. **al-ko** - appliances, construction (gardening tools)
15. **alkor** - appliances
16. **alligator** - accessories (bags, wallets)
17. **allocacoc** - electronics
18. **allvega** - appliances
19. **almacom** - electronics
20. **almada** - furniture
21. **almaks** - construction
22. **almatv** - electronics
23. **alondra** - furniture
24. **alpenhof** - furniture
25. **alphaline** - appliances

Now, here is the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('alexrojo', 'apparel'),
    ('alfa', 'appliances'),
    ('alfa', 'auto'),
    ('alfa-kniga', 'stationery'),
    ('alfreddunhill', 'apparel'),
    ('alfreddunhill', 'accessories'),
    ('algotherm', 'medicine'),
    ('algotherm', 'accessories'),
    ('alienware', 'computers'),
    ('alienware', 'electronics'),
    ('alilo', 'kids'),
    ('alilo', 'electronics'),
    ('alinapaint', 'construction'),
    ('alinex', 'electronics'),
    ('alis', 'apparel'),
    ('alisa', 'apparel'),
    ('alissabeaute', 'medicine'),
    ('alissabeaute', 'accessories'),
    ('alita', 'apparel'),
    ('al-ko', 'appliances'),
    ('al-ko', 'construction'),
    ('alkor', 'appliances'),
    ('alligator', 'accessories'),
    ('allocacoc', 'electronics'),
    ('allvega', 'appliances'),
    ('almacom', 'electronics'),
    ('almada', 'furniture'),
    ('almaks', 'construction'),
    ('almatv', 'electronics'),
    ('alondra', 'furniture'),
    ('alpenhof', 'furniture'),
    ('alphaline', 'appliances');
```
[2024-12-05T20:57:55.719+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results:

1. **alexrojo** - apparel
2. **alfa** - appliances, auto
3. **alfa-kniga** - stationery
4. **alfreddunhill** - apparel, accessories
5. **algotherm** - medicine, accessories (skincare products)
6. **alienware** - computers, electronics
7. **alilo** - kids, electronics (toys)
8. **alinapaint** - construction
9. **alinex** - electronics
10. **alis** - apparel
11. **alisa** - apparel
12. **alissabeaute** - medicine, accessories (beauty products)
13. **alita** - apparel
14. **al-ko** - appliances, construction (gardening tools)
15. **alkor** - appliances
16. **alligator** - accessories (bags, wallets)
17. **allocacoc** - electronics
18. **allvega** - appliances
19. **almacom** - electronics
20. **almada** - furniture
21. **almaks** - construction
22. **almatv** - electronics
23. **alondra** - furniture
24. **alpenhof** - furniture
25. **alphaline** - appliances

Now, here is the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('alexrojo', 'apparel'),
    ('alfa', 'appliances'),
    ('alfa', 'auto'),
    ('alfa-kniga', 'stationery'),
    ('alfreddunhill', 'apparel'),
    ('alfreddunhill', 'accessories'),
    ('algotherm', 'medicine'),
    ('algotherm', 'accessories'),
    ('alienware', 'computers'),
    ('alienware', 'electronics'),
    ('alilo', 'kids'),
    ('alilo', 'electronics'),
    ('alinapaint', 'construction'),
    ('alinex', 'electronics'),
    ('alis', 'apparel'),
    ('alisa', 'apparel'),
    ('alissabeaute', 'medicine'),
    ('alissabeaute', 'accessories'),
    ('alita', 'apparel'),
    ('al-ko', 'appliances'),
    ('al-ko', 'construction'),
    ('alkor', 'appliances'),
    ('alligator', 'accessories'),
    ('allocacoc', 'electronics'),
    ('allvega', 'appliances'),
    ('almacom', 'electronics'),
    ('almada', 'furniture'),
    ('almaks', 'construction'),
    ('almatv', 'electronics'),
    ('alondra', 'furniture'),
    ('alpenhof', 'furniture'),
    ('alphaline', 'appliances');
```
[2024-12-05T20:57:55.740+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:57:55.740+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:57:30.278372+00:00, execution_date=20241205T205730, start_date=20241205T205735, end_date=20241205T205755
[2024-12-05T20:57:55.765+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:57:55.791+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:57:55.795+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
