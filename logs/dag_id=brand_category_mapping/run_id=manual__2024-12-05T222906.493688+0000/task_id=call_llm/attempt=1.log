[2024-12-05T22:29:11.816+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:29:11.830+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:29:06.493688+00:00 [queued]>
[2024-12-05T22:29:11.839+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:29:06.493688+00:00 [queued]>
[2024-12-05T22:29:11.840+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:29:11.852+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:29:06.493688+00:00
[2024-12-05T22:29:11.858+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7527) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:29:11.860+0000] {standard_task_runner.py:72} INFO - Started process 7528 to run task
[2024-12-05T22:29:11.860+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:29:06.493688+00:00', '--job-id', '1638', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpy1ki_xaq']
[2024-12-05T22:29:11.862+0000] {standard_task_runner.py:105} INFO - Job 1638: Subtask call_llm
[2024-12-05T22:29:11.898+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:29:06.493688+00:00 [running]> on host c7780884450d
[2024-12-05T22:29:11.961+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:29:06.493688+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:29:06.493688+00:00'
[2024-12-05T22:29:11.962+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:29:11.979+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['shimano', 'shimmerandshine', 'shindo', 'shinko', 'ship', 'shiraz', 'shiseido', 'shishi', 'shivaki', 'shoesrepablic', 'shoesrepublic', 'shogun', 'shoiberg', 'sho-me', 'shoodow', 'shopkins', 'shua', 'shuaiwa', 'shunfa', 'shure', 'siberia', 'sibin', 'sibirskietovary', 'sibrteh', 'siee'], 'next_index': 4575}
[2024-12-05T22:29:11.980+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:29:12.398+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:29:53.199+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on the search results:

1. **shimano** - sport, accessories
2. **shimmerandshine** - kids, apparel
3. **shindo** - electronics, appliances
4. **shinko** - auto, construction
5. **ship** - electronics, appliances
6. **shiraz** - country_yard, apparel
7. **shiseido** - medicine, cosmetics
8. **shishi** - apparel, kids
9. **shivaki** - electronics, appliances
10. **shoesrepablic** - apparel, accessories
11. **shoesrepublic** - apparel, accessories
12. **shogun** - apparel, accessories
13. **shoiberg** - apparel, accessories
14. **sho-me** - electronics
15. **shoodow** - apparel, accessories
16. **shopkins** - kids, toys
17. **shua** - apparel
18. **shuaiwa** - electronics
19. **shunfa** - appliances, electronics
20. **shure** - electronics
21. **siberia** - apparel, accessories
22. **sibin** - apparel
23. **sibirskietovary** - country_yard, construction
24. **sibrteh** - appliances, electronics
25. **siee** - electronics

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('shimano', 'sport'),
    ('shimano', 'accessories'),
    ('shimmerandshine', 'kids'),
    ('shimmerandshine', 'apparel'),
    ('shindo', 'electronics'),
    ('shindo', 'appliances'),
    ('shinko', 'auto'),
    ('shinko', 'construction'),
    ('ship', 'electronics'),
    ('ship', 'appliances'),
    ('shiraz', 'country_yard'),
    ('shiraz', 'apparel'),
    ('shiseido', 'medicine'),
    ('shiseido', 'cosmetics'),
    ('shishi', 'apparel'),
    ('shishi', 'kids'),
    ('shivaki', 'electronics'),
    ('shivaki', 'appliances'),
    ('shoesrepablic', 'apparel'),
    ('shoesrepablic', 'accessories'),
    ('shoesrepublic', 'apparel'),
    ('shoesrepublic', 'accessories'),
    ('shogun', 'apparel'),
    ('shogun', 'accessories'),
    ('shoiberg', 'apparel'),
    ('shoiberg', 'accessories'),
    ('sho-me', 'electronics'),
    ('shoodow', 'apparel'),
    ('shoodow', 'accessories'),
    ('shopkins', 'kids'),
    ('shopkins', 'toys'),
    ('shua', 'apparel'),
    ('shuaiwa', 'electronics'),
    ('shunfa', 'appliances'),
    ('shunfa', 'electronics'),
    ('shure', 'electronics'),
    ('siberia', 'apparel'),
    ('siberia', 'accessories'),
    ('sibin', 'apparel'),
    ('sibirskietovary', 'country_yard'),
    ('sibirskietovary', 'construction'),
    ('sibrteh', 'appliances'),
    ('sibrteh', 'electronics'),
    ('siee', 'electronics');
```
[2024-12-05T22:29:53.199+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on the search results:

1. **shimano** - sport, accessories
2. **shimmerandshine** - kids, apparel
3. **shindo** - electronics, appliances
4. **shinko** - auto, construction
5. **ship** - electronics, appliances
6. **shiraz** - country_yard, apparel
7. **shiseido** - medicine, cosmetics
8. **shishi** - apparel, kids
9. **shivaki** - electronics, appliances
10. **shoesrepablic** - apparel, accessories
11. **shoesrepublic** - apparel, accessories
12. **shogun** - apparel, accessories
13. **shoiberg** - apparel, accessories
14. **sho-me** - electronics
15. **shoodow** - apparel, accessories
16. **shopkins** - kids, toys
17. **shua** - apparel
18. **shuaiwa** - electronics
19. **shunfa** - appliances, electronics
20. **shure** - electronics
21. **siberia** - apparel, accessories
22. **sibin** - apparel
23. **sibirskietovary** - country_yard, construction
24. **sibrteh** - appliances, electronics
25. **siee** - electronics

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('shimano', 'sport'),
    ('shimano', 'accessories'),
    ('shimmerandshine', 'kids'),
    ('shimmerandshine', 'apparel'),
    ('shindo', 'electronics'),
    ('shindo', 'appliances'),
    ('shinko', 'auto'),
    ('shinko', 'construction'),
    ('ship', 'electronics'),
    ('ship', 'appliances'),
    ('shiraz', 'country_yard'),
    ('shiraz', 'apparel'),
    ('shiseido', 'medicine'),
    ('shiseido', 'cosmetics'),
    ('shishi', 'apparel'),
    ('shishi', 'kids'),
    ('shivaki', 'electronics'),
    ('shivaki', 'appliances'),
    ('shoesrepablic', 'apparel'),
    ('shoesrepablic', 'accessories'),
    ('shoesrepublic', 'apparel'),
    ('shoesrepublic', 'accessories'),
    ('shogun', 'apparel'),
    ('shogun', 'accessories'),
    ('shoiberg', 'apparel'),
    ('shoiberg', 'accessories'),
    ('sho-me', 'electronics'),
    ('shoodow', 'apparel'),
    ('shoodow', 'accessories'),
    ('shopkins', 'kids'),
    ('shopkins', 'toys'),
    ('shua', 'apparel'),
    ('shuaiwa', 'electronics'),
    ('shunfa', 'appliances'),
    ('shunfa', 'electronics'),
    ('shure', 'electronics'),
    ('siberia', 'apparel'),
    ('siberia', 'accessories'),
    ('sibin', 'apparel'),
    ('sibirskietovary', 'country_yard'),
    ('sibirskietovary', 'construction'),
    ('sibrteh', 'appliances'),
    ('sibrteh', 'electronics'),
    ('siee', 'electronics');
```
[2024-12-05T22:29:53.218+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:29:53.219+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:29:06.493688+00:00, execution_date=20241205T222906, start_date=20241205T222911, end_date=20241205T222953
[2024-12-05T22:29:53.264+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:29:53.282+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:29:53.285+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
