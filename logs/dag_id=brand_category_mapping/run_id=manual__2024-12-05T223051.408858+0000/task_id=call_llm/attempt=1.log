[2024-12-05T22:30:56.403+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:30:56.419+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:30:51.408858+00:00 [queued]>
[2024-12-05T22:30:56.427+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:30:51.408858+00:00 [queued]>
[2024-12-05T22:30:56.427+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:30:56.441+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:30:51.408858+00:00
[2024-12-05T22:30:56.447+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7590) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:30:56.449+0000] {standard_task_runner.py:72} INFO - Started process 7591 to run task
[2024-12-05T22:30:56.449+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:30:51.408858+00:00', '--job-id', '1650', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpqk7em1rg']
[2024-12-05T22:30:56.451+0000] {standard_task_runner.py:105} INFO - Job 1650: Subtask call_llm
[2024-12-05T22:30:56.487+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:30:51.408858+00:00 [running]> on host c7780884450d
[2024-12-05T22:30:56.556+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:30:51.408858+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:30:51.408858+00:00'
[2024-12-05T22:30:56.557+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:30:56.577+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['sincotoys', 'sindbad', 'singer', 'sinisalo', 'sinopine', 'sinotex', 'sinusprofi', 'sirius', 'sirpi', 'sis', 'sisi', 'sisley', 'siton', 'sitparad', 'sjaudio', 'sjcam', 'sjrc', 'sk', 'skad', 'skagen', 'skandika', 'skazocnyjpatrul', 'skechers', 'ski-doo', 'skillmax'], 'next_index': 4625}
[2024-12-05T22:30:56.578+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:30:56.993+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:31:16.103+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search results:

1. **sincotoys**: kids
2. **sindbad**: apparel, accessories
3. **singer**: appliances, accessories
4. **sinisalo**: apparel, sport
5. **sinopine**: electronics
6. **sinotex**: apparel
7. **sinusprofi**: medicine
8. **sirius**: electronics
9. **sirpi**: accessories
10. **sis**: apparel
11. **sisi**: apparel
12. **sisley**: apparel, accessories
13. **siton**: furniture
14. **sitparad**: furniture
15. **sjaudio**: electronics
16. **sjcam**: electronics
17. **sjrc**: electronics
18. **sk**: apparel, sport
19. **skad**: apparel
20. **skagen**: accessories
21. **skandika**: appliances, electronics
22. **skazocnyjpatrul**: kids
23. **skechers**: apparel, sport
24. **ski-doo**: auto, sport
25. **skillmax**: sport

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('sincotoys', 'kids'),
    ('sindbad', 'apparel'),
    ('sindbad', 'accessories'),
    ('singer', 'appliances'),
    ('singer', 'accessories'),
    ('sinisalo', 'apparel'),
    ('sinisalo', 'sport'),
    ('sinopine', 'electronics'),
    ('sinotex', 'apparel'),
    ('sinusprofi', 'medicine'),
    ('sirius', 'electronics'),
    ('sirpi', 'accessories'),
    ('sis', 'apparel'),
    ('sisi', 'apparel'),
    ('sisley', 'apparel'),
    ('sisley', 'accessories'),
    ('siton', 'furniture'),
    ('sitparad', 'furniture'),
    ('sjaudio', 'electronics'),
    ('sjcam', 'electronics'),
    ('sjrc', 'electronics'),
    ('sk', 'apparel'),
    ('sk', 'sport'),
    ('skad', 'apparel'),
    ('skagen', 'accessories'),
    ('skandika', 'appliances'),
    ('skandika', 'electronics'),
    ('skazocnyjpatrul', 'kids'),
    ('skechers', 'apparel'),
    ('skechers', 'sport'),
    ('ski-doo', 'auto'),
    ('ski-doo', 'sport'),
    ('skillmax', 'sport');
```
[2024-12-05T22:31:16.104+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search results:

1. **sincotoys**: kids
2. **sindbad**: apparel, accessories
3. **singer**: appliances, accessories
4. **sinisalo**: apparel, sport
5. **sinopine**: electronics
6. **sinotex**: apparel
7. **sinusprofi**: medicine
8. **sirius**: electronics
9. **sirpi**: accessories
10. **sis**: apparel
11. **sisi**: apparel
12. **sisley**: apparel, accessories
13. **siton**: furniture
14. **sitparad**: furniture
15. **sjaudio**: electronics
16. **sjcam**: electronics
17. **sjrc**: electronics
18. **sk**: apparel, sport
19. **skad**: apparel
20. **skagen**: accessories
21. **skandika**: appliances, electronics
22. **skazocnyjpatrul**: kids
23. **skechers**: apparel, sport
24. **ski-doo**: auto, sport
25. **skillmax**: sport

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('sincotoys', 'kids'),
    ('sindbad', 'apparel'),
    ('sindbad', 'accessories'),
    ('singer', 'appliances'),
    ('singer', 'accessories'),
    ('sinisalo', 'apparel'),
    ('sinisalo', 'sport'),
    ('sinopine', 'electronics'),
    ('sinotex', 'apparel'),
    ('sinusprofi', 'medicine'),
    ('sirius', 'electronics'),
    ('sirpi', 'accessories'),
    ('sis', 'apparel'),
    ('sisi', 'apparel'),
    ('sisley', 'apparel'),
    ('sisley', 'accessories'),
    ('siton', 'furniture'),
    ('sitparad', 'furniture'),
    ('sjaudio', 'electronics'),
    ('sjcam', 'electronics'),
    ('sjrc', 'electronics'),
    ('sk', 'apparel'),
    ('sk', 'sport'),
    ('skad', 'apparel'),
    ('skagen', 'accessories'),
    ('skandika', 'appliances'),
    ('skandika', 'electronics'),
    ('skazocnyjpatrul', 'kids'),
    ('skechers', 'apparel'),
    ('skechers', 'sport'),
    ('ski-doo', 'auto'),
    ('ski-doo', 'sport'),
    ('skillmax', 'sport');
```
[2024-12-05T22:31:16.122+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:31:16.123+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:30:51.408858+00:00, execution_date=20241205T223051, start_date=20241205T223056, end_date=20241205T223116
[2024-12-05T22:31:16.168+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:31:16.185+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:31:16.189+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
