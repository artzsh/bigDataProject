[2024-12-05T21:12:27.347+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:12:27.360+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:12:22.091248+00:00 [queued]>
[2024-12-05T21:12:27.367+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:12:22.091248+00:00 [queued]>
[2024-12-05T21:12:27.367+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:12:27.384+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:12:22.091248+00:00
[2024-12-05T21:12:27.391+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3418) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:12:27.393+0000] {standard_task_runner.py:72} INFO - Started process 3419 to run task
[2024-12-05T21:12:27.393+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:12:22.091248+00:00', '--job-id', '750', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp744ra5vk']
[2024-12-05T21:12:27.395+0000] {standard_task_runner.py:105} INFO - Job 750: Subtask call_llm
[2024-12-05T21:12:27.433+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:12:22.091248+00:00 [running]> on host c7780884450d
[2024-12-05T21:12:27.506+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:12:22.091248+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:12:22.091248+00:00'
[2024-12-05T21:12:27.507+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:12:27.525+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['bulin', 'bulova', 'bumbaram', 'bumbleride', 'bumprider', 'bunchems', 'burberry', 'burc', 'burgerschuhe', 'burna', 'burokrat', 'burton', 'bushnell', 'butterfly', 'buttonblue', 'buzzbee', 'bvlgari', 'b.well', 'bwell', 'bws', 'bwt', 'bxg', 'byintek', 'bykilian', 'byotea'], 'next_index': 875}
[2024-12-05T21:12:27.526+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:12:27.957+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:12:42.254+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the brands to their respective categories based on the search results and logical deductions:

1. **bulin**: country_yard
2. **bulova**: accessories, apparel
3. **bumbaram**: kids
4. **bumbleride**: kids, accessories
5. **bumprider**: kids, accessories
6. **bunchems**: kids
7. **burberry**: apparel, accessories
8. **burc**: apparel
9. **burgerschuhe**: apparel, accessories
10. **burna**: apparel
11. **burokrat**: stationery
12. **burton**: apparel, accessories, sport
13. **bushnell**: electronics, sport
14. **butterfly**: stationery, kids
15. **buttonblue**: kids, apparel
16. **buzzbee**: kids
17. **bvlgari**: accessories
18. **b.well**: medicine
19. **bwell**: medicine
20. **bws**: appliances
21. **bwt**: appliances
22. **bxg**: apparel
23. **byintek**: electronics
24. **bykilian**: accessories
25. **byotea**: medicine

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('bulin', 'country_yard'),
    ('bulova', 'accessories'),
    ('bulova', 'apparel'),
    ('bumbaram', 'kids'),
    ('bumbleride', 'kids'),
    ('bumbleride', 'accessories'),
    ('bumprider', 'kids'),
    ('bunchems', 'kids'),
    ('burberry', 'apparel'),
    ('burberry', 'accessories'),
    ('burc', 'apparel'),
    ('burgerschuhe', 'apparel'),
    ('burgerschuhe', 'accessories'),
    ('burna', 'apparel'),
    ('burokrat', 'stationery'),
    ('burton', 'apparel'),
    ('burton', 'accessories'),
    ('burton', 'sport'),
    ('bushnell', 'electronics'),
    ('bushnell', 'sport'),
    ('butterfly', 'stationery'),
    ('butterfly', 'kids'),
    ('buttonblue', 'kids'),
    ('buttonblue', 'apparel'),
    ('buzzbee', 'kids'),
    ('bvlgari', 'accessories'),
    ('b.well', 'medicine'),
    ('bwell', 'medicine'),
    ('bws', 'appliances'),
    ('bwt', 'appliances'),
    ('bxg', 'apparel'),
    ('byintek', 'electronics'),
    ('bykilian', 'accessories'),
    ('byotea', 'medicine');
```
[2024-12-05T21:12:42.254+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the brands to their respective categories based on the search results and logical deductions:

1. **bulin**: country_yard
2. **bulova**: accessories, apparel
3. **bumbaram**: kids
4. **bumbleride**: kids, accessories
5. **bumprider**: kids, accessories
6. **bunchems**: kids
7. **burberry**: apparel, accessories
8. **burc**: apparel
9. **burgerschuhe**: apparel, accessories
10. **burna**: apparel
11. **burokrat**: stationery
12. **burton**: apparel, accessories, sport
13. **bushnell**: electronics, sport
14. **butterfly**: stationery, kids
15. **buttonblue**: kids, apparel
16. **buzzbee**: kids
17. **bvlgari**: accessories
18. **b.well**: medicine
19. **bwell**: medicine
20. **bws**: appliances
21. **bwt**: appliances
22. **bxg**: apparel
23. **byintek**: electronics
24. **bykilian**: accessories
25. **byotea**: medicine

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('bulin', 'country_yard'),
    ('bulova', 'accessories'),
    ('bulova', 'apparel'),
    ('bumbaram', 'kids'),
    ('bumbleride', 'kids'),
    ('bumbleride', 'accessories'),
    ('bumprider', 'kids'),
    ('bunchems', 'kids'),
    ('burberry', 'apparel'),
    ('burberry', 'accessories'),
    ('burc', 'apparel'),
    ('burgerschuhe', 'apparel'),
    ('burgerschuhe', 'accessories'),
    ('burna', 'apparel'),
    ('burokrat', 'stationery'),
    ('burton', 'apparel'),
    ('burton', 'accessories'),
    ('burton', 'sport'),
    ('bushnell', 'electronics'),
    ('bushnell', 'sport'),
    ('butterfly', 'stationery'),
    ('butterfly', 'kids'),
    ('buttonblue', 'kids'),
    ('buttonblue', 'apparel'),
    ('buzzbee', 'kids'),
    ('bvlgari', 'accessories'),
    ('b.well', 'medicine'),
    ('bwell', 'medicine'),
    ('bws', 'appliances'),
    ('bwt', 'appliances'),
    ('bxg', 'apparel'),
    ('byintek', 'electronics'),
    ('bykilian', 'accessories'),
    ('byotea', 'medicine');
```
[2024-12-05T21:12:42.273+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:12:42.273+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:12:22.091248+00:00, execution_date=20241205T211222, start_date=20241205T211227, end_date=20241205T211242
[2024-12-05T21:12:42.315+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:12:42.332+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:12:42.335+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
