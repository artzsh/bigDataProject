[2024-12-05T22:22:45.286+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:22:45.300+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:22:40.449620+00:00 [queued]>
[2024-12-05T22:22:45.308+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:22:40.449620+00:00 [queued]>
[2024-12-05T22:22:45.309+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:22:45.323+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:22:40.449620+00:00
[2024-12-05T22:22:45.329+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7170) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:22:45.330+0000] {standard_task_runner.py:72} INFO - Started process 7171 to run task
[2024-12-05T22:22:45.331+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:22:40.449620+00:00', '--job-id', '1560', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpldawhz65']
[2024-12-05T22:22:45.333+0000] {standard_task_runner.py:105} INFO - Job 1560: Subtask call_llm
[2024-12-05T22:22:45.371+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:22:40.449620+00:00 [running]> on host c7780884450d
[2024-12-05T22:22:45.436+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:22:40.449620+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:22:40.449620+00:00'
[2024-12-05T22:22:45.437+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:22:45.455+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['rev', 'revery', 'revit', 'revlon', 'revolution', 'revuele', 'revyline', 'rexco', 'rexona', 'rextor', 'rezult', 'rhapsody', 'rheinberger', 'rhythm', 'rial', 'ricco', 'riche', 'ricoh', 'ride', 'ridian', 'rieker', 'rihanna', 'rika', 'riko', 'riks'], 'next_index': 4250}
[2024-12-05T22:22:45.456+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:22:45.867+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:23:00.695+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the provided brands to the predefined categories based on the search results and general knowledge about the brands:

1. **rev** - apparel, accessories
2. **revery** - apparel, accessories
3. **revit** - computers, construction
4. **revlon** - cosmetics, accessories
5. **revolution** - electronics, appliances
6. **revuele** - cosmetics, accessories
7. **revyline** - stationery
8. **rexco** - construction, appliances
9. **rexona** - personal care, cosmetics
10. **rextor** - electronics
11. **rezult** - stationery
12. **rhapsody** - apparel
13. **rheinberger** - furniture
14. **rhythm** - electronics
15. **rial** - apparel
16. **ricco** - apparel, accessories
17. **riche** - apparel, accessories
18. **ricoh** - computers, electronics
19. **ride** - sport, apparel
20. **ridian** - electronics
21. **rieker** - footwear, apparel
22. **rihanna** - apparel, accessories
23. **rika** - apparel
24. **riko** - electronics
25. **riks** - apparel

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rev', 'apparel'),
    ('rev', 'accessories'),
    ('revery', 'apparel'),
    ('revery', 'accessories'),
    ('revit', 'computers'),
    ('revit', 'construction'),
    ('revlon', 'cosmetics'),
    ('revlon', 'accessories'),
    ('revolution', 'electronics'),
    ('revolution', 'appliances'),
    ('revuele', 'cosmetics'),
    ('revuele', 'accessories'),
    ('revyline', 'stationery'),
    ('rexco', 'construction'),
    ('rexco', 'appliances'),
    ('rexona', 'personal care'),
    ('rexona', 'cosmetics'),
    ('rextor', 'electronics'),
    ('rezult', 'stationery'),
    ('rhapsody', 'apparel'),
    ('rheinberger', 'furniture'),
    ('rhythm', 'electronics'),
    ('rial', 'apparel'),
    ('ricco', 'apparel'),
    ('ricco', 'accessories'),
    ('riche', 'apparel'),
    ('riche', 'accessories'),
    ('ricoh', 'computers'),
    ('ricoh', 'electronics'),
    ('ride', 'sport'),
    ('ride', 'apparel'),
    ('ridian', 'electronics'),
    ('rieker', 'footwear'),
    ('rieker', 'apparel'),
    ('rihanna', 'apparel'),
    ('rihanna', 'accessories'),
    ('rika', 'apparel'),
    ('riko', 'electronics'),
    ('riks', 'apparel');
```
[2024-12-05T22:23:00.696+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the provided brands to the predefined categories based on the search results and general knowledge about the brands:

1. **rev** - apparel, accessories
2. **revery** - apparel, accessories
3. **revit** - computers, construction
4. **revlon** - cosmetics, accessories
5. **revolution** - electronics, appliances
6. **revuele** - cosmetics, accessories
7. **revyline** - stationery
8. **rexco** - construction, appliances
9. **rexona** - personal care, cosmetics
10. **rextor** - electronics
11. **rezult** - stationery
12. **rhapsody** - apparel
13. **rheinberger** - furniture
14. **rhythm** - electronics
15. **rial** - apparel
16. **ricco** - apparel, accessories
17. **riche** - apparel, accessories
18. **ricoh** - computers, electronics
19. **ride** - sport, apparel
20. **ridian** - electronics
21. **rieker** - footwear, apparel
22. **rihanna** - apparel, accessories
23. **rika** - apparel
24. **riko** - electronics
25. **riks** - apparel

Now, I will generate the SQL INSERT statement based on the above mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rev', 'apparel'),
    ('rev', 'accessories'),
    ('revery', 'apparel'),
    ('revery', 'accessories'),
    ('revit', 'computers'),
    ('revit', 'construction'),
    ('revlon', 'cosmetics'),
    ('revlon', 'accessories'),
    ('revolution', 'electronics'),
    ('revolution', 'appliances'),
    ('revuele', 'cosmetics'),
    ('revuele', 'accessories'),
    ('revyline', 'stationery'),
    ('rexco', 'construction'),
    ('rexco', 'appliances'),
    ('rexona', 'personal care'),
    ('rexona', 'cosmetics'),
    ('rextor', 'electronics'),
    ('rezult', 'stationery'),
    ('rhapsody', 'apparel'),
    ('rheinberger', 'furniture'),
    ('rhythm', 'electronics'),
    ('rial', 'apparel'),
    ('ricco', 'apparel'),
    ('ricco', 'accessories'),
    ('riche', 'apparel'),
    ('riche', 'accessories'),
    ('ricoh', 'computers'),
    ('ricoh', 'electronics'),
    ('ride', 'sport'),
    ('ride', 'apparel'),
    ('ridian', 'electronics'),
    ('rieker', 'footwear'),
    ('rieker', 'apparel'),
    ('rihanna', 'apparel'),
    ('rihanna', 'accessories'),
    ('rika', 'apparel'),
    ('riko', 'electronics'),
    ('riks', 'apparel');
```
[2024-12-05T22:23:00.718+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:23:00.718+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:22:40.449620+00:00, execution_date=20241205T222240, start_date=20241205T222245, end_date=20241205T222300
[2024-12-05T22:23:00.763+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:23:00.782+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:23:00.785+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
