[2024-12-05T20:59:41.804+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:59:41.817+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:59:36.422282+00:00 [queued]>
[2024-12-05T20:59:41.824+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:59:36.422282+00:00 [queued]>
[2024-12-05T20:59:41.824+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:59:41.836+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:59:36.422282+00:00
[2024-12-05T20:59:41.842+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2742) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:59:41.844+0000] {standard_task_runner.py:72} INFO - Started process 2743 to run task
[2024-12-05T20:59:41.844+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:59:36.422282+00:00', '--job-id', '606', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp7wbyhllf']
[2024-12-05T20:59:41.846+0000] {standard_task_runner.py:105} INFO - Job 606: Subtask call_llm
[2024-12-05T20:59:41.881+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:59:36.422282+00:00 [running]> on host c7780884450d
[2024-12-05T20:59:41.951+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:59:36.422282+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:59:36.422282+00:00'
[2024-12-05T20:59:41.952+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:59:41.968+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['annaluma', 'annasui', 'annchery', 'annovireverberi', 'anon', 'anreks', 'anskin', 'ansmann', 'ant', 'anta', 'antec', 'antel', 'antika', 'antonio', 'antoniolavazza', 'anytek', 'aoc', 'aoki', 'aolais', 'aopen', 'aorus', 'aoteli', 'apacer', 'apache', 'apart'], 'next_index': 275}
[2024-12-05T20:59:41.969+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:59:42.394+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:59:59.456+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the brands provided and their product categories, here's the mapping of each brand to the predefined categories:

1. **annaluma**: electronics
2. **annasui**: apparel, accessories
3. **annchery**: apparel
4. **annovireverberi**: accessories
5. **anon**: apparel, accessories
6. **anreks**: electronics
7. **anskin**: medicine
8. **ansmann**: electronics
9. **ant**: apparel
10. **anta**: apparel, sport
11. **antec**: electronics, appliances
12. **antel**: electronics
13. **antika**: furniture
14. **antonio**: furniture
15. **antoniolavazza**: appliances
16. **anytek**: electronics
17. **aoc**: electronics
18. **aoki**: apparel
19. **aolais**: apparel
20. **aopen**: computers, electronics
21. **aorus**: computers, electronics
22. **aoteli**: furniture
23. **apacer**: computers, electronics
24. **apache**: auto
25. **apart**: apparel

Now, here is the SQL INSERT statement for the brand-category mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('annaluma', 'electronics'),
    ('annasui', 'apparel'),
    ('annasui', 'accessories'),
    ('annchery', 'apparel'),
    ('annovireverberi', 'accessories'),
    ('anon', 'apparel'),
    ('anon', 'accessories'),
    ('anreks', 'electronics'),
    ('anskin', 'medicine'),
    ('ansmann', 'electronics'),
    ('ant', 'apparel'),
    ('anta', 'apparel'),
    ('anta', 'sport'),
    ('antec', 'electronics'),
    ('antec', 'appliances'),
    ('antel', 'electronics'),
    ('antika', 'furniture'),
    ('antonio', 'furniture'),
    ('antoniolavazza', 'appliances'),
    ('anytek', 'electronics'),
    ('aoc', 'electronics'),
    ('aoki', 'apparel'),
    ('aolais', 'apparel'),
    ('aopen', 'computers'),
    ('aopen', 'electronics'),
    ('aorus', 'computers'),
    ('aorus', 'electronics'),
    ('aoteli', 'furniture'),
    ('apacer', 'computers'),
    ('apacer', 'electronics'),
    ('apache', 'auto'),
    ('apart', 'apparel');
```
[2024-12-05T20:59:59.457+0000] {python.py:240} INFO - Done. Returned value was: Based on the brands provided and their product categories, here's the mapping of each brand to the predefined categories:

1. **annaluma**: electronics
2. **annasui**: apparel, accessories
3. **annchery**: apparel
4. **annovireverberi**: accessories
5. **anon**: apparel, accessories
6. **anreks**: electronics
7. **anskin**: medicine
8. **ansmann**: electronics
9. **ant**: apparel
10. **anta**: apparel, sport
11. **antec**: electronics, appliances
12. **antel**: electronics
13. **antika**: furniture
14. **antonio**: furniture
15. **antoniolavazza**: appliances
16. **anytek**: electronics
17. **aoc**: electronics
18. **aoki**: apparel
19. **aolais**: apparel
20. **aopen**: computers, electronics
21. **aorus**: computers, electronics
22. **aoteli**: furniture
23. **apacer**: computers, electronics
24. **apache**: auto
25. **apart**: apparel

Now, here is the SQL INSERT statement for the brand-category mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('annaluma', 'electronics'),
    ('annasui', 'apparel'),
    ('annasui', 'accessories'),
    ('annchery', 'apparel'),
    ('annovireverberi', 'accessories'),
    ('anon', 'apparel'),
    ('anon', 'accessories'),
    ('anreks', 'electronics'),
    ('anskin', 'medicine'),
    ('ansmann', 'electronics'),
    ('ant', 'apparel'),
    ('anta', 'apparel'),
    ('anta', 'sport'),
    ('antec', 'electronics'),
    ('antec', 'appliances'),
    ('antel', 'electronics'),
    ('antika', 'furniture'),
    ('antonio', 'furniture'),
    ('antoniolavazza', 'appliances'),
    ('anytek', 'electronics'),
    ('aoc', 'electronics'),
    ('aoki', 'apparel'),
    ('aolais', 'apparel'),
    ('aopen', 'computers'),
    ('aopen', 'electronics'),
    ('aorus', 'computers'),
    ('aorus', 'electronics'),
    ('aoteli', 'furniture'),
    ('apacer', 'computers'),
    ('apacer', 'electronics'),
    ('apache', 'auto'),
    ('apart', 'apparel');
```
[2024-12-05T20:59:59.478+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:59:59.478+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:59:36.422282+00:00, execution_date=20241205T205936, start_date=20241205T205941, end_date=20241205T205959
[2024-12-05T20:59:59.508+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:59:59.524+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:59:59.527+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
