[2024-12-05T22:23:39.282+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:23:39.296+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:23:34.872539+00:00 [queued]>
[2024-12-05T22:23:39.302+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:23:34.872539+00:00 [queued]>
[2024-12-05T22:23:39.303+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:23:39.320+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:23:34.872539+00:00
[2024-12-05T22:23:39.327+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7226) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:23:39.329+0000] {standard_task_runner.py:72} INFO - Started process 7227 to run task
[2024-12-05T22:23:39.329+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:23:34.872539+00:00', '--job-id', '1572', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp25sa2nzb']
[2024-12-05T22:23:39.332+0000] {standard_task_runner.py:105} INFO - Job 1572: Subtask call_llm
[2024-12-05T22:23:39.372+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:23:34.872539+00:00 [running]> on host c7780884450d
[2024-12-05T22:23:39.442+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:23:34.872539+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:23:34.872539+00:00'
[2024-12-05T22:23:39.443+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:23:39.461+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['rnk', 'roadhouse', 'roadmarch', 'roadstone', 'roadwing', 'roadx', 'roamer', 'robens', 'robertobravo', 'robertocavalli', 'robins', 'roblox', 'robobloq', 'robobuilder', 'robocarpoli', 'roborobo', 'roborock', 'robotime', 'robotis', 'roca', 'roces', 'rochas', 'rock', 'rockdale', 'rockmybaby'], 'next_index': 4300}
[2024-12-05T22:23:39.462+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:23:39.899+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:24:01.555+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here's the mapping of the provided brands to their respective categories based on the search results:

1. **rnk**: electronics
2. **roadhouse**: food (not in predefined categories, but could fit under appliances)
3. **roadmarch**: auto
4. **roadstone**: construction
5. **roadwing**: auto
6. **roadx**: auto
7. **roamer**: apparel, accessories
8. **robens**: country_yard, apparel (outdoor gear)
9. **robertobravo**: apparel
10. **robertocavalli**: apparel, accessories
11. **robins**: apparel (children's clothing)
12. **roblox**: kids, electronics (gaming)
13. **robobloq**: electronics, kids (educational robotics)
14. **robobuilder**: electronics, kids (educational robotics)
15. **robocarpoli**: electronics, kids (toys)
16. **roborobo**: electronics, kids (toys)
17. **roborock**: electronics (home appliances)
18. **robotime**: electronics, kids (toys)
19. **robotis**: electronics (robotics)
20. **roca**: appliances (bathroom fixtures)
21. **roces**: sport (roller skates)
22. **rochas**: apparel, accessories
23. **rock**: apparel
24. **rockdale**: apparel
25. **rockmybaby**: kids, apparel

Now, I will generate the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rnk', 'electronics'),
    ('roadhouse', 'appliances'),
    ('roadmarch', 'auto'),
    ('roadstone', 'construction'),
    ('roadwing', 'auto'),
    ('roadx', 'auto'),
    ('roamer', 'apparel'),
    ('roamer', 'accessories'),
    ('robens', 'country_yard'),
    ('robens', 'apparel'),
    ('robertobravo', 'apparel'),
    ('robertocavalli', 'apparel'),
    ('robertocavalli', 'accessories'),
    ('robins', 'apparel'),
    ('roblox', 'kids'),
    ('roblox', 'electronics'),
    ('robobloq', 'electronics'),
    ('robobloq', 'kids'),
    ('robobuilder', 'electronics'),
    ('robobuilder', 'kids'),
    ('robocarpoli', 'electronics'),
    ('robocarpoli', 'kids'),
    ('roborobo', 'electronics'),
    ('roborobo', 'kids'),
    ('roborock', 'electronics'),
    ('robotime', 'electronics'),
    ('robotime', 'kids'),
    ('robotis', 'electronics'),
    ('roca', 'appliances'),
    ('roces', 'sport'),
    ('rochas', 'apparel'),
    ('rochas', 'accessories'),
    ('rock', 'apparel'),
    ('rockdale', 'apparel'),
    ('rockmybaby', 'kids'),
    ('rockmybaby', 'apparel');
``` 

This SQL statement reflects the mapping of each brand to the appropriate categories based on the information gathered.
[2024-12-05T22:24:01.557+0000] {python.py:240} INFO - Done. Returned value was: Here's the mapping of the provided brands to their respective categories based on the search results:

1. **rnk**: electronics
2. **roadhouse**: food (not in predefined categories, but could fit under appliances)
3. **roadmarch**: auto
4. **roadstone**: construction
5. **roadwing**: auto
6. **roadx**: auto
7. **roamer**: apparel, accessories
8. **robens**: country_yard, apparel (outdoor gear)
9. **robertobravo**: apparel
10. **robertocavalli**: apparel, accessories
11. **robins**: apparel (children's clothing)
12. **roblox**: kids, electronics (gaming)
13. **robobloq**: electronics, kids (educational robotics)
14. **robobuilder**: electronics, kids (educational robotics)
15. **robocarpoli**: electronics, kids (toys)
16. **roborobo**: electronics, kids (toys)
17. **roborock**: electronics (home appliances)
18. **robotime**: electronics, kids (toys)
19. **robotis**: electronics (robotics)
20. **roca**: appliances (bathroom fixtures)
21. **roces**: sport (roller skates)
22. **rochas**: apparel, accessories
23. **rock**: apparel
24. **rockdale**: apparel
25. **rockmybaby**: kids, apparel

Now, I will generate the SQL INSERT statement based on the mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('rnk', 'electronics'),
    ('roadhouse', 'appliances'),
    ('roadmarch', 'auto'),
    ('roadstone', 'construction'),
    ('roadwing', 'auto'),
    ('roadx', 'auto'),
    ('roamer', 'apparel'),
    ('roamer', 'accessories'),
    ('robens', 'country_yard'),
    ('robens', 'apparel'),
    ('robertobravo', 'apparel'),
    ('robertocavalli', 'apparel'),
    ('robertocavalli', 'accessories'),
    ('robins', 'apparel'),
    ('roblox', 'kids'),
    ('roblox', 'electronics'),
    ('robobloq', 'electronics'),
    ('robobloq', 'kids'),
    ('robobuilder', 'electronics'),
    ('robobuilder', 'kids'),
    ('robocarpoli', 'electronics'),
    ('robocarpoli', 'kids'),
    ('roborobo', 'electronics'),
    ('roborobo', 'kids'),
    ('roborock', 'electronics'),
    ('robotime', 'electronics'),
    ('robotime', 'kids'),
    ('robotis', 'electronics'),
    ('roca', 'appliances'),
    ('roces', 'sport'),
    ('rochas', 'apparel'),
    ('rochas', 'accessories'),
    ('rock', 'apparel'),
    ('rockdale', 'apparel'),
    ('rockmybaby', 'kids'),
    ('rockmybaby', 'apparel');
``` 

This SQL statement reflects the mapping of each brand to the appropriate categories based on the information gathered.
[2024-12-05T22:24:01.580+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:24:01.580+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:23:34.872539+00:00, execution_date=20241205T222334, start_date=20241205T222339, end_date=20241205T222401
[2024-12-05T22:24:01.619+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:24:01.635+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:24:01.638+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
