[2024-12-05T21:47:04.040+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:47:04.052+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:46:59.102141+00:00 [queued]>
[2024-12-05T21:47:04.058+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:46:59.102141+00:00 [queued]>
[2024-12-05T21:47:04.059+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:47:04.070+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:46:59.102141+00:00
[2024-12-05T21:47:04.076+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5273) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:47:04.077+0000] {standard_task_runner.py:72} INFO - Started process 5274 to run task
[2024-12-05T21:47:04.077+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:46:59.102141+00:00', '--job-id', '1152', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp5k78_fnl']
[2024-12-05T21:47:04.079+0000] {standard_task_runner.py:105} INFO - Job 1152: Subtask call_llm
[2024-12-05T21:47:04.113+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:46:59.102141+00:00 [running]> on host c7780884450d
[2024-12-05T21:47:04.171+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:46:59.102141+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:46:59.102141+00:00'
[2024-12-05T21:47:04.172+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:47:04.189+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['kampfer', 'kamskaaposuda', 'kandf', 'kangkang', 'kanizea', 'kanzler', 'kapika', 'kapitoska', 'kaplanser', 'kapo', 'kapous', 'kapousprofessional', 'kappa', 'kapsen', 'karadium', 'karaja', 'karapuz', 'karat', 'karavaevskaauf', 'karcher', 'karerapress', 'kari', 'karma', 'karmababy', 'karmen'], 'next_index': 2550}
[2024-12-05T21:47:04.189+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:47:04.603+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:47:28.960+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the provided brands, I will perform the steps outlined to determine the appropriate categories for each brand. Here are the results:

1. **kampfer**: kitchen appliances, country yard
2. **kamskaaposuda**: kitchen appliances
3. **kandf**: stationery
4. **kangkang**: kids
5. **kanizea**: apparel
6. **kanzler**: apparel, accessories
7. **kapika**: kids, apparel
8. **kapitoska**: kids, apparel
9. **kaplanser**: apparel
10. **kapo**: apparel
11. **kapous**: beauty, accessories
12. **kapousprofessional**: beauty, accessories
13. **kappa**: apparel, sport
14. **kapsen**: apparel
15. **karadium**: beauty, cosmetics
16. **karaja**: beauty, cosmetics
17. **karapuz**: kids
18. **karat**: jewelry, accessories
19. **karavaevskaauf**: apparel
20. **karcher**: appliances, construction
21. **karerapress**: stationery
22. **kari**: beauty, cosmetics
23. **karma**: beauty, cosmetics
24. **karmababy**: kids
25. **karmen**: apparel, accessories

Now, I will generate the SQL INSERT statement based on the categories assigned:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kampfer', 'appliances'),
    ('kampfer', 'country_yard'),
    ('kamskaaposuda', 'appliances'),
    ('kandf', 'stationery'),
    ('kangkang', 'kids'),
    ('kanizea', 'apparel'),
    ('kanzler', 'apparel'),
    ('kanzler', 'accessories'),
    ('kapika', 'kids'),
    ('kapika', 'apparel'),
    ('kapitoska', 'kids'),
    ('kapitoska', 'apparel'),
    ('kaplanser', 'apparel'),
    ('kapo', 'apparel'),
    ('kapous', 'accessories'),
    ('kapousprofessional', 'accessories'),
    ('kappa', 'apparel'),
    ('kappa', 'sport'),
    ('kapsen', 'apparel'),
    ('karadium', 'cosmetics'),
    ('karaja', 'cosmetics'),
    ('karapuz', 'kids'),
    ('karat', 'accessories'),
    ('karavaevskaauf', 'apparel'),
    ('karcher', 'appliances'),
    ('karcher', 'construction'),
    ('karerapress', 'stationery'),
    ('kari', 'cosmetics'),
    ('karma', 'cosmetics'),
    ('karmababy', 'kids'),
    ('karmen', 'apparel'),
    ('karmen', 'accessories');
```

This SQL statement inserts the mapping of each brand to its respective categories as determined.
[2024-12-05T21:47:28.960+0000] {python.py:240} INFO - Done. Returned value was: Based on the provided brands, I will perform the steps outlined to determine the appropriate categories for each brand. Here are the results:

1. **kampfer**: kitchen appliances, country yard
2. **kamskaaposuda**: kitchen appliances
3. **kandf**: stationery
4. **kangkang**: kids
5. **kanizea**: apparel
6. **kanzler**: apparel, accessories
7. **kapika**: kids, apparel
8. **kapitoska**: kids, apparel
9. **kaplanser**: apparel
10. **kapo**: apparel
11. **kapous**: beauty, accessories
12. **kapousprofessional**: beauty, accessories
13. **kappa**: apparel, sport
14. **kapsen**: apparel
15. **karadium**: beauty, cosmetics
16. **karaja**: beauty, cosmetics
17. **karapuz**: kids
18. **karat**: jewelry, accessories
19. **karavaevskaauf**: apparel
20. **karcher**: appliances, construction
21. **karerapress**: stationery
22. **kari**: beauty, cosmetics
23. **karma**: beauty, cosmetics
24. **karmababy**: kids
25. **karmen**: apparel, accessories

Now, I will generate the SQL INSERT statement based on the categories assigned:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('kampfer', 'appliances'),
    ('kampfer', 'country_yard'),
    ('kamskaaposuda', 'appliances'),
    ('kandf', 'stationery'),
    ('kangkang', 'kids'),
    ('kanizea', 'apparel'),
    ('kanzler', 'apparel'),
    ('kanzler', 'accessories'),
    ('kapika', 'kids'),
    ('kapika', 'apparel'),
    ('kapitoska', 'kids'),
    ('kapitoska', 'apparel'),
    ('kaplanser', 'apparel'),
    ('kapo', 'apparel'),
    ('kapous', 'accessories'),
    ('kapousprofessional', 'accessories'),
    ('kappa', 'apparel'),
    ('kappa', 'sport'),
    ('kapsen', 'apparel'),
    ('karadium', 'cosmetics'),
    ('karaja', 'cosmetics'),
    ('karapuz', 'kids'),
    ('karat', 'accessories'),
    ('karavaevskaauf', 'apparel'),
    ('karcher', 'appliances'),
    ('karcher', 'construction'),
    ('karerapress', 'stationery'),
    ('kari', 'cosmetics'),
    ('karma', 'cosmetics'),
    ('karmababy', 'kids'),
    ('karmen', 'apparel'),
    ('karmen', 'accessories');
```

This SQL statement inserts the mapping of each brand to its respective categories as determined.
[2024-12-05T21:47:28.978+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:47:28.979+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:46:59.102141+00:00, execution_date=20241205T214659, start_date=20241205T214704, end_date=20241205T214728
[2024-12-05T21:47:29.031+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:47:29.048+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:47:29.052+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
