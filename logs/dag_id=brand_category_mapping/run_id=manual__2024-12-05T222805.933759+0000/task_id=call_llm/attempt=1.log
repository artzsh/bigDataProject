[2024-12-05T22:28:11.601+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:28:11.613+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:28:05.933759+00:00 [queued]>
[2024-12-05T22:28:11.620+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:28:05.933759+00:00 [queued]>
[2024-12-05T22:28:11.620+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:28:11.632+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:28:05.933759+00:00
[2024-12-05T22:28:11.638+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7471) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:28:11.640+0000] {standard_task_runner.py:72} INFO - Started process 7472 to run task
[2024-12-05T22:28:11.640+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:28:05.933759+00:00', '--job-id', '1626', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmphtod73cz']
[2024-12-05T22:28:11.642+0000] {standard_task_runner.py:105} INFO - Job 1626: Subtask call_llm
[2024-12-05T22:28:11.681+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:28:05.933759+00:00 [running]> on host c7780884450d
[2024-12-05T22:28:11.749+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:28:05.933759+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:28:05.933759+00:00'
[2024-12-05T22:28:11.750+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:28:11.769+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['seintex', 'sekiguchi', 'selby', 'select', 'selective', 'selectiveprofessional', 'selena', 'seletti', 'selma', 'selpak', 'senci', 'senco', 'sencor', 'sennheiser', 'sensen', 'sensis', 'sensodyne', 'senspa', 'serax', 'serebro', 'serebroff', 'sergiorossi', 'sergiotacchini', 'sess', 'sevenfriday'], 'next_index': 4525}
[2024-12-05T22:28:11.769+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:28:12.197+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:28:30.826+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories based on the brands provided:

1. **seintex** - apparel, accessories
2. **sekiguchi** - kids
3. **selby** - furniture
4. **select** - sport
5. **selective** - appliances, electronics
6. **selectiveprofessional** - appliances, electronics
7. **selena** - appliances, electronics
8. **seletti** - furniture, accessories
9. **selma** - apparel, accessories
10. **selpak** - stationery
11. **senci** - appliances
12. **senco** - construction
13. **sencor** - electronics
14. **sennheiser** - electronics
15. **sensen** - appliances
16. **sensis** - apparel, accessories
17. **sensodyne** - medicine
18. **senspa** - medicine, accessories
19. **serax** - furniture, accessories
20. **serebro** - medicine
21. **serebroff** - medicine
22. **sergiorossi** - apparel, accessories
23. **sergiotacchini** - apparel, sport
24. **sess** - apparel
25. **sevenfriday** - accessories

Now, here’s the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('seintex', 'apparel'),
    ('seintex', 'accessories'),
    ('sekiguchi', 'kids'),
    ('selby', 'furniture'),
    ('select', 'sport'),
    ('selective', 'appliances'),
    ('selective', 'electronics'),
    ('selectiveprofessional', 'appliances'),
    ('selectiveprofessional', 'electronics'),
    ('selena', 'appliances'),
    ('selena', 'electronics'),
    ('seletti', 'furniture'),
    ('seletti', 'accessories'),
    ('selma', 'apparel'),
    ('selma', 'accessories'),
    ('selpak', 'stationery'),
    ('senci', 'appliances'),
    ('senco', 'construction'),
    ('sencor', 'electronics'),
    ('sennheiser', 'electronics'),
    ('sensen', 'appliances'),
    ('sensis', 'apparel'),
    ('sensis', 'accessories'),
    ('sensodyne', 'medicine'),
    ('senspa', 'medicine'),
    ('senspa', 'accessories'),
    ('serax', 'furniture'),
    ('serax', 'accessories'),
    ('serebro', 'medicine'),
    ('serebroff', 'medicine'),
    ('sergiorossi', 'apparel'),
    ('sergiorossi', 'accessories'),
    ('sergiotacchini', 'apparel'),
    ('sergiotacchini', 'sport'),
    ('sess', 'apparel'),
    ('sevenfriday', 'accessories');
```
[2024-12-05T22:28:30.826+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories based on the brands provided:

1. **seintex** - apparel, accessories
2. **sekiguchi** - kids
3. **selby** - furniture
4. **select** - sport
5. **selective** - appliances, electronics
6. **selectiveprofessional** - appliances, electronics
7. **selena** - appliances, electronics
8. **seletti** - furniture, accessories
9. **selma** - apparel, accessories
10. **selpak** - stationery
11. **senci** - appliances
12. **senco** - construction
13. **sencor** - electronics
14. **sennheiser** - electronics
15. **sensen** - appliances
16. **sensis** - apparel, accessories
17. **sensodyne** - medicine
18. **senspa** - medicine, accessories
19. **serax** - furniture, accessories
20. **serebro** - medicine
21. **serebroff** - medicine
22. **sergiorossi** - apparel, accessories
23. **sergiotacchini** - apparel, sport
24. **sess** - apparel
25. **sevenfriday** - accessories

Now, here’s the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('seintex', 'apparel'),
    ('seintex', 'accessories'),
    ('sekiguchi', 'kids'),
    ('selby', 'furniture'),
    ('select', 'sport'),
    ('selective', 'appliances'),
    ('selective', 'electronics'),
    ('selectiveprofessional', 'appliances'),
    ('selectiveprofessional', 'electronics'),
    ('selena', 'appliances'),
    ('selena', 'electronics'),
    ('seletti', 'furniture'),
    ('seletti', 'accessories'),
    ('selma', 'apparel'),
    ('selma', 'accessories'),
    ('selpak', 'stationery'),
    ('senci', 'appliances'),
    ('senco', 'construction'),
    ('sencor', 'electronics'),
    ('sennheiser', 'electronics'),
    ('sensen', 'appliances'),
    ('sensis', 'apparel'),
    ('sensis', 'accessories'),
    ('sensodyne', 'medicine'),
    ('senspa', 'medicine'),
    ('senspa', 'accessories'),
    ('serax', 'furniture'),
    ('serax', 'accessories'),
    ('serebro', 'medicine'),
    ('serebroff', 'medicine'),
    ('sergiorossi', 'apparel'),
    ('sergiorossi', 'accessories'),
    ('sergiotacchini', 'apparel'),
    ('sergiotacchini', 'sport'),
    ('sess', 'apparel'),
    ('sevenfriday', 'accessories');
```
[2024-12-05T22:28:30.847+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:28:30.847+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:28:05.933759+00:00, execution_date=20241205T222805, start_date=20241205T222811, end_date=20241205T222830
[2024-12-05T22:28:30.879+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:28:30.895+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:28:30.898+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
