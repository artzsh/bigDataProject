[2024-12-05T22:05:01.098+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:05:01.111+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:04:56.337096+00:00 [queued]>
[2024-12-05T22:05:01.118+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:04:56.337096+00:00 [queued]>
[2024-12-05T22:05:01.119+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:05:01.133+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:04:56.337096+00:00
[2024-12-05T22:05:01.139+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=6225) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:05:01.141+0000] {standard_task_runner.py:72} INFO - Started process 6226 to run task
[2024-12-05T22:05:01.141+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:04:56.337096+00:00', '--job-id', '1356', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp9s3y5dpu']
[2024-12-05T22:05:01.143+0000] {standard_task_runner.py:105} INFO - Job 1356: Subtask call_llm
[2024-12-05T22:05:01.177+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:04:56.337096+00:00 [running]> on host c7780884450d
[2024-12-05T22:05:01.241+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:04:56.337096+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:04:56.337096+00:00'
[2024-12-05T22:05:01.242+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:05:01.259+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['mizuno', 'mjx', 'mkb', 'mltl', 'm.micallef', 'mmicallef', 'm.n.y.', 'mobil', 'mocco', 'modern', 'mof', 'moira', 'mojangelok', 'mojdodyr', 'mojmalys', 'mokkfi', 'moldabela', 'moleskine', 'molfix', 'moliabal', 'molly', 'molnia', 'molodaagvardia', 'molodecnomebel', 'molten'], 'next_index': 3400}
[2024-12-05T22:05:01.259+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:05:01.695+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:05:17.516+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on the search results and the predefined category codes:

1. **mizuno**: sport
2. **mjx**: electronics
3. **mkb**: electronics
4. **mltl**: appliances
5. **m.micallef**: accessories
6. **mmicallef**: accessories
7. **m.n.y.**: apparel
8. **mobil**: auto
9. **mocco**: accessories
10. **modern**: furniture
11. **mof**: appliances
12. **moira**: apparel
13. **mojangelok**: accessories
14. **mojdodyr**: furniture
15. **mojmalys**: kids
16. **mokkfi**: accessories
17. **moldabela**: furniture
18. **moleskine**: stationery
19. **molfix**: kids
20. **moliabal**: appliances
21. **molly**: kids
22. **molnia**: electronics
23. **molodaagvardia**: apparel
24. **molodecnomebel**: furniture
25. **molten**: sport

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('mizuno', 'sport'),
    ('mjx', 'electronics'),
    ('mkb', 'electronics'),
    ('mltl', 'appliances'),
    ('m.micallef', 'accessories'),
    ('mmicallef', 'accessories'),
    ('m.n.y.', 'apparel'),
    ('mobil', 'auto'),
    ('mocco', 'accessories'),
    ('modern', 'furniture'),
    ('mof', 'appliances'),
    ('moira', 'apparel'),
    ('mojangelok', 'accessories'),
    ('mojdodyr', 'furniture'),
    ('mojmalys', 'kids'),
    ('mokkfi', 'accessories'),
    ('moldabela', 'furniture'),
    ('moleskine', 'stationery'),
    ('molfix', 'kids'),
    ('moliabal', 'appliances'),
    ('molly', 'kids'),
    ('molnia', 'electronics'),
    ('molodaagvardia', 'apparel'),
    ('molodecnomebel', 'furniture'),
    ('molten', 'sport');
```
[2024-12-05T22:05:17.518+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on the search results and the predefined category codes:

1. **mizuno**: sport
2. **mjx**: electronics
3. **mkb**: electronics
4. **mltl**: appliances
5. **m.micallef**: accessories
6. **mmicallef**: accessories
7. **m.n.y.**: apparel
8. **mobil**: auto
9. **mocco**: accessories
10. **modern**: furniture
11. **mof**: appliances
12. **moira**: apparel
13. **mojangelok**: accessories
14. **mojdodyr**: furniture
15. **mojmalys**: kids
16. **mokkfi**: accessories
17. **moldabela**: furniture
18. **moleskine**: stationery
19. **molfix**: kids
20. **moliabal**: appliances
21. **molly**: kids
22. **molnia**: electronics
23. **molodaagvardia**: apparel
24. **molodecnomebel**: furniture
25. **molten**: sport

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('mizuno', 'sport'),
    ('mjx', 'electronics'),
    ('mkb', 'electronics'),
    ('mltl', 'appliances'),
    ('m.micallef', 'accessories'),
    ('mmicallef', 'accessories'),
    ('m.n.y.', 'apparel'),
    ('mobil', 'auto'),
    ('mocco', 'accessories'),
    ('modern', 'furniture'),
    ('mof', 'appliances'),
    ('moira', 'apparel'),
    ('mojangelok', 'accessories'),
    ('mojdodyr', 'furniture'),
    ('mojmalys', 'kids'),
    ('mokkfi', 'accessories'),
    ('moldabela', 'furniture'),
    ('moleskine', 'stationery'),
    ('molfix', 'kids'),
    ('moliabal', 'appliances'),
    ('molly', 'kids'),
    ('molnia', 'electronics'),
    ('molodaagvardia', 'apparel'),
    ('molodecnomebel', 'furniture'),
    ('molten', 'sport');
```
[2024-12-05T22:05:17.549+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:05:17.550+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:04:56.337096+00:00, execution_date=20241205T220456, start_date=20241205T220501, end_date=20241205T220517
[2024-12-05T22:05:17.567+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:05:17.587+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:05:17.591+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
