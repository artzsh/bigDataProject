[2024-12-05T21:41:17.360+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:41:17.373+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:41:12.111416+00:00 [queued]>
[2024-12-05T21:41:17.380+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:41:12.111416+00:00 [queued]>
[2024-12-05T21:41:17.381+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:41:17.394+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:41:12.111416+00:00
[2024-12-05T21:41:17.400+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4965) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:41:17.401+0000] {standard_task_runner.py:72} INFO - Started process 4966 to run task
[2024-12-05T21:41:17.401+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:41:12.111416+00:00', '--job-id', '1086', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpyw_lthz8']
[2024-12-05T21:41:17.403+0000] {standard_task_runner.py:105} INFO - Job 1086: Subtask call_llm
[2024-12-05T21:41:17.438+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:41:12.111416+00:00 [running]> on host c7780884450d
[2024-12-05T21:41:17.496+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:41:12.111416+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:41:12.111416+00:00'
[2024-12-05T21:41:17.497+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:41:17.515+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['huawang', 'huawei', 'hubeiindustrialaimiletrading', 'hubert', 'hubsan', 'hubster', 'hudsonbaby', 'huggies', 'hugoboss', 'huile', 'huion', 'humana', 'humidifier', 'hummer', 'humminbird', 'hunter', 'huntkey', 'huntsman', 'huochu', 'huppe', 'hurakan', 'hurom', 'husky', 'husqvarna', 'huter'], 'next_index': 2275}
[2024-12-05T21:41:17.515+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:41:17.931+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:41:37.589+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the provided brands to their respective categories based on the searches:

1. **huawang** - construction
2. **huawei** - electronics, computers
3. **hubeiindustrialaimiletrading** - construction
4. **hubert** - appliances, furniture
5. **hubsan** - electronics
6. **hubster** - apparel, accessories
7. **hudsonbaby** - kids, apparel
8. **huggies** - kids, medicine
9. **hugoboss** - apparel, accessories
10. **huile** - appliances
11. **huion** - electronics
12. **humana** - medicine
13. **humidifier** - appliances
14. **hummer** - auto
15. **humminbird** - electronics
16. **hunter** - apparel, accessories
17. **huntkey** - electronics
18. **huntsman** - construction
19. **huochu** - appliances
20. **huppe** - furniture
21. **hurakan** - auto
22. **hurom** - appliances
23. **husky** - appliances, auto
24. **husqvarna** - auto, construction
25. **huter** - appliances, construction

Now, I'll generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('huawang', 'construction'),
    ('huawei', 'electronics'),
    ('huawei', 'computers'),
    ('hubeiindustrialaimiletrading', 'construction'),
    ('hubert', 'appliances'),
    ('hubert', 'furniture'),
    ('hubsan', 'electronics'),
    ('hubster', 'apparel'),
    ('hubster', 'accessories'),
    ('hudsonbaby', 'kids'),
    ('hudsonbaby', 'apparel'),
    ('huggies', 'kids'),
    ('huggies', 'medicine'),
    ('hugoboss', 'apparel'),
    ('hugoboss', 'accessories'),
    ('huile', 'appliances'),
    ('huion', 'electronics'),
    ('humana', 'medicine'),
    ('humidifier', 'appliances'),
    ('hummer', 'auto'),
    ('humminbird', 'electronics'),
    ('hunter', 'apparel'),
    ('hunter', 'accessories'),
    ('huntkey', 'electronics'),
    ('huntsman', 'construction'),
    ('huochu', 'appliances'),
    ('huppe', 'furniture'),
    ('hurakan', 'auto'),
    ('hurom', 'appliances'),
    ('husky', 'appliances'),
    ('husky', 'auto'),
    ('husqvarna', 'auto'),
    ('husqvarna', 'construction'),
    ('huter', 'appliances'),
    ('huter', 'construction');
```
[2024-12-05T21:41:37.589+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the provided brands to their respective categories based on the searches:

1. **huawang** - construction
2. **huawei** - electronics, computers
3. **hubeiindustrialaimiletrading** - construction
4. **hubert** - appliances, furniture
5. **hubsan** - electronics
6. **hubster** - apparel, accessories
7. **hudsonbaby** - kids, apparel
8. **huggies** - kids, medicine
9. **hugoboss** - apparel, accessories
10. **huile** - appliances
11. **huion** - electronics
12. **humana** - medicine
13. **humidifier** - appliances
14. **hummer** - auto
15. **humminbird** - electronics
16. **hunter** - apparel, accessories
17. **huntkey** - electronics
18. **huntsman** - construction
19. **huochu** - appliances
20. **huppe** - furniture
21. **hurakan** - auto
22. **hurom** - appliances
23. **husky** - appliances, auto
24. **husqvarna** - auto, construction
25. **huter** - appliances, construction

Now, I'll generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('huawang', 'construction'),
    ('huawei', 'electronics'),
    ('huawei', 'computers'),
    ('hubeiindustrialaimiletrading', 'construction'),
    ('hubert', 'appliances'),
    ('hubert', 'furniture'),
    ('hubsan', 'electronics'),
    ('hubster', 'apparel'),
    ('hubster', 'accessories'),
    ('hudsonbaby', 'kids'),
    ('hudsonbaby', 'apparel'),
    ('huggies', 'kids'),
    ('huggies', 'medicine'),
    ('hugoboss', 'apparel'),
    ('hugoboss', 'accessories'),
    ('huile', 'appliances'),
    ('huion', 'electronics'),
    ('humana', 'medicine'),
    ('humidifier', 'appliances'),
    ('hummer', 'auto'),
    ('humminbird', 'electronics'),
    ('hunter', 'apparel'),
    ('hunter', 'accessories'),
    ('huntkey', 'electronics'),
    ('huntsman', 'construction'),
    ('huochu', 'appliances'),
    ('huppe', 'furniture'),
    ('hurakan', 'auto'),
    ('hurom', 'appliances'),
    ('husky', 'appliances'),
    ('husky', 'auto'),
    ('husqvarna', 'auto'),
    ('husqvarna', 'construction'),
    ('huter', 'appliances'),
    ('huter', 'construction');
```
[2024-12-05T21:41:37.609+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:41:37.610+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:41:12.111416+00:00, execution_date=20241205T214112, start_date=20241205T214117, end_date=20241205T214137
[2024-12-05T21:41:37.632+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:41:37.650+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:41:37.653+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
