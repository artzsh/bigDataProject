[2024-12-05T21:25:14.379+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:25:14.392+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:25:08.443777+00:00 [queued]>
[2024-12-05T21:25:14.398+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:25:08.443777+00:00 [queued]>
[2024-12-05T21:25:14.399+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:25:14.411+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:25:08.443777+00:00
[2024-12-05T21:25:14.417+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4125) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:25:14.418+0000] {standard_task_runner.py:72} INFO - Started process 4126 to run task
[2024-12-05T21:25:14.418+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:25:08.443777+00:00', '--job-id', '906', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpumd2dpqb']
[2024-12-05T21:25:14.420+0000] {standard_task_runner.py:105} INFO - Job 906: Subtask call_llm
[2024-12-05T21:25:14.455+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:25:08.443777+00:00 [running]> on host c7780884450d
[2024-12-05T21:25:14.517+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:25:08.443777+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:25:08.443777+00:00'
[2024-12-05T21:25:14.519+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:25:14.535+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['ekpower', 'ekskluziv', 'eksmo', 'elab', 'elamina', 'elan', 'elanda', 'elari', 'elaud', 'elbasco', 'elco', 'electrolux', 'electronicarts', 'electronicsdeluxe', 'electro-voice', 'elegant', 'elegante', 'elektrostandard', 'element', 'elena', 'elenberg', 'elf', 'elica', 'eliesaab', 'elika'], 'next_index': 1525}
[2024-12-05T21:25:14.536+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:25:14.957+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:25:33.996+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping of the provided brands to their respective categories based on the search results:

1. **ekpower** - electronics
2. **ekskluziv** - apparel, accessories
3. **eksmo** - stationery, kids
4. **elab** - electronics
5. **elamina** - furniture
6. **elan** - apparel
7. **elanda** - apparel
8. **elari** - electronics, accessories
9. **elaud** - electronics
10. **elbasco** - appliances
11. **elco** - electronics
12. **electrolux** - appliances
13. **electronicarts** - electronics, games
14. **electronicsdeluxe** - electronics
15. **electro-voice** - electronics
16. **elegant** - furniture, home decor
17. **elegante** - apparel
18. **elektrostandard** - electronics
19. **element** - apparel, sport
20. **elena** - apparel
21. **elenberg** - electronics
22. **elf** - kids
23. **elica** - appliances
24. **eliesaab** - apparel, accessories
25. **elika** - apparel

Now, here’s the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ekpower', 'electronics'),
    ('ekskluziv', 'apparel'),
    ('ekskluziv', 'accessories'),
    ('eksmo', 'stationery'),
    ('eksmo', 'kids'),
    ('elab', 'electronics'),
    ('elamina', 'furniture'),
    ('elan', 'apparel'),
    ('elanda', 'apparel'),
    ('elari', 'electronics'),
    ('elari', 'accessories'),
    ('elaud', 'electronics'),
    ('elbasco', 'appliances'),
    ('elco', 'electronics'),
    ('electrolux', 'appliances'),
    ('electronicarts', 'electronics'),
    ('electronicarts', 'games'),
    ('electronicsdeluxe', 'electronics'),
    ('electro-voice', 'electronics'),
    ('elegant', 'furniture'),
    ('elegant', 'home decor'),
    ('elegante', 'apparel'),
    ('elektrostandard', 'electronics'),
    ('element', 'apparel'),
    ('element', 'sport'),
    ('elena', 'apparel'),
    ('elenberg', 'electronics'),
    ('elf', 'kids'),
    ('elica', 'appliances'),
    ('eliesaab', 'apparel'),
    ('eliesaab', 'accessories'),
    ('elika', 'apparel');
```
[2024-12-05T21:25:33.996+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping of the provided brands to their respective categories based on the search results:

1. **ekpower** - electronics
2. **ekskluziv** - apparel, accessories
3. **eksmo** - stationery, kids
4. **elab** - electronics
5. **elamina** - furniture
6. **elan** - apparel
7. **elanda** - apparel
8. **elari** - electronics, accessories
9. **elaud** - electronics
10. **elbasco** - appliances
11. **elco** - electronics
12. **electrolux** - appliances
13. **electronicarts** - electronics, games
14. **electronicsdeluxe** - electronics
15. **electro-voice** - electronics
16. **elegant** - furniture, home decor
17. **elegante** - apparel
18. **elektrostandard** - electronics
19. **element** - apparel, sport
20. **elena** - apparel
21. **elenberg** - electronics
22. **elf** - kids
23. **elica** - appliances
24. **eliesaab** - apparel, accessories
25. **elika** - apparel

Now, here’s the SQL INSERT statement for the brand-category mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('ekpower', 'electronics'),
    ('ekskluziv', 'apparel'),
    ('ekskluziv', 'accessories'),
    ('eksmo', 'stationery'),
    ('eksmo', 'kids'),
    ('elab', 'electronics'),
    ('elamina', 'furniture'),
    ('elan', 'apparel'),
    ('elanda', 'apparel'),
    ('elari', 'electronics'),
    ('elari', 'accessories'),
    ('elaud', 'electronics'),
    ('elbasco', 'appliances'),
    ('elco', 'electronics'),
    ('electrolux', 'appliances'),
    ('electronicarts', 'electronics'),
    ('electronicarts', 'games'),
    ('electronicsdeluxe', 'electronics'),
    ('electro-voice', 'electronics'),
    ('elegant', 'furniture'),
    ('elegant', 'home decor'),
    ('elegante', 'apparel'),
    ('elektrostandard', 'electronics'),
    ('element', 'apparel'),
    ('element', 'sport'),
    ('elena', 'apparel'),
    ('elenberg', 'electronics'),
    ('elf', 'kids'),
    ('elica', 'appliances'),
    ('eliesaab', 'apparel'),
    ('eliesaab', 'accessories'),
    ('elika', 'apparel');
```
[2024-12-05T21:25:34.015+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:25:34.016+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:25:08.443777+00:00, execution_date=20241205T212508, start_date=20241205T212514, end_date=20241205T212534
[2024-12-05T21:25:34.051+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:25:34.068+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:25:34.071+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
