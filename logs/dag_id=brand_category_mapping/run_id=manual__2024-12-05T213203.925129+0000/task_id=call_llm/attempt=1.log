[2024-12-05T21:32:08.763+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:32:08.777+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:32:03.925129+00:00 [queued]>
[2024-12-05T21:32:08.785+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:32:03.925129+00:00 [queued]>
[2024-12-05T21:32:08.785+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:32:08.797+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:32:03.925129+00:00
[2024-12-05T21:32:08.803+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4489) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:32:08.805+0000] {standard_task_runner.py:72} INFO - Started process 4490 to run task
[2024-12-05T21:32:08.805+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:32:03.925129+00:00', '--job-id', '984', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp4hpv9k1h']
[2024-12-05T21:32:08.806+0000] {standard_task_runner.py:105} INFO - Job 984: Subtask call_llm
[2024-12-05T21:32:08.843+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:32:03.925129+00:00 [running]> on host c7780884450d
[2024-12-05T21:32:08.903+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:32:03.925129+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:32:03.925129+00:00'
[2024-12-05T21:32:08.905+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:32:08.920+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['f-promo', 'fracescodonni', 'fractaldesign', 'fragonard', 'framesi', 'francescodonni', 'franckolivier', 'franke', 'fred', 'freedom', 'freefeet', 'freelook', 'fresh', 'freya', 'friskies', 'frosch', 'frostor', 'frozen', 'fsb', 'fsd', 'fsp', 'fuatlev', 'fubag', 'fucoran', 'fujida'], 'next_index': 1850}
[2024-12-05T21:32:08.921+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:32:09.338+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:32:28.708+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the assigned categories for each brand based on the search queries:

1. **f-promo**: accessories
2. **fracescodonni**: apparel
3. **fractaldesign**: computers, electronics
4. **fragonard**: accessories
5. **framesi**: apparel
6. **francescodonni**: apparel
7. **franckolivier**: apparel, accessories
8. **franke**: appliances
9. **fred**: kids, accessories
10. **freedom**: furniture, appliances
11. **freefeet**: apparel, sport
12. **freelook**: accessories
13. **fresh**: appliances
14. **freya**: apparel
15. **friskies**: food (not in the provided categories, but closest would be medicine)
16. **frosch**: cleaning products (not in the provided categories, but closest would be appliances)
17. **frostor**: appliances
18. **frozen**: food (not in the provided categories, but closest would be appliances)
19. **fsb**: construction
20. **fsd**: electronics
21. **fsp**: electronics
22. **fuatlev**: auto
23. **fubag**: construction
24. **fucoran**: medicine
25. **fujida**: electronics

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('f-promo', 'accessories'),
    ('fracescodonni', 'apparel'),
    ('fractaldesign', 'computers'),
    ('fractaldesign', 'electronics'),
    ('fragonard', 'accessories'),
    ('framesi', 'apparel'),
    ('francescodonni', 'apparel'),
    ('franckolivier', 'apparel'),
    ('franckolivier', 'accessories'),
    ('franke', 'appliances'),
    ('fred', 'kids'),
    ('fred', 'accessories'),
    ('freedom', 'furniture'),
    ('freedom', 'appliances'),
    ('freefeet', 'apparel'),
    ('freefeet', 'sport'),
    ('freelook', 'accessories'),
    ('fresh', 'appliances'),
    ('freya', 'apparel'),
    ('friskies', 'medicine'),
    ('frosch', 'appliances'),
    ('frostor', 'appliances'),
    ('frozen', 'appliances'),
    ('fsb', 'construction'),
    ('fsd', 'electronics'),
    ('fsp', 'electronics'),
    ('fuatlev', 'auto'),
    ('fubag', 'construction'),
    ('fucoran', 'medicine'),
    ('fujida', 'electronics');
```
[2024-12-05T21:32:28.709+0000] {python.py:240} INFO - Done. Returned value was: Here are the assigned categories for each brand based on the search queries:

1. **f-promo**: accessories
2. **fracescodonni**: apparel
3. **fractaldesign**: computers, electronics
4. **fragonard**: accessories
5. **framesi**: apparel
6. **francescodonni**: apparel
7. **franckolivier**: apparel, accessories
8. **franke**: appliances
9. **fred**: kids, accessories
10. **freedom**: furniture, appliances
11. **freefeet**: apparel, sport
12. **freelook**: accessories
13. **fresh**: appliances
14. **freya**: apparel
15. **friskies**: food (not in the provided categories, but closest would be medicine)
16. **frosch**: cleaning products (not in the provided categories, but closest would be appliances)
17. **frostor**: appliances
18. **frozen**: food (not in the provided categories, but closest would be appliances)
19. **fsb**: construction
20. **fsd**: electronics
21. **fsp**: electronics
22. **fuatlev**: auto
23. **fubag**: construction
24. **fucoran**: medicine
25. **fujida**: electronics

Now, here is the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('f-promo', 'accessories'),
    ('fracescodonni', 'apparel'),
    ('fractaldesign', 'computers'),
    ('fractaldesign', 'electronics'),
    ('fragonard', 'accessories'),
    ('framesi', 'apparel'),
    ('francescodonni', 'apparel'),
    ('franckolivier', 'apparel'),
    ('franckolivier', 'accessories'),
    ('franke', 'appliances'),
    ('fred', 'kids'),
    ('fred', 'accessories'),
    ('freedom', 'furniture'),
    ('freedom', 'appliances'),
    ('freefeet', 'apparel'),
    ('freefeet', 'sport'),
    ('freelook', 'accessories'),
    ('fresh', 'appliances'),
    ('freya', 'apparel'),
    ('friskies', 'medicine'),
    ('frosch', 'appliances'),
    ('frostor', 'appliances'),
    ('frozen', 'appliances'),
    ('fsb', 'construction'),
    ('fsd', 'electronics'),
    ('fsp', 'electronics'),
    ('fuatlev', 'auto'),
    ('fubag', 'construction'),
    ('fucoran', 'medicine'),
    ('fujida', 'electronics');
```
[2024-12-05T21:32:28.728+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:32:28.729+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:32:03.925129+00:00, execution_date=20241205T213203, start_date=20241205T213208, end_date=20241205T213228
[2024-12-05T21:32:28.746+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:32:28.763+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:32:28.766+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
