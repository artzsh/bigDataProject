[2024-12-05T22:20:45.273+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:20:45.286+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:20:39.831321+00:00 [queued]>
[2024-12-05T22:20:45.292+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:20:39.831321+00:00 [queued]>
[2024-12-05T22:20:45.293+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:20:45.305+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:20:39.831321+00:00
[2024-12-05T22:20:45.311+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=7058) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:20:45.312+0000] {standard_task_runner.py:72} INFO - Started process 7059 to run task
[2024-12-05T22:20:45.313+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:20:39.831321+00:00', '--job-id', '1536', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpr0h93wg_']
[2024-12-05T22:20:45.315+0000] {standard_task_runner.py:105} INFO - Job 1536: Subtask call_llm
[2024-12-05T22:20:45.349+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:20:39.831321+00:00 [running]> on host c7780884450d
[2024-12-05T22:20:45.415+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:20:39.831321+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:20:39.831321+00:00'
[2024-12-05T22:20:45.416+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:20:45.433+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['qvs', 'racer', 'raceready', 'radian', 'radiant', 'rado', 'raduga', 'raffer', 'ragolle', 'raidmax', 'raido', 'railking', 'rainbo', 'rainbow', 'rainstahl', 'rajton', 'ralfringer', 'ralphlauren', 'rals', 'ramili', 'rand', 'ranok-creative', 'rant', 'rapala', 'rapid'], 'next_index': 4150}
[2024-12-05T22:20:45.433+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:20:45.846+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:21:03.133+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the task, I will categorize the brands as specified. Here are the results from the searches and my determinations:

1. **qvs**: appliances
2. **racer**: sport, apparel
3. **raceready**: sport, apparel
4. **radian**: electronics
5. **radiant**: electronics, appliances
6. **rado**: accessories
7. **raduga**: kids, stationery
8. **raffer**: furniture
9. **ragolle**: furniture
10. **raidmax**: computers, electronics
11. **raido**: electronics
12. **railking**: toys, kids
13. **rainbo**: apparel, accessories
14. **rainbow**: kids, stationery
15. **rainstahl**: appliances
16. **rajton**: construction
17. **ralfringer**: apparel
18. **ralphlauren**: apparel, accessories
19. **rals**: apparel
20. **ramili**: apparel
21. **rand**: furniture
22. **ranok-creative**: kids, stationery
23. **rant**: apparel
24. **rapala**: sport, accessories
25. **rapid**: stationery, electronics

Now, I will create the SQL INSERT statement based on these findings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('qvs', 'appliances'),
    ('racer', 'sport'),
    ('racer', 'apparel'),
    ('raceready', 'sport'),
    ('raceready', 'apparel'),
    ('radian', 'electronics'),
    ('radiant', 'electronics'),
    ('radiant', 'appliances'),
    ('rado', 'accessories'),
    ('raduga', 'kids'),
    ('raduga', 'stationery'),
    ('raffer', 'furniture'),
    ('ragolle', 'furniture'),
    ('raidmax', 'computers'),
    ('raidmax', 'electronics'),
    ('raido', 'electronics'),
    ('railking', 'kids'),
    ('rainbo', 'apparel'),
    ('rainbo', 'accessories'),
    ('rainbow', 'kids'),
    ('rainbow', 'stationery'),
    ('rainstahl', 'appliances'),
    ('rajton', 'construction'),
    ('ralfringer', 'apparel'),
    ('ralphlauren', 'apparel'),
    ('ralphlauren', 'accessories'),
    ('rals', 'apparel'),
    ('ramili', 'apparel'),
    ('rand', 'furniture'),
    ('ranok-creative', 'kids'),
    ('ranok-creative', 'stationery'),
    ('rant', 'apparel'),
    ('rapala', 'sport'),
    ('rapala', 'accessories'),
    ('rapid', 'stationery'),
    ('rapid', 'electronics');
``` 

This SQL statement includes all brands and their corresponding categories based on the searches conducted.
[2024-12-05T22:21:03.134+0000] {python.py:240} INFO - Done. Returned value was: Based on the task, I will categorize the brands as specified. Here are the results from the searches and my determinations:

1. **qvs**: appliances
2. **racer**: sport, apparel
3. **raceready**: sport, apparel
4. **radian**: electronics
5. **radiant**: electronics, appliances
6. **rado**: accessories
7. **raduga**: kids, stationery
8. **raffer**: furniture
9. **ragolle**: furniture
10. **raidmax**: computers, electronics
11. **raido**: electronics
12. **railking**: toys, kids
13. **rainbo**: apparel, accessories
14. **rainbow**: kids, stationery
15. **rainstahl**: appliances
16. **rajton**: construction
17. **ralfringer**: apparel
18. **ralphlauren**: apparel, accessories
19. **rals**: apparel
20. **ramili**: apparel
21. **rand**: furniture
22. **ranok-creative**: kids, stationery
23. **rant**: apparel
24. **rapala**: sport, accessories
25. **rapid**: stationery, electronics

Now, I will create the SQL INSERT statement based on these findings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('qvs', 'appliances'),
    ('racer', 'sport'),
    ('racer', 'apparel'),
    ('raceready', 'sport'),
    ('raceready', 'apparel'),
    ('radian', 'electronics'),
    ('radiant', 'electronics'),
    ('radiant', 'appliances'),
    ('rado', 'accessories'),
    ('raduga', 'kids'),
    ('raduga', 'stationery'),
    ('raffer', 'furniture'),
    ('ragolle', 'furniture'),
    ('raidmax', 'computers'),
    ('raidmax', 'electronics'),
    ('raido', 'electronics'),
    ('railking', 'kids'),
    ('rainbo', 'apparel'),
    ('rainbo', 'accessories'),
    ('rainbow', 'kids'),
    ('rainbow', 'stationery'),
    ('rainstahl', 'appliances'),
    ('rajton', 'construction'),
    ('ralfringer', 'apparel'),
    ('ralphlauren', 'apparel'),
    ('ralphlauren', 'accessories'),
    ('rals', 'apparel'),
    ('ramili', 'apparel'),
    ('rand', 'furniture'),
    ('ranok-creative', 'kids'),
    ('ranok-creative', 'stationery'),
    ('rant', 'apparel'),
    ('rapala', 'sport'),
    ('rapala', 'accessories'),
    ('rapid', 'stationery'),
    ('rapid', 'electronics');
``` 

This SQL statement includes all brands and their corresponding categories based on the searches conducted.
[2024-12-05T22:21:03.154+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:21:03.155+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:20:39.831321+00:00, execution_date=20241205T222039, start_date=20241205T222045, end_date=20241205T222103
[2024-12-05T22:21:03.185+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:21:03.204+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:21:03.209+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
