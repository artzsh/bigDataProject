[2024-12-05T21:39:38.494+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:39:38.507+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:39:33.572988+00:00 [queued]>
[2024-12-05T21:39:38.516+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:39:33.572988+00:00 [queued]>
[2024-12-05T21:39:38.516+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:39:38.530+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:39:33.572988+00:00
[2024-12-05T21:39:38.537+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=4881) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:39:38.538+0000] {standard_task_runner.py:72} INFO - Started process 4882 to run task
[2024-12-05T21:39:38.539+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:39:33.572988+00:00', '--job-id', '1068', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpdv0v2w62']
[2024-12-05T21:39:38.541+0000] {standard_task_runner.py:105} INFO - Job 1068: Subtask call_llm
[2024-12-05T21:39:38.584+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:39:33.572988+00:00 [running]> on host c7780884450d
[2024-12-05T21:39:38.661+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:39:33.572988+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:39:33.572988+00:00'
[2024-12-05T21:39:38.662+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:39:38.685+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['heyner', 'hgl', 'hgst', 'hibertek', 'hifiman', 'hifly', 'higashi', 'hightechway', 'hikma', 'hikoki', 'hikvision', 'hilberd', 'hilti', 'himalaya', 'himalayaherbals', 'hintek', 'hiper', 'hipp', 'hi-q', 'his', 'hisar', 'hisense', 'hitachi', 'hitechnic', 'hitkniga'], 'next_index': 2200}
[2024-12-05T21:39:38.686+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:39:39.104+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:40:02.800+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Based on the task, I will categorize each brand based on their products and then generate the SQL INSERT statement. Here are the results:

1. **heyner** - auto, accessories
2. **hgl** - electronics, appliances
3. **hgst** - computers, electronics
4. **hibertek** - electronics
5. **hifiman** - electronics, audio
6. **hifly** - auto, accessories
7. **higashi** - electronics, appliances
8. **hightechway** - electronics
9. **hikma** - medicine
10. **hikoki** - construction, appliances
11. **hikvision** - electronics
12. **hilberd** - electronics
13. **hilti** - construction, appliances
14. **himalaya** - medicine, health
15. **himalayaherbals** - medicine, health
16. **hintek** - electronics
17. **hiper** - electronics
18. **hipp** - kids, medicine
19. **hi-q** - electronics
20. **his** - electronics
21. **hisar** - appliances, kitchen
22. **hisense** - electronics, appliances
23. **hitachi** - electronics, appliances
24. **hitechnic** - electronics
25. **hitkniga** - stationery

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('heyner', 'auto'),
    ('heyner', 'accessories'),
    ('hgl', 'electronics'),
    ('hgl', 'appliances'),
    ('hgst', 'computers'),
    ('hgst', 'electronics'),
    ('hibertek', 'electronics'),
    ('hifiman', 'electronics'),
    ('hifiman', 'audio'),
    ('hifly', 'auto'),
    ('hifly', 'accessories'),
    ('higashi', 'electronics'),
    ('higashi', 'appliances'),
    ('hightechway', 'electronics'),
    ('hikma', 'medicine'),
    ('hikoki', 'construction'),
    ('hikoki', 'appliances'),
    ('hikvision', 'electronics'),
    ('hilberd', 'electronics'),
    ('hilti', 'construction'),
    ('hilti', 'appliances'),
    ('himalaya', 'medicine'),
    ('himalayaherbals', 'medicine'),
    ('hintek', 'electronics'),
    ('hiper', 'electronics'),
    ('hipp', 'kids'),
    ('hipp', 'medicine'),
    ('hi-q', 'electronics'),
    ('his', 'electronics'),
    ('hisar', 'appliances'),
    ('hisar', 'kitchen'),
    ('hisense', 'electronics'),
    ('hisense', 'appliances'),
    ('hitachi', 'electronics'),
    ('hitachi', 'appliances'),
    ('hitechnic', 'electronics'),
    ('hitkniga', 'stationery');
```
[2024-12-05T21:40:02.801+0000] {python.py:240} INFO - Done. Returned value was: Based on the task, I will categorize each brand based on their products and then generate the SQL INSERT statement. Here are the results:

1. **heyner** - auto, accessories
2. **hgl** - electronics, appliances
3. **hgst** - computers, electronics
4. **hibertek** - electronics
5. **hifiman** - electronics, audio
6. **hifly** - auto, accessories
7. **higashi** - electronics, appliances
8. **hightechway** - electronics
9. **hikma** - medicine
10. **hikoki** - construction, appliances
11. **hikvision** - electronics
12. **hilberd** - electronics
13. **hilti** - construction, appliances
14. **himalaya** - medicine, health
15. **himalayaherbals** - medicine, health
16. **hintek** - electronics
17. **hiper** - electronics
18. **hipp** - kids, medicine
19. **hi-q** - electronics
20. **his** - electronics
21. **hisar** - appliances, kitchen
22. **hisense** - electronics, appliances
23. **hitachi** - electronics, appliances
24. **hitechnic** - electronics
25. **hitkniga** - stationery

Now, I will generate the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('heyner', 'auto'),
    ('heyner', 'accessories'),
    ('hgl', 'electronics'),
    ('hgl', 'appliances'),
    ('hgst', 'computers'),
    ('hgst', 'electronics'),
    ('hibertek', 'electronics'),
    ('hifiman', 'electronics'),
    ('hifiman', 'audio'),
    ('hifly', 'auto'),
    ('hifly', 'accessories'),
    ('higashi', 'electronics'),
    ('higashi', 'appliances'),
    ('hightechway', 'electronics'),
    ('hikma', 'medicine'),
    ('hikoki', 'construction'),
    ('hikoki', 'appliances'),
    ('hikvision', 'electronics'),
    ('hilberd', 'electronics'),
    ('hilti', 'construction'),
    ('hilti', 'appliances'),
    ('himalaya', 'medicine'),
    ('himalayaherbals', 'medicine'),
    ('hintek', 'electronics'),
    ('hiper', 'electronics'),
    ('hipp', 'kids'),
    ('hipp', 'medicine'),
    ('hi-q', 'electronics'),
    ('his', 'electronics'),
    ('hisar', 'appliances'),
    ('hisar', 'kitchen'),
    ('hisense', 'electronics'),
    ('hisense', 'appliances'),
    ('hitachi', 'electronics'),
    ('hitachi', 'appliances'),
    ('hitechnic', 'electronics'),
    ('hitkniga', 'stationery');
```
[2024-12-05T21:40:02.833+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:40:02.833+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:39:33.572988+00:00, execution_date=20241205T213933, start_date=20241205T213938, end_date=20241205T214002
[2024-12-05T21:40:02.852+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:40:02.875+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:40:02.878+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
