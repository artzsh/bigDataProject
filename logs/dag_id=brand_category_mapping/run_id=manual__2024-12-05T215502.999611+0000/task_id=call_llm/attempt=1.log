[2024-12-05T21:55:07.882+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:55:07.895+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:55:02.999611+00:00 [queued]>
[2024-12-05T21:55:07.901+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:55:02.999611+00:00 [queued]>
[2024-12-05T21:55:07.901+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:55:07.913+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:55:02.999611+00:00
[2024-12-05T21:55:07.918+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=5693) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:55:07.919+0000] {standard_task_runner.py:72} INFO - Started process 5694 to run task
[2024-12-05T21:55:07.920+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:55:02.999611+00:00', '--job-id', '1242', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmp4w6e1j2w']
[2024-12-05T21:55:07.922+0000] {standard_task_runner.py:105} INFO - Job 1242: Subtask call_llm
[2024-12-05T21:55:07.956+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:55:02.999611+00:00 [running]> on host c7780884450d
[2024-12-05T21:55:08.017+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:55:02.999611+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:55:02.999611+00:00'
[2024-12-05T21:55:08.018+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:55:08.035+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['lihom', 'likato', 'likatoprofessional', 'likebook', 'lilipups', 'lilo', 'lilwoodzeez', 'liman', 'lina', 'lindsay', 'line', 'lingua', 'lioele', 'lion', 'lipsmacker', 'lira', 'lirene', 'listvig', 'lite-on', 'littleangel', 'littlelivepets', 'littlestpetshop', 'littletikes', 'liujo', 'liv'], 'next_index': 2925}
[2024-12-05T21:55:08.036+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:55:08.447+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:55:26.370+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the results of the searches for each brand along with their assigned categories:

1. **lihom** - appliances
2. **likato** - kids, toys
3. **likatoprofessional** - electronics, computers
4. **likebook** - electronics, computers
5. **lilipups** - kids, toys
6. **lilo** - kids, toys
7. **lilwoodzeez** - kids, toys
8. **liman** - construction, appliances
9. **lina** - apparel, accessories
10. **lindsay** - apparel, accessories
11. **line** - apparel
12. **lingua** - stationery
13. **lioele** - cosmetics, accessories
14. **lion** - medicine, health
15. **lipsmacker** - cosmetics, accessories
16. **lira** - apparel
17. **lirene** - cosmetics, medicine
18. **listvig** - electronics
19. **lite-on** - electronics, computers
20. **littleangel** - kids, toys
21. **littlelivepets** - kids, toys
22. **littlestpetshop** - kids, toys
23. **littletikes** - kids, toys
24. **liujo** - apparel, accessories
25. **liv** - apparel, accessories

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('lihom', 'appliances'),
    ('likato', 'kids'),
    ('likato', 'toys'),
    ('likatoprofessional', 'electronics'),
    ('likatoprofessional', 'computers'),
    ('likebook', 'electronics'),
    ('likebook', 'computers'),
    ('lilipups', 'kids'),
    ('lilipups', 'toys'),
    ('lilo', 'kids'),
    ('lilo', 'toys'),
    ('lilwoodzeez', 'kids'),
    ('lilwoodzeez', 'toys'),
    ('liman', 'construction'),
    ('liman', 'appliances'),
    ('lina', 'apparel'),
    ('lina', 'accessories'),
    ('lindsay', 'apparel'),
    ('lindsay', 'accessories'),
    ('line', 'apparel'),
    ('lingua', 'stationery'),
    ('lioele', 'cosmetics'),
    ('lioele', 'accessories'),
    ('lion', 'medicine'),
    ('lion', 'health'),
    ('lipsmacker', 'cosmetics'),
    ('lipsmacker', 'accessories'),
    ('lira', 'apparel'),
    ('lirene', 'cosmetics'),
    ('lirene', 'medicine'),
    ('listvig', 'electronics'),
    ('lite-on', 'electronics'),
    ('lite-on', 'computers'),
    ('littleangel', 'kids'),
    ('littleangel', 'toys'),
    ('littlelivepets', 'kids'),
    ('littlelivepets', 'toys'),
    ('littlestpetshop', 'kids'),
    ('littlestpetshop', 'toys'),
    ('littletikes', 'kids'),
    ('littletikes', 'toys'),
    ('liujo', 'apparel'),
    ('liujo', 'accessories'),
    ('liv', 'apparel'),
    ('liv', 'accessories');
```
[2024-12-05T21:55:26.370+0000] {python.py:240} INFO - Done. Returned value was: Here are the results of the searches for each brand along with their assigned categories:

1. **lihom** - appliances
2. **likato** - kids, toys
3. **likatoprofessional** - electronics, computers
4. **likebook** - electronics, computers
5. **lilipups** - kids, toys
6. **lilo** - kids, toys
7. **lilwoodzeez** - kids, toys
8. **liman** - construction, appliances
9. **lina** - apparel, accessories
10. **lindsay** - apparel, accessories
11. **line** - apparel
12. **lingua** - stationery
13. **lioele** - cosmetics, accessories
14. **lion** - medicine, health
15. **lipsmacker** - cosmetics, accessories
16. **lira** - apparel
17. **lirene** - cosmetics, medicine
18. **listvig** - electronics
19. **lite-on** - electronics, computers
20. **littleangel** - kids, toys
21. **littlelivepets** - kids, toys
22. **littlestpetshop** - kids, toys
23. **littletikes** - kids, toys
24. **liujo** - apparel, accessories
25. **liv** - apparel, accessories

Now, I will generate the SQL INSERT statement based on the assigned categories:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('lihom', 'appliances'),
    ('likato', 'kids'),
    ('likato', 'toys'),
    ('likatoprofessional', 'electronics'),
    ('likatoprofessional', 'computers'),
    ('likebook', 'electronics'),
    ('likebook', 'computers'),
    ('lilipups', 'kids'),
    ('lilipups', 'toys'),
    ('lilo', 'kids'),
    ('lilo', 'toys'),
    ('lilwoodzeez', 'kids'),
    ('lilwoodzeez', 'toys'),
    ('liman', 'construction'),
    ('liman', 'appliances'),
    ('lina', 'apparel'),
    ('lina', 'accessories'),
    ('lindsay', 'apparel'),
    ('lindsay', 'accessories'),
    ('line', 'apparel'),
    ('lingua', 'stationery'),
    ('lioele', 'cosmetics'),
    ('lioele', 'accessories'),
    ('lion', 'medicine'),
    ('lion', 'health'),
    ('lipsmacker', 'cosmetics'),
    ('lipsmacker', 'accessories'),
    ('lira', 'apparel'),
    ('lirene', 'cosmetics'),
    ('lirene', 'medicine'),
    ('listvig', 'electronics'),
    ('lite-on', 'electronics'),
    ('lite-on', 'computers'),
    ('littleangel', 'kids'),
    ('littleangel', 'toys'),
    ('littlelivepets', 'kids'),
    ('littlelivepets', 'toys'),
    ('littlestpetshop', 'kids'),
    ('littlestpetshop', 'toys'),
    ('littletikes', 'kids'),
    ('littletikes', 'toys'),
    ('liujo', 'apparel'),
    ('liujo', 'accessories'),
    ('liv', 'apparel'),
    ('liv', 'accessories');
```
[2024-12-05T21:55:26.390+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:55:26.390+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:55:02.999611+00:00, execution_date=20241205T215502, start_date=20241205T215507, end_date=20241205T215526
[2024-12-05T21:55:26.440+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:55:26.458+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:55:26.461+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
