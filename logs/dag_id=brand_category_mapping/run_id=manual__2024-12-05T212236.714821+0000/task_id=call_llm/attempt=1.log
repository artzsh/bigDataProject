[2024-12-05T21:22:41.614+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T21:22:41.627+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:22:36.714821+00:00 [queued]>
[2024-12-05T21:22:41.633+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:22:36.714821+00:00 [queued]>
[2024-12-05T21:22:41.634+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T21:22:41.647+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 21:22:36.714821+00:00
[2024-12-05T21:22:41.653+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3992) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T21:22:41.654+0000] {standard_task_runner.py:72} INFO - Started process 3993 to run task
[2024-12-05T21:22:41.655+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T21:22:36.714821+00:00', '--job-id', '876', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpk24i99fp']
[2024-12-05T21:22:41.657+0000] {standard_task_runner.py:105} INFO - Job 876: Subtask call_llm
[2024-12-05T21:22:41.691+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T21:22:36.714821+00:00 [running]> on host c7780884450d
[2024-12-05T21:22:41.751+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T21:22:36.714821+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T21:22:36.714821+00:00'
[2024-12-05T21:22:41.752+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T21:22:41.769+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['doohan', 'doona', 'dopdrops', 'dormeo', 'dornbracht', 'doshhome', 'doubleeagle', 'doublefish', 'dougez', 'doui', 'dove', 'dowontec', 'dox', 'dpo', 'dracco', 'dragonfly', 'dragon-i', 'dragons', 'dr.alex', 'drbrowns', 'dreammachines', 'dreamwave', 'dreja', 'dremel', 'drfrei'], 'next_index': 1400}
[2024-12-05T21:22:41.769+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T21:22:42.200+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T21:23:02.032+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here is the mapping of brands to their respective categories based on the search results:

1. **doohan** - appliances, auto
2. **doona** - kids, accessories
3. **dopdrops** - medicine
4. **dormeo** - furniture, appliances
5. **dornbracht** - appliances, furniture
6. **doshhome** - furniture, accessories
7. **doubleeagle** - auto, sport
8. **doublefish** - sport
9. **dougez** - stationery
10. **doui** - accessories
11. **dove** - medicine, personal care
12. **dowontec** - electronics
13. **dox** - electronics
14. **dpo** - electronics
15. **dracco** - kids, accessories
16. **dragonfly** - kids, stationery
17. **dragon-i** - apparel, accessories
18. **dragons** - kids
19. **dr.alex** - medicine
20. **drbrowns** - kids, medicine
21. **dreammachines** - computers, electronics
22. **dreamwave** - electronics
23. **dreja** - furniture
24. **dremel** - construction, appliances
25. **drfrei** - medicine

Now, I will generate the SQL INSERT statement based on this mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('doohan', 'appliances'),
    ('doohan', 'auto'),
    ('doona', 'kids'),
    ('doona', 'accessories'),
    ('dopdrops', 'medicine'),
    ('dormeo', 'furniture'),
    ('dormeo', 'appliances'),
    ('dornbracht', 'appliances'),
    ('dornbracht', 'furniture'),
    ('doshhome', 'furniture'),
    ('doshhome', 'accessories'),
    ('doubleeagle', 'auto'),
    ('doubleeagle', 'sport'),
    ('doublefish', 'sport'),
    ('dougez', 'stationery'),
    ('doui', 'accessories'),
    ('dove', 'medicine'),
    ('dove', 'personal care'),
    ('dowontec', 'electronics'),
    ('dox', 'electronics'),
    ('dpo', 'electronics'),
    ('dracco', 'kids'),
    ('dracco', 'accessories'),
    ('dragonfly', 'kids'),
    ('dragonfly', 'stationery'),
    ('dragon-i', 'apparel'),
    ('dragon-i', 'accessories'),
    ('dragons', 'kids'),
    ('dr.alex', 'medicine'),
    ('drbrowns', 'kids'),
    ('drbrowns', 'medicine'),
    ('dreammachines', 'computers'),
    ('dreammachines', 'electronics'),
    ('dreamwave', 'electronics'),
    ('dreja', 'furniture'),
    ('dremel', 'construction'),
    ('dremel', 'appliances'),
    ('drfrei', 'medicine');
```
[2024-12-05T21:23:02.033+0000] {python.py:240} INFO - Done. Returned value was: Here is the mapping of brands to their respective categories based on the search results:

1. **doohan** - appliances, auto
2. **doona** - kids, accessories
3. **dopdrops** - medicine
4. **dormeo** - furniture, appliances
5. **dornbracht** - appliances, furniture
6. **doshhome** - furniture, accessories
7. **doubleeagle** - auto, sport
8. **doublefish** - sport
9. **dougez** - stationery
10. **doui** - accessories
11. **dove** - medicine, personal care
12. **dowontec** - electronics
13. **dox** - electronics
14. **dpo** - electronics
15. **dracco** - kids, accessories
16. **dragonfly** - kids, stationery
17. **dragon-i** - apparel, accessories
18. **dragons** - kids
19. **dr.alex** - medicine
20. **drbrowns** - kids, medicine
21. **dreammachines** - computers, electronics
22. **dreamwave** - electronics
23. **dreja** - furniture
24. **dremel** - construction, appliances
25. **drfrei** - medicine

Now, I will generate the SQL INSERT statement based on this mapping:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('doohan', 'appliances'),
    ('doohan', 'auto'),
    ('doona', 'kids'),
    ('doona', 'accessories'),
    ('dopdrops', 'medicine'),
    ('dormeo', 'furniture'),
    ('dormeo', 'appliances'),
    ('dornbracht', 'appliances'),
    ('dornbracht', 'furniture'),
    ('doshhome', 'furniture'),
    ('doshhome', 'accessories'),
    ('doubleeagle', 'auto'),
    ('doubleeagle', 'sport'),
    ('doublefish', 'sport'),
    ('dougez', 'stationery'),
    ('doui', 'accessories'),
    ('dove', 'medicine'),
    ('dove', 'personal care'),
    ('dowontec', 'electronics'),
    ('dox', 'electronics'),
    ('dpo', 'electronics'),
    ('dracco', 'kids'),
    ('dracco', 'accessories'),
    ('dragonfly', 'kids'),
    ('dragonfly', 'stationery'),
    ('dragon-i', 'apparel'),
    ('dragon-i', 'accessories'),
    ('dragons', 'kids'),
    ('dr.alex', 'medicine'),
    ('drbrowns', 'kids'),
    ('drbrowns', 'medicine'),
    ('dreammachines', 'computers'),
    ('dreammachines', 'electronics'),
    ('dreamwave', 'electronics'),
    ('dreja', 'furniture'),
    ('dremel', 'construction'),
    ('dremel', 'appliances'),
    ('drfrei', 'medicine');
```
[2024-12-05T21:23:02.051+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T21:23:02.052+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T21:22:36.714821+00:00, execution_date=20241205T212236, start_date=20241205T212241, end_date=20241205T212302
[2024-12-05T21:23:02.075+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T21:23:02.092+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T21:23:02.096+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
