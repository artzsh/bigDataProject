[2024-12-05T20:58:05.637+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T20:58:05.651+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:58:00.757576+00:00 [queued]>
[2024-12-05T20:58:05.658+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:58:00.757576+00:00 [queued]>
[2024-12-05T20:58:05.658+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T20:58:05.672+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 20:58:00.757576+00:00
[2024-12-05T20:58:05.678+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=2658) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T20:58:05.679+0000] {standard_task_runner.py:72} INFO - Started process 2659 to run task
[2024-12-05T20:58:05.680+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T20:58:00.757576+00:00', '--job-id', '588', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpq2z3olo3']
[2024-12-05T20:58:05.682+0000] {standard_task_runner.py:105} INFO - Job 588: Subtask call_llm
[2024-12-05T20:58:05.717+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T20:58:00.757576+00:00 [running]> on host c7780884450d
[2024-12-05T20:58:05.775+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T20:58:00.757576+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T20:58:00.757576+00:00'
[2024-12-05T20:58:05.776+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T20:58:05.791+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['alphard', 'alpicool', 'alpika', 'alpina', 'alpinapabliser', 'alpine', 'alser', 'altacto', 'altair', 'alteco', 'altel', 'alterna', 'alternativa', 'altex', 'altinbasak', 'altrad', 'alumet', 'alutec', 'alvarez', 'alveus', 'alvitek', 'alvo', 'alza', 'amalbooks', 'amarobaby'], 'next_index': 200}
[2024-12-05T20:58:05.792+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T20:58:06.216+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T20:58:26.463+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here are the categories assigned to each brand based on the search results and context:

1. **alphard** - electronics
2. **alpicool** - appliances
3. **alpika** - apparel
4. **alpina** - apparel
5. **alpinapabliser** - apparel
6. **alpine** - electronics, auto
7. **alser** - electronics
8. **altacto** - electronics
9. **altair** - electronics
10. **alteco** - construction
11. **altel** - electronics
12. **alterna** - electronics
13. **alternativa** - apparel
14. **altex** - electronics
15. **altinbasak** - apparel
16. **altrad** - construction
17. **alumet** - construction
18. **alutec** - construction
19. **alvarez** - furniture
20. **alveus** - appliances
21. **alvitek** - electronics
22. **alvo** - electronics
23. **alza** - electronics
24. **amalbooks** - stationery
25. **amarobaby** - kids, apparel

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('alphard', 'electronics'),
    ('alpicool', 'appliances'),
    ('alpika', 'apparel'),
    ('alpina', 'apparel'),
    ('alpinapabliser', 'apparel'),
    ('alpine', 'electronics'),
    ('alpine', 'auto'),
    ('alser', 'electronics'),
    ('altacto', 'electronics'),
    ('altair', 'electronics'),
    ('alteco', 'construction'),
    ('altel', 'electronics'),
    ('alterna', 'electronics'),
    ('alternativa', 'apparel'),
    ('altex', 'electronics'),
    ('altinbasak', 'apparel'),
    ('altrad', 'construction'),
    ('alumet', 'construction'),
    ('alutec', 'construction'),
    ('alvarez', 'furniture'),
    ('alveus', 'appliances'),
    ('alvitek', 'electronics'),
    ('alvo', 'electronics'),
    ('alza', 'electronics'),
    ('amalbooks', 'stationery'),
    ('amarobaby', 'kids'),
    ('amarobaby', 'apparel');
```
[2024-12-05T20:58:26.463+0000] {python.py:240} INFO - Done. Returned value was: Here are the categories assigned to each brand based on the search results and context:

1. **alphard** - electronics
2. **alpicool** - appliances
3. **alpika** - apparel
4. **alpina** - apparel
5. **alpinapabliser** - apparel
6. **alpine** - electronics, auto
7. **alser** - electronics
8. **altacto** - electronics
9. **altair** - electronics
10. **alteco** - construction
11. **altel** - electronics
12. **alterna** - electronics
13. **alternativa** - apparel
14. **altex** - electronics
15. **altinbasak** - apparel
16. **altrad** - construction
17. **alumet** - construction
18. **alutec** - construction
19. **alvarez** - furniture
20. **alveus** - appliances
21. **alvitek** - electronics
22. **alvo** - electronics
23. **alza** - electronics
24. **amalbooks** - stationery
25. **amarobaby** - kids, apparel

Now, here is the SQL INSERT statement:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('alphard', 'electronics'),
    ('alpicool', 'appliances'),
    ('alpika', 'apparel'),
    ('alpina', 'apparel'),
    ('alpinapabliser', 'apparel'),
    ('alpine', 'electronics'),
    ('alpine', 'auto'),
    ('alser', 'electronics'),
    ('altacto', 'electronics'),
    ('altair', 'electronics'),
    ('alteco', 'construction'),
    ('altel', 'electronics'),
    ('alterna', 'electronics'),
    ('alternativa', 'apparel'),
    ('altex', 'electronics'),
    ('altinbasak', 'apparel'),
    ('altrad', 'construction'),
    ('alumet', 'construction'),
    ('alutec', 'construction'),
    ('alvarez', 'furniture'),
    ('alveus', 'appliances'),
    ('alvitek', 'electronics'),
    ('alvo', 'electronics'),
    ('alza', 'electronics'),
    ('amalbooks', 'stationery'),
    ('amarobaby', 'kids'),
    ('amarobaby', 'apparel');
```
[2024-12-05T20:58:26.484+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T20:58:26.484+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T20:58:00.757576+00:00, execution_date=20241205T205800, start_date=20241205T205805, end_date=20241205T205826
[2024-12-05T20:58:26.517+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T20:58:26.541+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T20:58:26.545+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
