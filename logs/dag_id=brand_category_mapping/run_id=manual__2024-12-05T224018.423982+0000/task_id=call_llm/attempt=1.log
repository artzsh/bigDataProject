[2024-12-05T22:40:23.169+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2024-12-05T22:40:23.184+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:40:18.423982+00:00 [queued]>
[2024-12-05T22:40:23.192+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:40:18.423982+00:00 [queued]>
[2024-12-05T22:40:23.194+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 4
[2024-12-05T22:40:23.209+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): call_llm> on 2024-12-05 22:40:18.423982+00:00
[2024-12-05T22:40:23.216+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=8092) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-05T22:40:23.218+0000] {standard_task_runner.py:72} INFO - Started process 8093 to run task
[2024-12-05T22:40:23.218+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'brand_category_mapping', 'call_llm', 'manual__2024-12-05T22:40:18.423982+00:00', '--job-id', '1758', '--raw', '--subdir', 'DAGS_FOLDER/llm_mapping.py', '--cfg-path', '/tmp/tmpjlhssfvw']
[2024-12-05T22:40:23.220+0000] {standard_task_runner.py:105} INFO - Job 1758: Subtask call_llm
[2024-12-05T22:40:23.263+0000] {task_command.py:467} INFO - Running <TaskInstance: brand_category_mapping.call_llm manual__2024-12-05T22:40:18.423982+00:00 [running]> on host c7780884450d
[2024-12-05T22:40:23.340+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='artzsh' AIRFLOW_CTX_DAG_ID='brand_category_mapping' AIRFLOW_CTX_TASK_ID='call_llm' AIRFLOW_CTX_EXECUTION_DATE='2024-12-05T22:40:18.423982+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-05T22:40:18.423982+00:00'
[2024-12-05T22:40:23.342+0000] {taskinstance.py:731} INFO - ::endgroup::
[2024-12-05T22:40:23.364+0000] {llm_mapping.py:155} INFO - Извлечён return_value: {'batch': ['tokina', 'tokler', 'tololo', 'tomahawk', 'tomex', 'tomfarr', 'tomford', 'tomik', 'tomix', 'tommy', 'tommyhilfiger', 'tomoloo', 'tomtom', 'tomy', 'tonar', 'toneybaby', 'tongs', 'tontarelli', 'tonybellucci', 'toocool', 'tools', 'topbat', 'topex', 'topface', 'topicrem'], 'next_index': 5075}
[2024-12-05T22:40:23.365+0000] {llm_mapping.py:127} INFO - Отправка запроса к LLM.
[2024-12-05T22:40:23.782+0000] {logging_mixin.py:190} INFO - New g4f version: 0.3.8.3 (current: 0.3.8.0) | pip install -U g4f
[2024-12-05T22:40:43.270+0000] {llm_mapping.py:141} INFO - Получен ответ от LLM: Here’s the mapping for the provided brands based on the categories they fit into:

1. **tokina** - electronics (camera lenses)
2. **tokler** - apparel (clothing)
3. **tololo** - accessories (fashion accessories)
4. **tomahawk** - auto (automotive parts)
5. **tomex** - construction (construction materials)
6. **tomfarr** - apparel (clothing)
7. **tomford** - apparel (luxury fashion) 
8. **tomik** - kids (toys)
9. **tomix** - kids (toys)
10. **tommy** - apparel (clothing)
11. **tommyhilfiger** - apparel (clothing)
12. **tomoloo** - kids (toys)
13. **tomtom** - electronics (GPS devices)
14. **tomy** - kids (toys)
15. **tonar** - accessories (musical accessories)
16. **toneybaby** - kids (baby products)
17. **tongs** - appliances (kitchen tools)
18. **tontarelli** - country_yard (garden products)
19. **tonybellucci** - apparel (clothing)
20. **toocool** - apparel (clothing)
21. **tools** - construction (tools)
22. **topbat** - electronics (batteries)
23. **topex** - construction (tools and hardware)
24. **topface** - cosmetics (not in the provided categories but could be considered accessories)
25. **topicrem** - medicine (skincare products)

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('tokina', 'electronics'),
    ('tokler', 'apparel'),
    ('tololo', 'accessories'),
    ('tomahawk', 'auto'),
    ('tomex', 'construction'),
    ('tomfarr', 'apparel'),
    ('tomford', 'apparel'),
    ('tomik', 'kids'),
    ('tomix', 'kids'),
    ('tommy', 'apparel'),
    ('tommyhilfiger', 'apparel'),
    ('tomoloo', 'kids'),
    ('tomtom', 'electronics'),
    ('tomy', 'kids'),
    ('tonar', 'accessories'),
    ('toneybaby', 'kids'),
    ('tongs', 'appliances'),
    ('tontarelli', 'country_yard'),
    ('tonybellucci', 'apparel'),
    ('toocool', 'apparel'),
    ('tools', 'construction'),
    ('topbat', 'electronics'),
    ('topex', 'construction'),
    ('topface', 'accessories'),
    ('topicrem', 'medicine');
```
[2024-12-05T22:40:43.270+0000] {python.py:240} INFO - Done. Returned value was: Here’s the mapping for the provided brands based on the categories they fit into:

1. **tokina** - electronics (camera lenses)
2. **tokler** - apparel (clothing)
3. **tololo** - accessories (fashion accessories)
4. **tomahawk** - auto (automotive parts)
5. **tomex** - construction (construction materials)
6. **tomfarr** - apparel (clothing)
7. **tomford** - apparel (luxury fashion) 
8. **tomik** - kids (toys)
9. **tomix** - kids (toys)
10. **tommy** - apparel (clothing)
11. **tommyhilfiger** - apparel (clothing)
12. **tomoloo** - kids (toys)
13. **tomtom** - electronics (GPS devices)
14. **tomy** - kids (toys)
15. **tonar** - accessories (musical accessories)
16. **toneybaby** - kids (baby products)
17. **tongs** - appliances (kitchen tools)
18. **tontarelli** - country_yard (garden products)
19. **tonybellucci** - apparel (clothing)
20. **toocool** - apparel (clothing)
21. **tools** - construction (tools)
22. **topbat** - electronics (batteries)
23. **topex** - construction (tools and hardware)
24. **topface** - cosmetics (not in the provided categories but could be considered accessories)
25. **topicrem** - medicine (skincare products)

Now, I will generate the SQL INSERT statement based on the mappings:

```sql
INSERT INTO "DDS".brand_category_mapping (brand, category_index) VALUES
    ('tokina', 'electronics'),
    ('tokler', 'apparel'),
    ('tololo', 'accessories'),
    ('tomahawk', 'auto'),
    ('tomex', 'construction'),
    ('tomfarr', 'apparel'),
    ('tomford', 'apparel'),
    ('tomik', 'kids'),
    ('tomix', 'kids'),
    ('tommy', 'apparel'),
    ('tommyhilfiger', 'apparel'),
    ('tomoloo', 'kids'),
    ('tomtom', 'electronics'),
    ('tomy', 'kids'),
    ('tonar', 'accessories'),
    ('toneybaby', 'kids'),
    ('tongs', 'appliances'),
    ('tontarelli', 'country_yard'),
    ('tonybellucci', 'apparel'),
    ('toocool', 'apparel'),
    ('tools', 'construction'),
    ('topbat', 'electronics'),
    ('topex', 'construction'),
    ('topface', 'accessories'),
    ('topicrem', 'medicine');
```
[2024-12-05T22:40:43.292+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2024-12-05T22:40:43.292+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=brand_category_mapping, task_id=call_llm, run_id=manual__2024-12-05T22:40:18.423982+00:00, execution_date=20241205T224018, start_date=20241205T224023, end_date=20241205T224043
[2024-12-05T22:40:43.327+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2024-12-05T22:40:43.345+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-12-05T22:40:43.348+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
